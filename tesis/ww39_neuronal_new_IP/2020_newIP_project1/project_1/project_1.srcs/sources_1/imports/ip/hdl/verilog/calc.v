// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2018.3
// Copyright (C) 1986-2018 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module calc (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_continue,
        ap_idle,
        ap_ready,
        simConfig_rowsToSimulate_V_dout,
        simConfig_rowsToSimulate_V_empty_n,
        simConfig_rowsToSimulate_V_read,
        simConfig_BLOCK_NUMBERS_V_dout,
        simConfig_BLOCK_NUMBERS_V_empty_n,
        simConfig_BLOCK_NUMBERS_V_read,
        simConfig_rowsToSimulate_V_out_din,
        simConfig_rowsToSimulate_V_out_full_n,
        simConfig_rowsToSimulate_V_out_write,
        simConfig_BLOCK_NUMBERS_V_out_din,
        simConfig_BLOCK_NUMBERS_V_out_full_n,
        simConfig_BLOCK_NUMBERS_V_out_write,
        processedData_V_data_dout,
        processedData_V_data_empty_n,
        processedData_V_data_read,
        processedData_V_data_1_dout,
        processedData_V_data_1_empty_n,
        processedData_V_data_1_read,
        processedData_V_data_2_dout,
        processedData_V_data_2_empty_n,
        processedData_V_data_2_read,
        processedData_V_data_3_dout,
        processedData_V_data_3_empty_n,
        processedData_V_data_3_read,
        fixedData_V_data_dout,
        fixedData_V_data_empty_n,
        fixedData_V_data_read,
        fixedData_V_tlast_V_dout,
        fixedData_V_tlast_V_empty_n,
        fixedData_V_tlast_V_read,
        V_V_data_0_din,
        V_V_data_0_full_n,
        V_V_data_0_write,
        V_V_data_1_din,
        V_V_data_1_full_n,
        V_V_data_1_write,
        V_V_data_2_din,
        V_V_data_2_full_n,
        V_V_data_2_write,
        V_V_data_3_din,
        V_V_data_3_full_n,
        V_V_data_3_write,
        F_V_data_0_din,
        F_V_data_0_full_n,
        F_V_data_0_write,
        F_V_data_1_din,
        F_V_data_1_full_n,
        F_V_data_1_write,
        F_V_data_2_din,
        F_V_data_2_full_n,
        F_V_data_2_write,
        F_V_data_3_din,
        F_V_data_3_full_n,
        F_V_data_3_write
);

parameter    ap_ST_fsm_state1 = 7'd1;
parameter    ap_ST_fsm_state2 = 7'd2;
parameter    ap_ST_fsm_state3 = 7'd4;
parameter    ap_ST_fsm_state4 = 7'd8;
parameter    ap_ST_fsm_pp0_stage0 = 7'd16;
parameter    ap_ST_fsm_pp0_stage1 = 7'd32;
parameter    ap_ST_fsm_state42 = 7'd64;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
input   ap_continue;
output   ap_idle;
output   ap_ready;
input  [26:0] simConfig_rowsToSimulate_V_dout;
input   simConfig_rowsToSimulate_V_empty_n;
output   simConfig_rowsToSimulate_V_read;
input  [26:0] simConfig_BLOCK_NUMBERS_V_dout;
input   simConfig_BLOCK_NUMBERS_V_empty_n;
output   simConfig_BLOCK_NUMBERS_V_read;
output  [26:0] simConfig_rowsToSimulate_V_out_din;
input   simConfig_rowsToSimulate_V_out_full_n;
output   simConfig_rowsToSimulate_V_out_write;
output  [26:0] simConfig_BLOCK_NUMBERS_V_out_din;
input   simConfig_BLOCK_NUMBERS_V_out_full_n;
output   simConfig_BLOCK_NUMBERS_V_out_write;
input  [31:0] processedData_V_data_dout;
input   processedData_V_data_empty_n;
output   processedData_V_data_read;
input  [31:0] processedData_V_data_1_dout;
input   processedData_V_data_1_empty_n;
output   processedData_V_data_1_read;
input  [31:0] processedData_V_data_2_dout;
input   processedData_V_data_2_empty_n;
output   processedData_V_data_2_read;
input  [31:0] processedData_V_data_3_dout;
input   processedData_V_data_3_empty_n;
output   processedData_V_data_3_read;
input  [31:0] fixedData_V_data_dout;
input   fixedData_V_data_empty_n;
output   fixedData_V_data_read;
input  [0:0] fixedData_V_tlast_V_dout;
input   fixedData_V_tlast_V_empty_n;
output   fixedData_V_tlast_V_read;
output  [31:0] V_V_data_0_din;
input   V_V_data_0_full_n;
output   V_V_data_0_write;
output  [31:0] V_V_data_1_din;
input   V_V_data_1_full_n;
output   V_V_data_1_write;
output  [31:0] V_V_data_2_din;
input   V_V_data_2_full_n;
output   V_V_data_2_write;
output  [31:0] V_V_data_3_din;
input   V_V_data_3_full_n;
output   V_V_data_3_write;
output  [31:0] F_V_data_0_din;
input   F_V_data_0_full_n;
output   F_V_data_0_write;
output  [31:0] F_V_data_1_din;
input   F_V_data_1_full_n;
output   F_V_data_1_write;
output  [31:0] F_V_data_2_din;
input   F_V_data_2_full_n;
output   F_V_data_2_write;
output  [31:0] F_V_data_3_din;
input   F_V_data_3_full_n;
output   F_V_data_3_write;

reg ap_done;
reg ap_idle;
reg ap_ready;
reg simConfig_rowsToSimulate_V_read;
reg simConfig_BLOCK_NUMBERS_V_read;
reg simConfig_rowsToSimulate_V_out_write;
reg simConfig_BLOCK_NUMBERS_V_out_write;

reg    ap_done_reg;
(* fsm_encoding = "none" *) reg   [6:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
reg    simConfig_rowsToSimulate_V_blk_n;
reg    simConfig_BLOCK_NUMBERS_V_blk_n;
reg    simConfig_rowsToSimulate_V_out_blk_n;
reg    simConfig_BLOCK_NUMBERS_V_out_blk_n;
reg    processedData_V_data_blk_n;
wire    ap_CS_fsm_pp0_stage1;
reg    ap_enable_reg_pp0_iter0;
wire    ap_block_pp0_stage1;
reg   [0:0] exitcond_flatten_reg_303;
reg    processedData_V_data_1_blk_n;
reg    processedData_V_data_2_blk_n;
reg    processedData_V_data_3_blk_n;
reg    fixedData_V_data_blk_n;
reg    fixedData_V_tlast_V_blk_n;
reg    V_V_data_0_blk_n;
wire    ap_CS_fsm_pp0_stage0;
reg    ap_enable_reg_pp0_iter18;
wire    ap_block_pp0_stage0;
reg   [0:0] exitcond_flatten_reg_303_pp0_iter17_reg;
reg    V_V_data_1_blk_n;
reg    V_V_data_2_blk_n;
reg    V_V_data_3_blk_n;
reg    F_V_data_0_blk_n;
reg    F_V_data_1_blk_n;
reg    F_V_data_2_blk_n;
reg    F_V_data_3_blk_n;
reg   [55:0] indvar_flatten_reg_172;
reg   [26:0] simConfig_rowsToSimu_reg_278;
reg    ap_block_state1;
reg   [26:0] simConfig_BLOCK_NUMB_reg_283;
wire    ap_CS_fsm_state2;
wire   [55:0] grp_fu_241_p2;
reg   [55:0] bound_reg_298;
wire    ap_CS_fsm_state4;
wire   [0:0] exitcond_flatten_fu_247_p2;
wire    ap_block_state5_pp0_stage0_iter0;
wire    ap_block_state7_pp0_stage0_iter1;
wire    ap_block_state9_pp0_stage0_iter2;
wire    ap_block_state11_pp0_stage0_iter3;
wire    ap_block_state13_pp0_stage0_iter4;
wire    ap_block_state15_pp0_stage0_iter5;
wire    ap_block_state17_pp0_stage0_iter6;
wire    ap_block_state19_pp0_stage0_iter7;
wire    ap_block_state21_pp0_stage0_iter8;
wire    ap_block_state23_pp0_stage0_iter9;
wire    ap_block_state25_pp0_stage0_iter10;
wire    ap_block_state27_pp0_stage0_iter11;
wire    ap_block_state29_pp0_stage0_iter12;
wire    ap_block_state31_pp0_stage0_iter13;
wire    ap_block_state33_pp0_stage0_iter14;
wire    ap_block_state35_pp0_stage0_iter15;
wire    ap_block_state37_pp0_stage0_iter16;
wire    ap_block_state39_pp0_stage0_iter17;
wire    V_V_data_01_status;
wire    F_V_data_01_status;
reg    ap_block_state41_pp0_stage0_iter18;
reg    ap_block_pp0_stage0_11001;
reg   [0:0] exitcond_flatten_reg_303_pp0_iter1_reg;
reg   [0:0] exitcond_flatten_reg_303_pp0_iter2_reg;
reg   [0:0] exitcond_flatten_reg_303_pp0_iter3_reg;
reg   [0:0] exitcond_flatten_reg_303_pp0_iter4_reg;
reg   [0:0] exitcond_flatten_reg_303_pp0_iter5_reg;
reg   [0:0] exitcond_flatten_reg_303_pp0_iter6_reg;
reg   [0:0] exitcond_flatten_reg_303_pp0_iter7_reg;
reg   [0:0] exitcond_flatten_reg_303_pp0_iter8_reg;
reg   [0:0] exitcond_flatten_reg_303_pp0_iter9_reg;
reg   [0:0] exitcond_flatten_reg_303_pp0_iter10_reg;
reg   [0:0] exitcond_flatten_reg_303_pp0_iter11_reg;
reg   [0:0] exitcond_flatten_reg_303_pp0_iter12_reg;
reg   [0:0] exitcond_flatten_reg_303_pp0_iter13_reg;
reg   [0:0] exitcond_flatten_reg_303_pp0_iter14_reg;
reg   [0:0] exitcond_flatten_reg_303_pp0_iter15_reg;
reg   [0:0] exitcond_flatten_reg_303_pp0_iter16_reg;
wire   [55:0] indvar_flatten_next_fu_252_p2;
reg   [55:0] indvar_flatten_next_reg_307;
reg   [31:0] tmp_data_0_2_reg_312;
wire    processedData_V_data0_status;
wire    fixedData_V_data0_status;
reg    ap_block_state6_pp0_stage1_iter0;
wire    ap_block_state8_pp0_stage1_iter1;
wire    ap_block_state10_pp0_stage1_iter2;
wire    ap_block_state12_pp0_stage1_iter3;
wire    ap_block_state14_pp0_stage1_iter4;
wire    ap_block_state16_pp0_stage1_iter5;
wire    ap_block_state18_pp0_stage1_iter6;
wire    ap_block_state20_pp0_stage1_iter7;
wire    ap_block_state22_pp0_stage1_iter8;
wire    ap_block_state24_pp0_stage1_iter9;
wire    ap_block_state26_pp0_stage1_iter10;
wire    ap_block_state28_pp0_stage1_iter11;
wire    ap_block_state30_pp0_stage1_iter12;
wire    ap_block_state32_pp0_stage1_iter13;
wire    ap_block_state34_pp0_stage1_iter14;
wire    ap_block_state36_pp0_stage1_iter15;
wire    ap_block_state38_pp0_stage1_iter16;
wire    ap_block_state40_pp0_stage1_iter17;
reg    ap_block_pp0_stage1_11001;
reg   [31:0] tmp_data_1_2_reg_317;
reg   [31:0] tmp_data_2_2_reg_322;
reg   [31:0] tmp_data_3_2_reg_327;
reg   [31:0] tmp_data_reg_332;
wire   [31:0] grp_fu_183_p2;
reg   [31:0] tmp_data_0_3_reg_338;
reg    ap_enable_reg_pp0_iter4;
reg   [31:0] tmp_data_0_3_reg_338_pp0_iter5_reg;
reg   [31:0] tmp_data_0_3_reg_338_pp0_iter6_reg;
reg   [31:0] tmp_data_0_3_reg_338_pp0_iter7_reg;
reg   [31:0] tmp_data_0_3_reg_338_pp0_iter8_reg;
reg   [31:0] tmp_data_0_3_reg_338_pp0_iter9_reg;
reg   [31:0] tmp_data_0_3_reg_338_pp0_iter10_reg;
reg   [31:0] tmp_data_0_3_reg_338_pp0_iter11_reg;
reg   [31:0] tmp_data_0_3_reg_338_pp0_iter12_reg;
reg   [31:0] tmp_data_0_3_reg_338_pp0_iter13_reg;
reg   [31:0] tmp_data_0_3_reg_338_pp0_iter14_reg;
reg   [31:0] tmp_data_0_3_reg_338_pp0_iter15_reg;
reg   [31:0] tmp_data_0_3_reg_338_pp0_iter16_reg;
reg   [31:0] tmp_data_0_3_reg_338_pp0_iter17_reg;
wire   [31:0] grp_fu_187_p2;
reg   [31:0] tmp_data_1_3_reg_346;
reg   [31:0] tmp_data_1_3_reg_346_pp0_iter5_reg;
reg   [31:0] tmp_data_1_3_reg_346_pp0_iter6_reg;
reg   [31:0] tmp_data_1_3_reg_346_pp0_iter7_reg;
reg   [31:0] tmp_data_1_3_reg_346_pp0_iter8_reg;
reg   [31:0] tmp_data_1_3_reg_346_pp0_iter9_reg;
reg   [31:0] tmp_data_1_3_reg_346_pp0_iter10_reg;
reg   [31:0] tmp_data_1_3_reg_346_pp0_iter11_reg;
reg   [31:0] tmp_data_1_3_reg_346_pp0_iter12_reg;
reg   [31:0] tmp_data_1_3_reg_346_pp0_iter13_reg;
reg   [31:0] tmp_data_1_3_reg_346_pp0_iter14_reg;
reg   [31:0] tmp_data_1_3_reg_346_pp0_iter15_reg;
reg   [31:0] tmp_data_1_3_reg_346_pp0_iter16_reg;
reg   [31:0] tmp_data_1_3_reg_346_pp0_iter17_reg;
reg   [31:0] tmp_data_2_3_reg_354;
reg    ap_enable_reg_pp0_iter5;
reg   [31:0] tmp_data_2_3_reg_354_pp0_iter6_reg;
reg   [31:0] tmp_data_2_3_reg_354_pp0_iter7_reg;
reg   [31:0] tmp_data_2_3_reg_354_pp0_iter8_reg;
reg   [31:0] tmp_data_2_3_reg_354_pp0_iter9_reg;
reg   [31:0] tmp_data_2_3_reg_354_pp0_iter10_reg;
reg   [31:0] tmp_data_2_3_reg_354_pp0_iter11_reg;
reg   [31:0] tmp_data_2_3_reg_354_pp0_iter12_reg;
reg   [31:0] tmp_data_2_3_reg_354_pp0_iter13_reg;
reg   [31:0] tmp_data_2_3_reg_354_pp0_iter14_reg;
reg   [31:0] tmp_data_2_3_reg_354_pp0_iter15_reg;
reg   [31:0] tmp_data_2_3_reg_354_pp0_iter16_reg;
reg   [31:0] tmp_data_2_3_reg_354_pp0_iter17_reg;
reg   [31:0] tmp_data_3_3_reg_362;
reg   [31:0] tmp_data_3_3_reg_362_pp0_iter6_reg;
reg   [31:0] tmp_data_3_3_reg_362_pp0_iter7_reg;
reg   [31:0] tmp_data_3_3_reg_362_pp0_iter8_reg;
reg   [31:0] tmp_data_3_3_reg_362_pp0_iter9_reg;
reg   [31:0] tmp_data_3_3_reg_362_pp0_iter10_reg;
reg   [31:0] tmp_data_3_3_reg_362_pp0_iter11_reg;
reg   [31:0] tmp_data_3_3_reg_362_pp0_iter12_reg;
reg   [31:0] tmp_data_3_3_reg_362_pp0_iter13_reg;
reg   [31:0] tmp_data_3_3_reg_362_pp0_iter14_reg;
reg   [31:0] tmp_data_3_3_reg_362_pp0_iter15_reg;
reg   [31:0] tmp_data_3_3_reg_362_pp0_iter16_reg;
reg   [31:0] tmp_data_3_3_reg_362_pp0_iter17_reg;
wire   [31:0] grp_fu_191_p2;
reg   [31:0] tmp_60_i_i_i_reg_370;
reg    ap_enable_reg_pp0_iter6;
wire   [31:0] grp_fu_195_p2;
reg   [31:0] tmp_60_1_i_i_i_reg_375;
reg   [31:0] tmp_60_2_i_i_i_reg_380;
reg    ap_enable_reg_pp0_iter7;
reg   [31:0] tmp_60_3_i_i_i_reg_385;
wire   [31:0] grp_fu_199_p2;
reg   [31:0] tmp_61_i_i_i_reg_390;
reg    ap_enable_reg_pp0_iter8;
wire   [31:0] grp_fu_204_p2;
reg   [31:0] tmp_61_1_i_i_i_reg_395;
reg   [31:0] tmp_61_2_i_i_i_reg_400;
reg    ap_enable_reg_pp0_iter9;
reg   [31:0] tmp_61_3_i_i_i_reg_405;
wire   [31:0] grp_fu_217_p2;
reg   [31:0] tmp_62_i_i_i_reg_410;
reg    ap_enable_reg_pp0_iter15;
wire   [31:0] grp_fu_222_p2;
reg   [31:0] tmp_62_1_i_i_i_reg_415;
reg   [31:0] tmp_62_2_i_i_i_reg_420;
reg   [31:0] tmp_62_3_i_i_i_reg_425;
wire   [31:0] grp_fu_209_p2;
reg   [31:0] tmp_data_0_reg_430;
reg    ap_enable_reg_pp0_iter17;
wire   [31:0] grp_fu_213_p2;
reg   [31:0] tmp_data_1_reg_435;
reg   [31:0] tmp_data_2_reg_440;
reg   [31:0] tmp_data_3_reg_445;
reg    ap_block_pp0_stage0_subdone;
reg    ap_condition_pp0_exit_iter0_state5;
reg    ap_enable_reg_pp0_iter1;
reg    ap_block_pp0_stage1_subdone;
reg    ap_enable_reg_pp0_iter2;
reg    ap_enable_reg_pp0_iter3;
reg    ap_enable_reg_pp0_iter10;
reg    ap_enable_reg_pp0_iter11;
reg    ap_enable_reg_pp0_iter12;
reg    ap_enable_reg_pp0_iter13;
reg    ap_enable_reg_pp0_iter14;
reg    ap_enable_reg_pp0_iter16;
reg   [55:0] ap_phi_mux_indvar_flatten_phi_fu_176_p4;
reg    processedData_V_data0_update;
reg    fixedData_V_data0_update;
reg    V_V_data_01_update;
reg    ap_block_pp0_stage0_01001;
reg    F_V_data_01_update;
reg   [31:0] grp_fu_183_p1;
reg   [31:0] grp_fu_187_p1;
reg   [31:0] grp_fu_191_p0;
reg   [31:0] grp_fu_191_p1;
reg   [31:0] grp_fu_195_p0;
reg   [31:0] grp_fu_195_p1;
reg   [31:0] grp_fu_199_p0;
reg   [31:0] grp_fu_204_p0;
reg   [31:0] grp_fu_209_p0;
reg   [31:0] grp_fu_209_p1;
reg   [31:0] grp_fu_213_p0;
reg   [31:0] grp_fu_213_p1;
reg   [31:0] grp_fu_217_p1;
reg   [31:0] grp_fu_222_p1;
wire   [28:0] ret_V_fu_227_p3;
wire   [26:0] grp_fu_241_p0;
wire   [28:0] grp_fu_241_p1;
reg    grp_fu_183_ce;
reg    grp_fu_187_ce;
reg    grp_fu_191_ce;
reg    grp_fu_195_ce;
reg    grp_fu_199_ce;
reg    grp_fu_204_ce;
reg    grp_fu_209_ce;
reg    grp_fu_213_ce;
reg    grp_fu_217_ce;
reg    grp_fu_222_ce;
wire    ap_CS_fsm_state42;
reg   [6:0] ap_NS_fsm;
reg    ap_idle_pp0;
wire    ap_enable_pp0;
wire   [55:0] grp_fu_241_p00;
wire   [55:0] grp_fu_241_p10;

// power-on initialization
initial begin
#0 ap_done_reg = 1'b0;
#0 ap_CS_fsm = 7'd1;
#0 ap_enable_reg_pp0_iter0 = 1'b0;
#0 ap_enable_reg_pp0_iter18 = 1'b0;
#0 ap_enable_reg_pp0_iter4 = 1'b0;
#0 ap_enable_reg_pp0_iter5 = 1'b0;
#0 ap_enable_reg_pp0_iter6 = 1'b0;
#0 ap_enable_reg_pp0_iter7 = 1'b0;
#0 ap_enable_reg_pp0_iter8 = 1'b0;
#0 ap_enable_reg_pp0_iter9 = 1'b0;
#0 ap_enable_reg_pp0_iter15 = 1'b0;
#0 ap_enable_reg_pp0_iter17 = 1'b0;
#0 ap_enable_reg_pp0_iter1 = 1'b0;
#0 ap_enable_reg_pp0_iter2 = 1'b0;
#0 ap_enable_reg_pp0_iter3 = 1'b0;
#0 ap_enable_reg_pp0_iter10 = 1'b0;
#0 ap_enable_reg_pp0_iter11 = 1'b0;
#0 ap_enable_reg_pp0_iter12 = 1'b0;
#0 ap_enable_reg_pp0_iter13 = 1'b0;
#0 ap_enable_reg_pp0_iter14 = 1'b0;
#0 ap_enable_reg_pp0_iter16 = 1'b0;
end

GapJunctionIP_fsub_32ns_32ns_32_8_full_dsp_1 #(
    .ID( 1 ),
    .NUM_STAGE( 8 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
GapJunctionIP_fsub_32ns_32ns_32_8_full_dsp_1_U120(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(tmp_data_reg_332),
    .din1(grp_fu_183_p1),
    .ce(grp_fu_183_ce),
    .dout(grp_fu_183_p2)
);

GapJunctionIP_fsub_32ns_32ns_32_8_full_dsp_1 #(
    .ID( 1 ),
    .NUM_STAGE( 8 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
GapJunctionIP_fsub_32ns_32ns_32_8_full_dsp_1_U121(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(tmp_data_reg_332),
    .din1(grp_fu_187_p1),
    .ce(grp_fu_187_ce),
    .dout(grp_fu_187_p2)
);

GapJunctionIP_fmul_32ns_32ns_32_4_max_dsp_1 #(
    .ID( 1 ),
    .NUM_STAGE( 4 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
GapJunctionIP_fmul_32ns_32ns_32_4_max_dsp_1_U122(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(grp_fu_191_p0),
    .din1(grp_fu_191_p1),
    .ce(grp_fu_191_ce),
    .dout(grp_fu_191_p2)
);

GapJunctionIP_fmul_32ns_32ns_32_4_max_dsp_1 #(
    .ID( 1 ),
    .NUM_STAGE( 4 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
GapJunctionIP_fmul_32ns_32ns_32_4_max_dsp_1_U123(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(grp_fu_195_p0),
    .din1(grp_fu_195_p1),
    .ce(grp_fu_195_ce),
    .dout(grp_fu_195_p2)
);

GapJunctionIP_fmul_32ns_32ns_32_4_max_dsp_1 #(
    .ID( 1 ),
    .NUM_STAGE( 4 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
GapJunctionIP_fmul_32ns_32ns_32_4_max_dsp_1_U124(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(grp_fu_199_p0),
    .din1(32'd3156465418),
    .ce(grp_fu_199_ce),
    .dout(grp_fu_199_p2)
);

GapJunctionIP_fmul_32ns_32ns_32_4_max_dsp_1 #(
    .ID( 1 ),
    .NUM_STAGE( 4 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
GapJunctionIP_fmul_32ns_32ns_32_4_max_dsp_1_U125(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(grp_fu_204_p0),
    .din1(32'd3156465418),
    .ce(grp_fu_204_ce),
    .dout(grp_fu_204_p2)
);

GapJunctionIP_fmul_32ns_32ns_32_4_max_dsp_1 #(
    .ID( 1 ),
    .NUM_STAGE( 4 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
GapJunctionIP_fmul_32ns_32ns_32_4_max_dsp_1_U126(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(grp_fu_209_p0),
    .din1(grp_fu_209_p1),
    .ce(grp_fu_209_ce),
    .dout(grp_fu_209_p2)
);

GapJunctionIP_fmul_32ns_32ns_32_4_max_dsp_1 #(
    .ID( 1 ),
    .NUM_STAGE( 4 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
GapJunctionIP_fmul_32ns_32ns_32_4_max_dsp_1_U127(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(grp_fu_213_p0),
    .din1(grp_fu_213_p1),
    .ce(grp_fu_213_ce),
    .dout(grp_fu_213_p2)
);

GapJunctionIP_fexp_32ns_32ns_32_13_full_dsp_1 #(
    .ID( 1 ),
    .NUM_STAGE( 13 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
GapJunctionIP_fexp_32ns_32ns_32_13_full_dsp_1_U128(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(32'd0),
    .din1(grp_fu_217_p1),
    .ce(grp_fu_217_ce),
    .dout(grp_fu_217_p2)
);

GapJunctionIP_fexp_32ns_32ns_32_13_full_dsp_1 #(
    .ID( 1 ),
    .NUM_STAGE( 13 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
GapJunctionIP_fexp_32ns_32ns_32_13_full_dsp_1_U129(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(32'd0),
    .din1(grp_fu_222_p1),
    .ce(grp_fu_222_ce),
    .dout(grp_fu_222_p2)
);

GapJunctionIP_mul_27ns_29ns_56_3_1 #(
    .ID( 1 ),
    .NUM_STAGE( 3 ),
    .din0_WIDTH( 27 ),
    .din1_WIDTH( 29 ),
    .dout_WIDTH( 56 ))
GapJunctionIP_mul_27ns_29ns_56_3_1_U130(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(grp_fu_241_p0),
    .din1(grp_fu_241_p1),
    .ce(1'b1),
    .dout(grp_fu_241_p2)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_done_reg <= 1'b0;
    end else begin
        if ((ap_continue == 1'b1)) begin
            ap_done_reg <= 1'b0;
        end else if ((1'b1 == ap_CS_fsm_state42)) begin
            ap_done_reg <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter0 <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_pp0_stage0_subdone) & (1'b1 == ap_condition_pp0_exit_iter0_state5) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
            ap_enable_reg_pp0_iter0 <= 1'b0;
        end else if ((1'b1 == ap_CS_fsm_state4)) begin
            ap_enable_reg_pp0_iter0 <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter1 <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_pp0_stage1_subdone) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
            ap_enable_reg_pp0_iter1 <= ap_enable_reg_pp0_iter0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter10 <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_pp0_stage1_subdone) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
            ap_enable_reg_pp0_iter10 <= ap_enable_reg_pp0_iter9;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter11 <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_pp0_stage1_subdone) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
            ap_enable_reg_pp0_iter11 <= ap_enable_reg_pp0_iter10;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter12 <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_pp0_stage1_subdone) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
            ap_enable_reg_pp0_iter12 <= ap_enable_reg_pp0_iter11;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter13 <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_pp0_stage1_subdone) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
            ap_enable_reg_pp0_iter13 <= ap_enable_reg_pp0_iter12;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter14 <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_pp0_stage1_subdone) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
            ap_enable_reg_pp0_iter14 <= ap_enable_reg_pp0_iter13;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter15 <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_pp0_stage1_subdone) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
            ap_enable_reg_pp0_iter15 <= ap_enable_reg_pp0_iter14;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter16 <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_pp0_stage1_subdone) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
            ap_enable_reg_pp0_iter16 <= ap_enable_reg_pp0_iter15;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter17 <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_pp0_stage1_subdone) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
            ap_enable_reg_pp0_iter17 <= ap_enable_reg_pp0_iter16;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter18 <= 1'b0;
    end else begin
        if ((((1'b0 == ap_block_pp0_stage0_subdone) & (1'b1 == ap_CS_fsm_pp0_stage0)) | ((1'b0 == ap_block_pp0_stage1_subdone) & (1'b1 == ap_CS_fsm_pp0_stage1)))) begin
            ap_enable_reg_pp0_iter18 <= ap_enable_reg_pp0_iter17;
        end else if ((1'b1 == ap_CS_fsm_state4)) begin
            ap_enable_reg_pp0_iter18 <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter2 <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_pp0_stage1_subdone) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
            ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter3 <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_pp0_stage1_subdone) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
            ap_enable_reg_pp0_iter3 <= ap_enable_reg_pp0_iter2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter4 <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_pp0_stage1_subdone) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
            ap_enable_reg_pp0_iter4 <= ap_enable_reg_pp0_iter3;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter5 <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_pp0_stage1_subdone) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
            ap_enable_reg_pp0_iter5 <= ap_enable_reg_pp0_iter4;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter6 <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_pp0_stage1_subdone) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
            ap_enable_reg_pp0_iter6 <= ap_enable_reg_pp0_iter5;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter7 <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_pp0_stage1_subdone) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
            ap_enable_reg_pp0_iter7 <= ap_enable_reg_pp0_iter6;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter8 <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_pp0_stage1_subdone) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
            ap_enable_reg_pp0_iter8 <= ap_enable_reg_pp0_iter7;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter9 <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_pp0_stage1_subdone) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
            ap_enable_reg_pp0_iter9 <= ap_enable_reg_pp0_iter8;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (exitcond_flatten_reg_303 == 1'd0))) begin
        indvar_flatten_reg_172 <= indvar_flatten_next_reg_307;
    end else if ((1'b1 == ap_CS_fsm_state4)) begin
        indvar_flatten_reg_172 <= 56'd0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state4)) begin
        bound_reg_298 <= grp_fu_241_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        exitcond_flatten_reg_303 <= exitcond_flatten_fu_247_p2;
        exitcond_flatten_reg_303_pp0_iter10_reg <= exitcond_flatten_reg_303_pp0_iter9_reg;
        exitcond_flatten_reg_303_pp0_iter11_reg <= exitcond_flatten_reg_303_pp0_iter10_reg;
        exitcond_flatten_reg_303_pp0_iter12_reg <= exitcond_flatten_reg_303_pp0_iter11_reg;
        exitcond_flatten_reg_303_pp0_iter13_reg <= exitcond_flatten_reg_303_pp0_iter12_reg;
        exitcond_flatten_reg_303_pp0_iter14_reg <= exitcond_flatten_reg_303_pp0_iter13_reg;
        exitcond_flatten_reg_303_pp0_iter15_reg <= exitcond_flatten_reg_303_pp0_iter14_reg;
        exitcond_flatten_reg_303_pp0_iter16_reg <= exitcond_flatten_reg_303_pp0_iter15_reg;
        exitcond_flatten_reg_303_pp0_iter17_reg <= exitcond_flatten_reg_303_pp0_iter16_reg;
        exitcond_flatten_reg_303_pp0_iter1_reg <= exitcond_flatten_reg_303;
        exitcond_flatten_reg_303_pp0_iter2_reg <= exitcond_flatten_reg_303_pp0_iter1_reg;
        exitcond_flatten_reg_303_pp0_iter3_reg <= exitcond_flatten_reg_303_pp0_iter2_reg;
        exitcond_flatten_reg_303_pp0_iter4_reg <= exitcond_flatten_reg_303_pp0_iter3_reg;
        exitcond_flatten_reg_303_pp0_iter5_reg <= exitcond_flatten_reg_303_pp0_iter4_reg;
        exitcond_flatten_reg_303_pp0_iter6_reg <= exitcond_flatten_reg_303_pp0_iter5_reg;
        exitcond_flatten_reg_303_pp0_iter7_reg <= exitcond_flatten_reg_303_pp0_iter6_reg;
        exitcond_flatten_reg_303_pp0_iter8_reg <= exitcond_flatten_reg_303_pp0_iter7_reg;
        exitcond_flatten_reg_303_pp0_iter9_reg <= exitcond_flatten_reg_303_pp0_iter8_reg;
        tmp_data_2_3_reg_354_pp0_iter10_reg <= tmp_data_2_3_reg_354_pp0_iter9_reg;
        tmp_data_2_3_reg_354_pp0_iter11_reg <= tmp_data_2_3_reg_354_pp0_iter10_reg;
        tmp_data_2_3_reg_354_pp0_iter12_reg <= tmp_data_2_3_reg_354_pp0_iter11_reg;
        tmp_data_2_3_reg_354_pp0_iter13_reg <= tmp_data_2_3_reg_354_pp0_iter12_reg;
        tmp_data_2_3_reg_354_pp0_iter14_reg <= tmp_data_2_3_reg_354_pp0_iter13_reg;
        tmp_data_2_3_reg_354_pp0_iter15_reg <= tmp_data_2_3_reg_354_pp0_iter14_reg;
        tmp_data_2_3_reg_354_pp0_iter16_reg <= tmp_data_2_3_reg_354_pp0_iter15_reg;
        tmp_data_2_3_reg_354_pp0_iter17_reg <= tmp_data_2_3_reg_354_pp0_iter16_reg;
        tmp_data_2_3_reg_354_pp0_iter6_reg <= tmp_data_2_3_reg_354;
        tmp_data_2_3_reg_354_pp0_iter7_reg <= tmp_data_2_3_reg_354_pp0_iter6_reg;
        tmp_data_2_3_reg_354_pp0_iter8_reg <= tmp_data_2_3_reg_354_pp0_iter7_reg;
        tmp_data_2_3_reg_354_pp0_iter9_reg <= tmp_data_2_3_reg_354_pp0_iter8_reg;
        tmp_data_3_3_reg_362_pp0_iter10_reg <= tmp_data_3_3_reg_362_pp0_iter9_reg;
        tmp_data_3_3_reg_362_pp0_iter11_reg <= tmp_data_3_3_reg_362_pp0_iter10_reg;
        tmp_data_3_3_reg_362_pp0_iter12_reg <= tmp_data_3_3_reg_362_pp0_iter11_reg;
        tmp_data_3_3_reg_362_pp0_iter13_reg <= tmp_data_3_3_reg_362_pp0_iter12_reg;
        tmp_data_3_3_reg_362_pp0_iter14_reg <= tmp_data_3_3_reg_362_pp0_iter13_reg;
        tmp_data_3_3_reg_362_pp0_iter15_reg <= tmp_data_3_3_reg_362_pp0_iter14_reg;
        tmp_data_3_3_reg_362_pp0_iter16_reg <= tmp_data_3_3_reg_362_pp0_iter15_reg;
        tmp_data_3_3_reg_362_pp0_iter17_reg <= tmp_data_3_3_reg_362_pp0_iter16_reg;
        tmp_data_3_3_reg_362_pp0_iter6_reg <= tmp_data_3_3_reg_362;
        tmp_data_3_3_reg_362_pp0_iter7_reg <= tmp_data_3_3_reg_362_pp0_iter6_reg;
        tmp_data_3_3_reg_362_pp0_iter8_reg <= tmp_data_3_3_reg_362_pp0_iter7_reg;
        tmp_data_3_3_reg_362_pp0_iter9_reg <= tmp_data_3_3_reg_362_pp0_iter8_reg;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_enable_reg_pp0_iter0 == 1'b1))) begin
        indvar_flatten_next_reg_307 <= indvar_flatten_next_fu_252_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((~((simConfig_BLOCK_NUMBERS_V_out_full_n == 1'b0) | (simConfig_rowsToSimulate_V_out_full_n == 1'b0) | (simConfig_BLOCK_NUMBERS_V_empty_n == 1'b0) | (simConfig_rowsToSimulate_V_empty_n == 1'b0) | (ap_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        simConfig_BLOCK_NUMB_reg_283 <= simConfig_BLOCK_NUMBERS_V_dout;
        simConfig_rowsToSimu_reg_278 <= simConfig_rowsToSimulate_V_dout;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage1_11001) & (ap_enable_reg_pp0_iter6 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1) & (exitcond_flatten_reg_303_pp0_iter6_reg == 1'd0))) begin
        tmp_60_1_i_i_i_reg_375 <= grp_fu_195_p2;
        tmp_60_i_i_i_reg_370 <= grp_fu_191_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter7 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (exitcond_flatten_reg_303_pp0_iter6_reg == 1'd0))) begin
        tmp_60_2_i_i_i_reg_380 <= grp_fu_191_p2;
        tmp_60_3_i_i_i_reg_385 <= grp_fu_195_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage1_11001) & (ap_enable_reg_pp0_iter8 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1) & (exitcond_flatten_reg_303_pp0_iter8_reg == 1'd0))) begin
        tmp_61_1_i_i_i_reg_395 <= grp_fu_204_p2;
        tmp_61_i_i_i_reg_390 <= grp_fu_199_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter9 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (exitcond_flatten_reg_303_pp0_iter8_reg == 1'd0))) begin
        tmp_61_2_i_i_i_reg_400 <= grp_fu_199_p2;
        tmp_61_3_i_i_i_reg_405 <= grp_fu_204_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter15 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (exitcond_flatten_reg_303_pp0_iter14_reg == 1'd0))) begin
        tmp_62_1_i_i_i_reg_415 <= grp_fu_222_p2;
        tmp_62_i_i_i_reg_410 <= grp_fu_217_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage1_11001) & (ap_enable_reg_pp0_iter15 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1) & (exitcond_flatten_reg_303_pp0_iter15_reg == 1'd0))) begin
        tmp_62_2_i_i_i_reg_420 <= grp_fu_217_p2;
        tmp_62_3_i_i_i_reg_425 <= grp_fu_222_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage1_11001) & (1'b1 == ap_CS_fsm_pp0_stage1) & (exitcond_flatten_reg_303 == 1'd0))) begin
        tmp_data_0_2_reg_312 <= processedData_V_data_dout;
        tmp_data_1_2_reg_317 <= processedData_V_data_1_dout;
        tmp_data_2_2_reg_322 <= processedData_V_data_2_dout;
        tmp_data_3_2_reg_327 <= processedData_V_data_3_dout;
        tmp_data_reg_332 <= fixedData_V_data_dout;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage1_11001) & (ap_enable_reg_pp0_iter4 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1) & (exitcond_flatten_reg_303_pp0_iter4_reg == 1'd0))) begin
        tmp_data_0_3_reg_338 <= grp_fu_183_p2;
        tmp_data_1_3_reg_346 <= grp_fu_187_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage1_11001) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
        tmp_data_0_3_reg_338_pp0_iter10_reg <= tmp_data_0_3_reg_338_pp0_iter9_reg;
        tmp_data_0_3_reg_338_pp0_iter11_reg <= tmp_data_0_3_reg_338_pp0_iter10_reg;
        tmp_data_0_3_reg_338_pp0_iter12_reg <= tmp_data_0_3_reg_338_pp0_iter11_reg;
        tmp_data_0_3_reg_338_pp0_iter13_reg <= tmp_data_0_3_reg_338_pp0_iter12_reg;
        tmp_data_0_3_reg_338_pp0_iter14_reg <= tmp_data_0_3_reg_338_pp0_iter13_reg;
        tmp_data_0_3_reg_338_pp0_iter15_reg <= tmp_data_0_3_reg_338_pp0_iter14_reg;
        tmp_data_0_3_reg_338_pp0_iter16_reg <= tmp_data_0_3_reg_338_pp0_iter15_reg;
        tmp_data_0_3_reg_338_pp0_iter17_reg <= tmp_data_0_3_reg_338_pp0_iter16_reg;
        tmp_data_0_3_reg_338_pp0_iter5_reg <= tmp_data_0_3_reg_338;
        tmp_data_0_3_reg_338_pp0_iter6_reg <= tmp_data_0_3_reg_338_pp0_iter5_reg;
        tmp_data_0_3_reg_338_pp0_iter7_reg <= tmp_data_0_3_reg_338_pp0_iter6_reg;
        tmp_data_0_3_reg_338_pp0_iter8_reg <= tmp_data_0_3_reg_338_pp0_iter7_reg;
        tmp_data_0_3_reg_338_pp0_iter9_reg <= tmp_data_0_3_reg_338_pp0_iter8_reg;
        tmp_data_1_3_reg_346_pp0_iter10_reg <= tmp_data_1_3_reg_346_pp0_iter9_reg;
        tmp_data_1_3_reg_346_pp0_iter11_reg <= tmp_data_1_3_reg_346_pp0_iter10_reg;
        tmp_data_1_3_reg_346_pp0_iter12_reg <= tmp_data_1_3_reg_346_pp0_iter11_reg;
        tmp_data_1_3_reg_346_pp0_iter13_reg <= tmp_data_1_3_reg_346_pp0_iter12_reg;
        tmp_data_1_3_reg_346_pp0_iter14_reg <= tmp_data_1_3_reg_346_pp0_iter13_reg;
        tmp_data_1_3_reg_346_pp0_iter15_reg <= tmp_data_1_3_reg_346_pp0_iter14_reg;
        tmp_data_1_3_reg_346_pp0_iter16_reg <= tmp_data_1_3_reg_346_pp0_iter15_reg;
        tmp_data_1_3_reg_346_pp0_iter17_reg <= tmp_data_1_3_reg_346_pp0_iter16_reg;
        tmp_data_1_3_reg_346_pp0_iter5_reg <= tmp_data_1_3_reg_346;
        tmp_data_1_3_reg_346_pp0_iter6_reg <= tmp_data_1_3_reg_346_pp0_iter5_reg;
        tmp_data_1_3_reg_346_pp0_iter7_reg <= tmp_data_1_3_reg_346_pp0_iter6_reg;
        tmp_data_1_3_reg_346_pp0_iter8_reg <= tmp_data_1_3_reg_346_pp0_iter7_reg;
        tmp_data_1_3_reg_346_pp0_iter9_reg <= tmp_data_1_3_reg_346_pp0_iter8_reg;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter17 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (exitcond_flatten_reg_303_pp0_iter16_reg == 1'd0))) begin
        tmp_data_0_reg_430 <= grp_fu_209_p2;
        tmp_data_1_reg_435 <= grp_fu_213_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter5 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (exitcond_flatten_reg_303_pp0_iter4_reg == 1'd0))) begin
        tmp_data_2_3_reg_354 <= grp_fu_183_p2;
        tmp_data_3_3_reg_362 <= grp_fu_187_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage1_11001) & (ap_enable_reg_pp0_iter17 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1) & (exitcond_flatten_reg_303_pp0_iter17_reg == 1'd0))) begin
        tmp_data_2_reg_440 <= grp_fu_209_p2;
        tmp_data_3_reg_445 <= grp_fu_213_p2;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter18 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (exitcond_flatten_reg_303_pp0_iter17_reg == 1'd0))) begin
        F_V_data_01_update = 1'b1;
    end else begin
        F_V_data_01_update = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter18 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0) & (exitcond_flatten_reg_303_pp0_iter17_reg == 1'd0))) begin
        F_V_data_0_blk_n = F_V_data_0_full_n;
    end else begin
        F_V_data_0_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter18 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0) & (exitcond_flatten_reg_303_pp0_iter17_reg == 1'd0))) begin
        F_V_data_1_blk_n = F_V_data_1_full_n;
    end else begin
        F_V_data_1_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter18 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0) & (exitcond_flatten_reg_303_pp0_iter17_reg == 1'd0))) begin
        F_V_data_2_blk_n = F_V_data_2_full_n;
    end else begin
        F_V_data_2_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter18 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0) & (exitcond_flatten_reg_303_pp0_iter17_reg == 1'd0))) begin
        F_V_data_3_blk_n = F_V_data_3_full_n;
    end else begin
        F_V_data_3_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter18 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (exitcond_flatten_reg_303_pp0_iter17_reg == 1'd0))) begin
        V_V_data_01_update = 1'b1;
    end else begin
        V_V_data_01_update = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter18 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0) & (exitcond_flatten_reg_303_pp0_iter17_reg == 1'd0))) begin
        V_V_data_0_blk_n = V_V_data_0_full_n;
    end else begin
        V_V_data_0_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter18 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0) & (exitcond_flatten_reg_303_pp0_iter17_reg == 1'd0))) begin
        V_V_data_1_blk_n = V_V_data_1_full_n;
    end else begin
        V_V_data_1_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter18 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0) & (exitcond_flatten_reg_303_pp0_iter17_reg == 1'd0))) begin
        V_V_data_2_blk_n = V_V_data_2_full_n;
    end else begin
        V_V_data_2_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter18 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0) & (exitcond_flatten_reg_303_pp0_iter17_reg == 1'd0))) begin
        V_V_data_3_blk_n = V_V_data_3_full_n;
    end else begin
        V_V_data_3_blk_n = 1'b1;
    end
end

always @ (*) begin
    if ((exitcond_flatten_fu_247_p2 == 1'd1)) begin
        ap_condition_pp0_exit_iter0_state5 = 1'b1;
    end else begin
        ap_condition_pp0_exit_iter0_state5 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state42)) begin
        ap_done = 1'b1;
    end else begin
        ap_done = ap_done_reg;
    end
end

always @ (*) begin
    if (((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter16 == 1'b0) & (ap_enable_reg_pp0_iter14 == 1'b0) & (ap_enable_reg_pp0_iter13 == 1'b0) & (ap_enable_reg_pp0_iter12 == 1'b0) & (ap_enable_reg_pp0_iter11 == 1'b0) & (ap_enable_reg_pp0_iter10 == 1'b0) & (ap_enable_reg_pp0_iter3 == 1'b0) & (ap_enable_reg_pp0_iter2 == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b0) & (ap_enable_reg_pp0_iter17 == 1'b0) & (ap_enable_reg_pp0_iter15 == 1'b0) & (ap_enable_reg_pp0_iter9 == 1'b0) & (ap_enable_reg_pp0_iter8 == 1'b0) & (ap_enable_reg_pp0_iter7 == 1'b0) & (ap_enable_reg_pp0_iter6 == 1'b0) & (ap_enable_reg_pp0_iter5 == 1'b0) & (ap_enable_reg_pp0_iter4 == 1'b0) & (ap_enable_reg_pp0_iter18 == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b0))) begin
        ap_idle_pp0 = 1'b1;
    end else begin
        ap_idle_pp0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0) & (exitcond_flatten_reg_303 == 1'd0))) begin
        ap_phi_mux_indvar_flatten_phi_fu_176_p4 = indvar_flatten_next_reg_307;
    end else begin
        ap_phi_mux_indvar_flatten_phi_fu_176_p4 = indvar_flatten_reg_172;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state42)) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage1_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1) & (exitcond_flatten_reg_303 == 1'd0))) begin
        fixedData_V_data0_update = 1'b1;
    end else begin
        fixedData_V_data0_update = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1) & (exitcond_flatten_reg_303 == 1'd0) & (1'b0 == ap_block_pp0_stage1))) begin
        fixedData_V_data_blk_n = fixedData_V_data_empty_n;
    end else begin
        fixedData_V_data_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1) & (exitcond_flatten_reg_303 == 1'd0) & (1'b0 == ap_block_pp0_stage1))) begin
        fixedData_V_tlast_V_blk_n = fixedData_V_tlast_V_empty_n;
    end else begin
        fixedData_V_tlast_V_blk_n = 1'b1;
    end
end

always @ (*) begin
    if ((((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0)) | ((1'b0 == ap_block_pp0_stage1_11001) & (1'b1 == ap_CS_fsm_pp0_stage1)))) begin
        grp_fu_183_ce = 1'b1;
    end else begin
        grp_fu_183_ce = 1'b0;
    end
end

always @ (*) begin
    if ((ap_enable_reg_pp0_iter1 == 1'b1)) begin
        if (((1'b1 == ap_CS_fsm_pp0_stage1) & (1'b0 == ap_block_pp0_stage1))) begin
            grp_fu_183_p1 = tmp_data_2_2_reg_322;
        end else if (((1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0))) begin
            grp_fu_183_p1 = tmp_data_0_2_reg_312;
        end else begin
            grp_fu_183_p1 = 'bx;
        end
    end else begin
        grp_fu_183_p1 = 'bx;
    end
end

always @ (*) begin
    if ((((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0)) | ((1'b0 == ap_block_pp0_stage1_11001) & (1'b1 == ap_CS_fsm_pp0_stage1)))) begin
        grp_fu_187_ce = 1'b1;
    end else begin
        grp_fu_187_ce = 1'b0;
    end
end

always @ (*) begin
    if ((ap_enable_reg_pp0_iter1 == 1'b1)) begin
        if (((1'b1 == ap_CS_fsm_pp0_stage1) & (1'b0 == ap_block_pp0_stage1))) begin
            grp_fu_187_p1 = tmp_data_3_2_reg_327;
        end else if (((1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0))) begin
            grp_fu_187_p1 = tmp_data_1_2_reg_317;
        end else begin
            grp_fu_187_p1 = 'bx;
        end
    end else begin
        grp_fu_187_p1 = 'bx;
    end
end

always @ (*) begin
    if ((((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0)) | ((1'b0 == ap_block_pp0_stage1_11001) & (1'b1 == ap_CS_fsm_pp0_stage1)))) begin
        grp_fu_191_ce = 1'b1;
    end else begin
        grp_fu_191_ce = 1'b0;
    end
end

always @ (*) begin
    if ((ap_enable_reg_pp0_iter5 == 1'b1)) begin
        if (((1'b1 == ap_CS_fsm_pp0_stage1) & (1'b0 == ap_block_pp0_stage1))) begin
            grp_fu_191_p0 = tmp_data_2_3_reg_354;
        end else if (((1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0))) begin
            grp_fu_191_p0 = tmp_data_0_3_reg_338;
        end else begin
            grp_fu_191_p0 = 'bx;
        end
    end else begin
        grp_fu_191_p0 = 'bx;
    end
end

always @ (*) begin
    if ((ap_enable_reg_pp0_iter5 == 1'b1)) begin
        if (((1'b1 == ap_CS_fsm_pp0_stage1) & (1'b0 == ap_block_pp0_stage1))) begin
            grp_fu_191_p1 = tmp_data_2_3_reg_354;
        end else if (((1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0))) begin
            grp_fu_191_p1 = tmp_data_0_3_reg_338;
        end else begin
            grp_fu_191_p1 = 'bx;
        end
    end else begin
        grp_fu_191_p1 = 'bx;
    end
end

always @ (*) begin
    if ((((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0)) | ((1'b0 == ap_block_pp0_stage1_11001) & (1'b1 == ap_CS_fsm_pp0_stage1)))) begin
        grp_fu_195_ce = 1'b1;
    end else begin
        grp_fu_195_ce = 1'b0;
    end
end

always @ (*) begin
    if ((ap_enable_reg_pp0_iter5 == 1'b1)) begin
        if (((1'b1 == ap_CS_fsm_pp0_stage1) & (1'b0 == ap_block_pp0_stage1))) begin
            grp_fu_195_p0 = tmp_data_3_3_reg_362;
        end else if (((1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0))) begin
            grp_fu_195_p0 = tmp_data_1_3_reg_346;
        end else begin
            grp_fu_195_p0 = 'bx;
        end
    end else begin
        grp_fu_195_p0 = 'bx;
    end
end

always @ (*) begin
    if ((ap_enable_reg_pp0_iter5 == 1'b1)) begin
        if (((1'b1 == ap_CS_fsm_pp0_stage1) & (1'b0 == ap_block_pp0_stage1))) begin
            grp_fu_195_p1 = tmp_data_3_3_reg_362;
        end else if (((1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0))) begin
            grp_fu_195_p1 = tmp_data_1_3_reg_346;
        end else begin
            grp_fu_195_p1 = 'bx;
        end
    end else begin
        grp_fu_195_p1 = 'bx;
    end
end

always @ (*) begin
    if ((((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0)) | ((1'b0 == ap_block_pp0_stage1_11001) & (1'b1 == ap_CS_fsm_pp0_stage1)))) begin
        grp_fu_199_ce = 1'b1;
    end else begin
        grp_fu_199_ce = 1'b0;
    end
end

always @ (*) begin
    if ((ap_enable_reg_pp0_iter7 == 1'b1)) begin
        if (((1'b1 == ap_CS_fsm_pp0_stage1) & (1'b0 == ap_block_pp0_stage1))) begin
            grp_fu_199_p0 = tmp_60_2_i_i_i_reg_380;
        end else if (((1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0))) begin
            grp_fu_199_p0 = tmp_60_i_i_i_reg_370;
        end else begin
            grp_fu_199_p0 = 'bx;
        end
    end else begin
        grp_fu_199_p0 = 'bx;
    end
end

always @ (*) begin
    if ((((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0)) | ((1'b0 == ap_block_pp0_stage1_11001) & (1'b1 == ap_CS_fsm_pp0_stage1)))) begin
        grp_fu_204_ce = 1'b1;
    end else begin
        grp_fu_204_ce = 1'b0;
    end
end

always @ (*) begin
    if ((ap_enable_reg_pp0_iter7 == 1'b1)) begin
        if (((1'b1 == ap_CS_fsm_pp0_stage1) & (1'b0 == ap_block_pp0_stage1))) begin
            grp_fu_204_p0 = tmp_60_3_i_i_i_reg_385;
        end else if (((1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0))) begin
            grp_fu_204_p0 = tmp_60_1_i_i_i_reg_375;
        end else begin
            grp_fu_204_p0 = 'bx;
        end
    end else begin
        grp_fu_204_p0 = 'bx;
    end
end

always @ (*) begin
    if ((((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0)) | ((1'b0 == ap_block_pp0_stage1_11001) & (1'b1 == ap_CS_fsm_pp0_stage1)))) begin
        grp_fu_209_ce = 1'b1;
    end else begin
        grp_fu_209_ce = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter16 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0))) begin
        grp_fu_209_p0 = tmp_62_2_i_i_i_reg_420;
    end else if (((ap_enable_reg_pp0_iter15 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1) & (1'b0 == ap_block_pp0_stage1))) begin
        grp_fu_209_p0 = tmp_62_i_i_i_reg_410;
    end else begin
        grp_fu_209_p0 = 'bx;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter16 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0))) begin
        grp_fu_209_p1 = tmp_data_2_3_reg_354_pp0_iter15_reg;
    end else if (((ap_enable_reg_pp0_iter15 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1) & (1'b0 == ap_block_pp0_stage1))) begin
        grp_fu_209_p1 = tmp_data_0_3_reg_338_pp0_iter14_reg;
    end else begin
        grp_fu_209_p1 = 'bx;
    end
end

always @ (*) begin
    if ((((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0)) | ((1'b0 == ap_block_pp0_stage1_11001) & (1'b1 == ap_CS_fsm_pp0_stage1)))) begin
        grp_fu_213_ce = 1'b1;
    end else begin
        grp_fu_213_ce = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter16 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0))) begin
        grp_fu_213_p0 = tmp_62_3_i_i_i_reg_425;
    end else if (((ap_enable_reg_pp0_iter15 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1) & (1'b0 == ap_block_pp0_stage1))) begin
        grp_fu_213_p0 = tmp_62_1_i_i_i_reg_415;
    end else begin
        grp_fu_213_p0 = 'bx;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter16 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0))) begin
        grp_fu_213_p1 = tmp_data_3_3_reg_362_pp0_iter15_reg;
    end else if (((ap_enable_reg_pp0_iter15 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1) & (1'b0 == ap_block_pp0_stage1))) begin
        grp_fu_213_p1 = tmp_data_1_3_reg_346_pp0_iter14_reg;
    end else begin
        grp_fu_213_p1 = 'bx;
    end
end

always @ (*) begin
    if ((((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0)) | ((1'b0 == ap_block_pp0_stage1_11001) & (1'b1 == ap_CS_fsm_pp0_stage1)))) begin
        grp_fu_217_ce = 1'b1;
    end else begin
        grp_fu_217_ce = 1'b0;
    end
end

always @ (*) begin
    if ((ap_enable_reg_pp0_iter9 == 1'b1)) begin
        if (((1'b1 == ap_CS_fsm_pp0_stage1) & (1'b0 == ap_block_pp0_stage1))) begin
            grp_fu_217_p1 = tmp_61_2_i_i_i_reg_400;
        end else if (((1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0))) begin
            grp_fu_217_p1 = tmp_61_i_i_i_reg_390;
        end else begin
            grp_fu_217_p1 = 'bx;
        end
    end else begin
        grp_fu_217_p1 = 'bx;
    end
end

always @ (*) begin
    if ((((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0)) | ((1'b0 == ap_block_pp0_stage1_11001) & (1'b1 == ap_CS_fsm_pp0_stage1)))) begin
        grp_fu_222_ce = 1'b1;
    end else begin
        grp_fu_222_ce = 1'b0;
    end
end

always @ (*) begin
    if ((ap_enable_reg_pp0_iter9 == 1'b1)) begin
        if (((1'b1 == ap_CS_fsm_pp0_stage1) & (1'b0 == ap_block_pp0_stage1))) begin
            grp_fu_222_p1 = tmp_61_3_i_i_i_reg_405;
        end else if (((1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0))) begin
            grp_fu_222_p1 = tmp_61_1_i_i_i_reg_395;
        end else begin
            grp_fu_222_p1 = 'bx;
        end
    end else begin
        grp_fu_222_p1 = 'bx;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage1_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1) & (exitcond_flatten_reg_303 == 1'd0))) begin
        processedData_V_data0_update = 1'b1;
    end else begin
        processedData_V_data0_update = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1) & (exitcond_flatten_reg_303 == 1'd0) & (1'b0 == ap_block_pp0_stage1))) begin
        processedData_V_data_1_blk_n = processedData_V_data_1_empty_n;
    end else begin
        processedData_V_data_1_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1) & (exitcond_flatten_reg_303 == 1'd0) & (1'b0 == ap_block_pp0_stage1))) begin
        processedData_V_data_2_blk_n = processedData_V_data_2_empty_n;
    end else begin
        processedData_V_data_2_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1) & (exitcond_flatten_reg_303 == 1'd0) & (1'b0 == ap_block_pp0_stage1))) begin
        processedData_V_data_3_blk_n = processedData_V_data_3_empty_n;
    end else begin
        processedData_V_data_3_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1) & (exitcond_flatten_reg_303 == 1'd0) & (1'b0 == ap_block_pp0_stage1))) begin
        processedData_V_data_blk_n = processedData_V_data_empty_n;
    end else begin
        processedData_V_data_blk_n = 1'b1;
    end
end

always @ (*) begin
    if ((~((ap_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        simConfig_BLOCK_NUMBERS_V_blk_n = simConfig_BLOCK_NUMBERS_V_empty_n;
    end else begin
        simConfig_BLOCK_NUMBERS_V_blk_n = 1'b1;
    end
end

always @ (*) begin
    if ((~((ap_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        simConfig_BLOCK_NUMBERS_V_out_blk_n = simConfig_BLOCK_NUMBERS_V_out_full_n;
    end else begin
        simConfig_BLOCK_NUMBERS_V_out_blk_n = 1'b1;
    end
end

always @ (*) begin
    if ((~((simConfig_BLOCK_NUMBERS_V_out_full_n == 1'b0) | (simConfig_rowsToSimulate_V_out_full_n == 1'b0) | (simConfig_BLOCK_NUMBERS_V_empty_n == 1'b0) | (simConfig_rowsToSimulate_V_empty_n == 1'b0) | (ap_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        simConfig_BLOCK_NUMBERS_V_out_write = 1'b1;
    end else begin
        simConfig_BLOCK_NUMBERS_V_out_write = 1'b0;
    end
end

always @ (*) begin
    if ((~((simConfig_BLOCK_NUMBERS_V_out_full_n == 1'b0) | (simConfig_rowsToSimulate_V_out_full_n == 1'b0) | (simConfig_BLOCK_NUMBERS_V_empty_n == 1'b0) | (simConfig_rowsToSimulate_V_empty_n == 1'b0) | (ap_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        simConfig_BLOCK_NUMBERS_V_read = 1'b1;
    end else begin
        simConfig_BLOCK_NUMBERS_V_read = 1'b0;
    end
end

always @ (*) begin
    if ((~((ap_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        simConfig_rowsToSimulate_V_blk_n = simConfig_rowsToSimulate_V_empty_n;
    end else begin
        simConfig_rowsToSimulate_V_blk_n = 1'b1;
    end
end

always @ (*) begin
    if ((~((ap_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        simConfig_rowsToSimulate_V_out_blk_n = simConfig_rowsToSimulate_V_out_full_n;
    end else begin
        simConfig_rowsToSimulate_V_out_blk_n = 1'b1;
    end
end

always @ (*) begin
    if ((~((simConfig_BLOCK_NUMBERS_V_out_full_n == 1'b0) | (simConfig_rowsToSimulate_V_out_full_n == 1'b0) | (simConfig_BLOCK_NUMBERS_V_empty_n == 1'b0) | (simConfig_rowsToSimulate_V_empty_n == 1'b0) | (ap_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        simConfig_rowsToSimulate_V_out_write = 1'b1;
    end else begin
        simConfig_rowsToSimulate_V_out_write = 1'b0;
    end
end

always @ (*) begin
    if ((~((simConfig_BLOCK_NUMBERS_V_out_full_n == 1'b0) | (simConfig_rowsToSimulate_V_out_full_n == 1'b0) | (simConfig_BLOCK_NUMBERS_V_empty_n == 1'b0) | (simConfig_rowsToSimulate_V_empty_n == 1'b0) | (ap_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        simConfig_rowsToSimulate_V_read = 1'b1;
    end else begin
        simConfig_rowsToSimulate_V_read = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if ((~((simConfig_BLOCK_NUMBERS_V_out_full_n == 1'b0) | (simConfig_rowsToSimulate_V_out_full_n == 1'b0) | (simConfig_BLOCK_NUMBERS_V_empty_n == 1'b0) | (simConfig_rowsToSimulate_V_empty_n == 1'b0) | (ap_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_state2 : begin
            ap_NS_fsm = ap_ST_fsm_state3;
        end
        ap_ST_fsm_state3 : begin
            ap_NS_fsm = ap_ST_fsm_state4;
        end
        ap_ST_fsm_state4 : begin
            ap_NS_fsm = ap_ST_fsm_pp0_stage0;
        end
        ap_ST_fsm_pp0_stage0 : begin
            if ((~((ap_enable_reg_pp0_iter1 == 1'b0) & (1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter0 == 1'b1) & (exitcond_flatten_fu_247_p2 == 1'd1)) & ~((1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter17 == 1'b0) & (ap_enable_reg_pp0_iter18 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0)) & (1'b0 == ap_block_pp0_stage0_subdone))) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage1;
            end else if ((((1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter17 == 1'b0) & (ap_enable_reg_pp0_iter18 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0)) | ((ap_enable_reg_pp0_iter1 == 1'b0) & (1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter0 == 1'b1) & (exitcond_flatten_fu_247_p2 == 1'd1)))) begin
                ap_NS_fsm = ap_ST_fsm_state42;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end
        end
        ap_ST_fsm_pp0_stage1 : begin
            if ((1'b0 == ap_block_pp0_stage1_subdone)) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage1;
            end
        end
        ap_ST_fsm_state42 : begin
            ap_NS_fsm = ap_ST_fsm_state1;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign F_V_data_01_status = (F_V_data_3_full_n & F_V_data_2_full_n & F_V_data_1_full_n & F_V_data_0_full_n);

assign F_V_data_0_din = tmp_data_0_reg_430;

assign F_V_data_0_write = F_V_data_01_update;

assign F_V_data_1_din = tmp_data_1_reg_435;

assign F_V_data_1_write = F_V_data_01_update;

assign F_V_data_2_din = tmp_data_2_reg_440;

assign F_V_data_2_write = F_V_data_01_update;

assign F_V_data_3_din = tmp_data_3_reg_445;

assign F_V_data_3_write = F_V_data_01_update;

assign V_V_data_01_status = (V_V_data_3_full_n & V_V_data_2_full_n & V_V_data_1_full_n & V_V_data_0_full_n);

assign V_V_data_0_din = tmp_data_0_3_reg_338_pp0_iter17_reg;

assign V_V_data_0_write = V_V_data_01_update;

assign V_V_data_1_din = tmp_data_1_3_reg_346_pp0_iter17_reg;

assign V_V_data_1_write = V_V_data_01_update;

assign V_V_data_2_din = tmp_data_2_3_reg_354_pp0_iter17_reg;

assign V_V_data_2_write = V_V_data_01_update;

assign V_V_data_3_din = tmp_data_3_3_reg_362_pp0_iter17_reg;

assign V_V_data_3_write = V_V_data_01_update;

assign ap_CS_fsm_pp0_stage0 = ap_CS_fsm[32'd4];

assign ap_CS_fsm_pp0_stage1 = ap_CS_fsm[32'd5];

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state2 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_state4 = ap_CS_fsm[32'd3];

assign ap_CS_fsm_state42 = ap_CS_fsm[32'd6];

assign ap_block_pp0_stage0 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp0_stage0_01001 = ((ap_enable_reg_pp0_iter18 == 1'b1) & (((1'b0 == F_V_data_01_status) & (exitcond_flatten_reg_303_pp0_iter17_reg == 1'd0)) | ((1'b0 == V_V_data_01_status) & (exitcond_flatten_reg_303_pp0_iter17_reg == 1'd0))));
end

always @ (*) begin
    ap_block_pp0_stage0_11001 = ((ap_enable_reg_pp0_iter18 == 1'b1) & (((1'b0 == F_V_data_01_status) & (exitcond_flatten_reg_303_pp0_iter17_reg == 1'd0)) | ((1'b0 == V_V_data_01_status) & (exitcond_flatten_reg_303_pp0_iter17_reg == 1'd0))));
end

always @ (*) begin
    ap_block_pp0_stage0_subdone = ((ap_enable_reg_pp0_iter18 == 1'b1) & (((1'b0 == F_V_data_01_status) & (exitcond_flatten_reg_303_pp0_iter17_reg == 1'd0)) | ((1'b0 == V_V_data_01_status) & (exitcond_flatten_reg_303_pp0_iter17_reg == 1'd0))));
end

assign ap_block_pp0_stage1 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp0_stage1_11001 = ((ap_enable_reg_pp0_iter0 == 1'b1) & (((fixedData_V_data0_status == 1'b0) & (exitcond_flatten_reg_303 == 1'd0)) | ((processedData_V_data0_status == 1'b0) & (exitcond_flatten_reg_303 == 1'd0))));
end

always @ (*) begin
    ap_block_pp0_stage1_subdone = ((ap_enable_reg_pp0_iter0 == 1'b1) & (((fixedData_V_data0_status == 1'b0) & (exitcond_flatten_reg_303 == 1'd0)) | ((processedData_V_data0_status == 1'b0) & (exitcond_flatten_reg_303 == 1'd0))));
end

always @ (*) begin
    ap_block_state1 = ((simConfig_BLOCK_NUMBERS_V_out_full_n == 1'b0) | (simConfig_rowsToSimulate_V_out_full_n == 1'b0) | (simConfig_BLOCK_NUMBERS_V_empty_n == 1'b0) | (simConfig_rowsToSimulate_V_empty_n == 1'b0) | (ap_start == 1'b0) | (ap_done_reg == 1'b1));
end

assign ap_block_state10_pp0_stage1_iter2 = ~(1'b1 == 1'b1);

assign ap_block_state11_pp0_stage0_iter3 = ~(1'b1 == 1'b1);

assign ap_block_state12_pp0_stage1_iter3 = ~(1'b1 == 1'b1);

assign ap_block_state13_pp0_stage0_iter4 = ~(1'b1 == 1'b1);

assign ap_block_state14_pp0_stage1_iter4 = ~(1'b1 == 1'b1);

assign ap_block_state15_pp0_stage0_iter5 = ~(1'b1 == 1'b1);

assign ap_block_state16_pp0_stage1_iter5 = ~(1'b1 == 1'b1);

assign ap_block_state17_pp0_stage0_iter6 = ~(1'b1 == 1'b1);

assign ap_block_state18_pp0_stage1_iter6 = ~(1'b1 == 1'b1);

assign ap_block_state19_pp0_stage0_iter7 = ~(1'b1 == 1'b1);

assign ap_block_state20_pp0_stage1_iter7 = ~(1'b1 == 1'b1);

assign ap_block_state21_pp0_stage0_iter8 = ~(1'b1 == 1'b1);

assign ap_block_state22_pp0_stage1_iter8 = ~(1'b1 == 1'b1);

assign ap_block_state23_pp0_stage0_iter9 = ~(1'b1 == 1'b1);

assign ap_block_state24_pp0_stage1_iter9 = ~(1'b1 == 1'b1);

assign ap_block_state25_pp0_stage0_iter10 = ~(1'b1 == 1'b1);

assign ap_block_state26_pp0_stage1_iter10 = ~(1'b1 == 1'b1);

assign ap_block_state27_pp0_stage0_iter11 = ~(1'b1 == 1'b1);

assign ap_block_state28_pp0_stage1_iter11 = ~(1'b1 == 1'b1);

assign ap_block_state29_pp0_stage0_iter12 = ~(1'b1 == 1'b1);

assign ap_block_state30_pp0_stage1_iter12 = ~(1'b1 == 1'b1);

assign ap_block_state31_pp0_stage0_iter13 = ~(1'b1 == 1'b1);

assign ap_block_state32_pp0_stage1_iter13 = ~(1'b1 == 1'b1);

assign ap_block_state33_pp0_stage0_iter14 = ~(1'b1 == 1'b1);

assign ap_block_state34_pp0_stage1_iter14 = ~(1'b1 == 1'b1);

assign ap_block_state35_pp0_stage0_iter15 = ~(1'b1 == 1'b1);

assign ap_block_state36_pp0_stage1_iter15 = ~(1'b1 == 1'b1);

assign ap_block_state37_pp0_stage0_iter16 = ~(1'b1 == 1'b1);

assign ap_block_state38_pp0_stage1_iter16 = ~(1'b1 == 1'b1);

assign ap_block_state39_pp0_stage0_iter17 = ~(1'b1 == 1'b1);

assign ap_block_state40_pp0_stage1_iter17 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_state41_pp0_stage0_iter18 = (((1'b0 == F_V_data_01_status) & (exitcond_flatten_reg_303_pp0_iter17_reg == 1'd0)) | ((1'b0 == V_V_data_01_status) & (exitcond_flatten_reg_303_pp0_iter17_reg == 1'd0)));
end

assign ap_block_state5_pp0_stage0_iter0 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_state6_pp0_stage1_iter0 = (((fixedData_V_data0_status == 1'b0) & (exitcond_flatten_reg_303 == 1'd0)) | ((processedData_V_data0_status == 1'b0) & (exitcond_flatten_reg_303 == 1'd0)));
end

assign ap_block_state7_pp0_stage0_iter1 = ~(1'b1 == 1'b1);

assign ap_block_state8_pp0_stage1_iter1 = ~(1'b1 == 1'b1);

assign ap_block_state9_pp0_stage0_iter2 = ~(1'b1 == 1'b1);

assign ap_enable_pp0 = (ap_idle_pp0 ^ 1'b1);

assign exitcond_flatten_fu_247_p2 = ((ap_phi_mux_indvar_flatten_phi_fu_176_p4 == bound_reg_298) ? 1'b1 : 1'b0);

assign fixedData_V_data0_status = (fixedData_V_tlast_V_empty_n & fixedData_V_data_empty_n);

assign fixedData_V_data_read = fixedData_V_data0_update;

assign fixedData_V_tlast_V_read = fixedData_V_data0_update;

assign grp_fu_241_p0 = grp_fu_241_p00;

assign grp_fu_241_p00 = simConfig_rowsToSimu_reg_278;

assign grp_fu_241_p1 = grp_fu_241_p10;

assign grp_fu_241_p10 = ret_V_fu_227_p3;

assign indvar_flatten_next_fu_252_p2 = (ap_phi_mux_indvar_flatten_phi_fu_176_p4 + 56'd1);

assign processedData_V_data0_status = (processedData_V_data_empty_n & processedData_V_data_3_empty_n & processedData_V_data_2_empty_n & processedData_V_data_1_empty_n);

assign processedData_V_data_1_read = processedData_V_data0_update;

assign processedData_V_data_2_read = processedData_V_data0_update;

assign processedData_V_data_3_read = processedData_V_data0_update;

assign processedData_V_data_read = processedData_V_data0_update;

assign ret_V_fu_227_p3 = {{simConfig_BLOCK_NUMB_reg_283}, {2'd0}};

assign simConfig_BLOCK_NUMBERS_V_out_din = simConfig_BLOCK_NUMBERS_V_dout;

assign simConfig_rowsToSimulate_V_out_din = simConfig_rowsToSimulate_V_dout;

endmodule //calc
