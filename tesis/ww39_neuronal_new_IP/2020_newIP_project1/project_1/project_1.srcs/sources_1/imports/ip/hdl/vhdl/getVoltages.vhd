-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
-- Version: 2018.3
-- Copyright (C) 1986-2018 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity getVoltages is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    input_V_data_TDATA : IN STD_LOGIC_VECTOR (63 downto 0);
    input_V_data_TVALID : IN STD_LOGIC;
    input_V_data_TREADY : OUT STD_LOGIC;
    V_SIZE : IN STD_LOGIC_VECTOR (31 downto 0);
    V_data_V_data_0_din : OUT STD_LOGIC_VECTOR (31 downto 0);
    V_data_V_data_0_full_n : IN STD_LOGIC;
    V_data_V_data_0_write : OUT STD_LOGIC;
    V_data_V_data_1_din : OUT STD_LOGIC_VECTOR (31 downto 0);
    V_data_V_data_1_full_n : IN STD_LOGIC;
    V_data_V_data_1_write : OUT STD_LOGIC;
    V_data_V_data_2_din : OUT STD_LOGIC_VECTOR (31 downto 0);
    V_data_V_data_2_full_n : IN STD_LOGIC;
    V_data_V_data_2_write : OUT STD_LOGIC;
    V_data_V_data_3_din : OUT STD_LOGIC_VECTOR (31 downto 0);
    V_data_V_data_3_full_n : IN STD_LOGIC;
    V_data_V_data_3_write : OUT STD_LOGIC );
end;


architecture behav of getVoltages is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (2 downto 0) := "001";
    constant ap_ST_fsm_state2 : STD_LOGIC_VECTOR (2 downto 0) := "010";
    constant ap_ST_fsm_state3 : STD_LOGIC_VECTOR (2 downto 0) := "100";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv27_0 : STD_LOGIC_VECTOR (26 downto 0) := "000000000000000000000000000";
    constant ap_const_lv32_20 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100000";
    constant ap_const_lv32_3F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000111111";
    constant ap_const_lv27_4 : STD_LOGIC_VECTOR (26 downto 0) := "000000000000000000000000100";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_boolean_1 : BOOLEAN := true;

    signal ap_CS_fsm : STD_LOGIC_VECTOR (2 downto 0) := "001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal input_V_data_TDATA_blk_n : STD_LOGIC;
    signal ap_CS_fsm_state2 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state2 : signal is "none";
    signal tmp_22_i_fu_113_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_state3 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state3 : signal is "none";
    signal V_data_V_data_0_blk_n : STD_LOGIC;
    signal V_data_V_data_1_blk_n : STD_LOGIC;
    signal V_data_V_data_2_blk_n : STD_LOGIC;
    signal V_data_V_data_3_blk_n : STD_LOGIC;
    signal tmp_fu_118_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_reg_158 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_block_state2 : BOOLEAN;
    signal grp_fu_99_p4 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_4_i_reg_163 : STD_LOGIC_VECTOR (31 downto 0);
    signal i_V_fu_122_p2 : STD_LOGIC_VECTOR (26 downto 0);
    signal i_V_reg_168 : STD_LOGIC_VECTOR (26 downto 0);
    signal p_i_reg_88 : STD_LOGIC_VECTOR (26 downto 0);
    signal V_data_V_data_01_status : STD_LOGIC;
    signal ap_block_state3 : BOOLEAN;
    signal V_data_V_data_01_update : STD_LOGIC;
    signal tmp_i_fu_109_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_1_fu_136_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_NS_fsm : STD_LOGIC_VECTOR (2 downto 0);


begin




    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    p_i_reg_88_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                p_i_reg_88 <= ap_const_lv27_0;
            elsif ((not(((ap_const_logic_0 = V_data_V_data_01_status) or (input_V_data_TVALID = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state3))) then 
                p_i_reg_88 <= i_V_reg_168;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((not(((tmp_22_i_fu_113_p2 = ap_const_lv1_1) and (input_V_data_TVALID = ap_const_logic_0))) and (tmp_22_i_fu_113_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state2))) then
                i_V_reg_168 <= i_V_fu_122_p2;
                tmp_4_i_reg_163 <= input_V_data_TDATA(63 downto 32);
                tmp_reg_158 <= tmp_fu_118_p1;
            end if;
        end if;
    end process;

    ap_NS_fsm_assign_proc : process (ap_start, ap_CS_fsm, ap_CS_fsm_state1, input_V_data_TVALID, ap_CS_fsm_state2, tmp_22_i_fu_113_p2, ap_CS_fsm_state3, V_data_V_data_01_status)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_state2 => 
                if ((not(((tmp_22_i_fu_113_p2 = ap_const_lv1_1) and (input_V_data_TVALID = ap_const_logic_0))) and (tmp_22_i_fu_113_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state2))) then
                    ap_NS_fsm <= ap_ST_fsm_state1;
                elsif ((not(((tmp_22_i_fu_113_p2 = ap_const_lv1_1) and (input_V_data_TVALID = ap_const_logic_0))) and (tmp_22_i_fu_113_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state2))) then
                    ap_NS_fsm <= ap_ST_fsm_state3;
                else
                    ap_NS_fsm <= ap_ST_fsm_state2;
                end if;
            when ap_ST_fsm_state3 => 
                if ((not(((ap_const_logic_0 = V_data_V_data_01_status) or (input_V_data_TVALID = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state3))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state3;
                end if;
            when others =>  
                ap_NS_fsm <= "XXX";
        end case;
    end process;
    V_data_V_data_01_status <= (V_data_V_data_3_full_n and V_data_V_data_2_full_n and V_data_V_data_1_full_n and V_data_V_data_0_full_n);

    V_data_V_data_01_update_assign_proc : process(input_V_data_TVALID, ap_CS_fsm_state3, V_data_V_data_01_status)
    begin
        if ((not(((ap_const_logic_0 = V_data_V_data_01_status) or (input_V_data_TVALID = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state3))) then 
            V_data_V_data_01_update <= ap_const_logic_1;
        else 
            V_data_V_data_01_update <= ap_const_logic_0;
        end if; 
    end process;


    V_data_V_data_0_blk_n_assign_proc : process(V_data_V_data_0_full_n, ap_CS_fsm_state3)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            V_data_V_data_0_blk_n <= V_data_V_data_0_full_n;
        else 
            V_data_V_data_0_blk_n <= ap_const_logic_1;
        end if; 
    end process;

    V_data_V_data_0_din <= tmp_reg_158;
    V_data_V_data_0_write <= V_data_V_data_01_update;

    V_data_V_data_1_blk_n_assign_proc : process(V_data_V_data_1_full_n, ap_CS_fsm_state3)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            V_data_V_data_1_blk_n <= V_data_V_data_1_full_n;
        else 
            V_data_V_data_1_blk_n <= ap_const_logic_1;
        end if; 
    end process;

    V_data_V_data_1_din <= tmp_4_i_reg_163;
    V_data_V_data_1_write <= V_data_V_data_01_update;

    V_data_V_data_2_blk_n_assign_proc : process(V_data_V_data_2_full_n, ap_CS_fsm_state3)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            V_data_V_data_2_blk_n <= V_data_V_data_2_full_n;
        else 
            V_data_V_data_2_blk_n <= ap_const_logic_1;
        end if; 
    end process;

    V_data_V_data_2_din <= tmp_1_fu_136_p1;
    V_data_V_data_2_write <= V_data_V_data_01_update;

    V_data_V_data_3_blk_n_assign_proc : process(V_data_V_data_3_full_n, ap_CS_fsm_state3)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            V_data_V_data_3_blk_n <= V_data_V_data_3_full_n;
        else 
            V_data_V_data_3_blk_n <= ap_const_logic_1;
        end if; 
    end process;

    V_data_V_data_3_din <= grp_fu_99_p4;
    V_data_V_data_3_write <= V_data_V_data_01_update;
    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state2 <= ap_CS_fsm(1);
    ap_CS_fsm_state3 <= ap_CS_fsm(2);

    ap_block_state2_assign_proc : process(input_V_data_TVALID, tmp_22_i_fu_113_p2)
    begin
                ap_block_state2 <= ((tmp_22_i_fu_113_p2 = ap_const_lv1_1) and (input_V_data_TVALID = ap_const_logic_0));
    end process;


    ap_block_state3_assign_proc : process(input_V_data_TVALID, V_data_V_data_01_status)
    begin
                ap_block_state3 <= ((ap_const_logic_0 = V_data_V_data_01_status) or (input_V_data_TVALID = ap_const_logic_0));
    end process;


    ap_done_assign_proc : process(ap_start, ap_CS_fsm_state1, input_V_data_TVALID, ap_CS_fsm_state2, tmp_22_i_fu_113_p2)
    begin
        if (((not(((tmp_22_i_fu_113_p2 = ap_const_lv1_1) and (input_V_data_TVALID = ap_const_logic_0))) and (tmp_22_i_fu_113_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state2)) or ((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1)))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_ready_assign_proc : process(input_V_data_TVALID, ap_CS_fsm_state2, tmp_22_i_fu_113_p2)
    begin
        if ((not(((tmp_22_i_fu_113_p2 = ap_const_lv1_1) and (input_V_data_TVALID = ap_const_logic_0))) and (tmp_22_i_fu_113_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;

    grp_fu_99_p4 <= input_V_data_TDATA(63 downto 32);
    i_V_fu_122_p2 <= std_logic_vector(unsigned(ap_const_lv27_4) + unsigned(p_i_reg_88));

    input_V_data_TDATA_blk_n_assign_proc : process(input_V_data_TVALID, ap_CS_fsm_state2, tmp_22_i_fu_113_p2, ap_CS_fsm_state3)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state3) or ((tmp_22_i_fu_113_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state2)))) then 
            input_V_data_TDATA_blk_n <= input_V_data_TVALID;
        else 
            input_V_data_TDATA_blk_n <= ap_const_logic_1;
        end if; 
    end process;


    input_V_data_TREADY_assign_proc : process(input_V_data_TVALID, ap_CS_fsm_state2, tmp_22_i_fu_113_p2, ap_CS_fsm_state3, V_data_V_data_01_status)
    begin
        if (((not(((ap_const_logic_0 = V_data_V_data_01_status) or (input_V_data_TVALID = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state3)) or (not(((tmp_22_i_fu_113_p2 = ap_const_lv1_1) and (input_V_data_TVALID = ap_const_logic_0))) and (tmp_22_i_fu_113_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state2)))) then 
            input_V_data_TREADY <= ap_const_logic_1;
        else 
            input_V_data_TREADY <= ap_const_logic_0;
        end if; 
    end process;

    tmp_1_fu_136_p1 <= input_V_data_TDATA(32 - 1 downto 0);
    tmp_22_i_fu_113_p2 <= "1" when (signed(tmp_i_fu_109_p1) < signed(V_SIZE)) else "0";
    tmp_fu_118_p1 <= input_V_data_TDATA(32 - 1 downto 0);
        tmp_i_fu_109_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(p_i_reg_88),32));

end behav;
