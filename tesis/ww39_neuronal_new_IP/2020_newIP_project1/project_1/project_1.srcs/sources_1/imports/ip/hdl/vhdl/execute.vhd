-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
-- Version: 2018.3
-- Copyright (C) 1986-2018 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity execute is
port (
    input_V_data_TDATA : IN STD_LOGIC_VECTOR (63 downto 0);
    output_r_TDATA : OUT STD_LOGIC_VECTOR (31 downto 0);
    output_r_TLAST : OUT STD_LOGIC_VECTOR (0 downto 0);
    simConfig_rowBegin_V_2 : IN STD_LOGIC_VECTOR (26 downto 0);
    simConfig_rowEnd_V_r : IN STD_LOGIC_VECTOR (26 downto 0);
    simConfig_rowsToSimu : IN STD_LOGIC_VECTOR (26 downto 0);
    simConfig_BLOCK_NUMB : IN STD_LOGIC_VECTOR (26 downto 0);
    size : IN STD_LOGIC_VECTOR (31 downto 0);
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    simConfig_rowBegin_V_2_ap_vld : IN STD_LOGIC;
    simConfig_rowEnd_V_r_ap_vld : IN STD_LOGIC;
    simConfig_rowsToSimu_ap_vld : IN STD_LOGIC;
    simConfig_BLOCK_NUMB_ap_vld : IN STD_LOGIC;
    size_ap_vld : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    input_V_data_TVALID : IN STD_LOGIC;
    input_V_data_TREADY : OUT STD_LOGIC;
    output_r_TVALID : OUT STD_LOGIC;
    output_r_TREADY : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_continue : IN STD_LOGIC );
end;


architecture behav of execute is 
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_const_lv2_0 : STD_LOGIC_VECTOR (1 downto 0) := "00";
    constant ap_const_lv2_1 : STD_LOGIC_VECTOR (1 downto 0) := "01";
    constant ap_const_boolean_1 : BOOLEAN := true;

    signal execute_entry195_U0_ap_start : STD_LOGIC;
    signal execute_entry195_U0_ap_done : STD_LOGIC;
    signal execute_entry195_U0_ap_continue : STD_LOGIC;
    signal execute_entry195_U0_ap_idle : STD_LOGIC;
    signal execute_entry195_U0_ap_ready : STD_LOGIC;
    signal execute_entry195_U0_start_out : STD_LOGIC;
    signal execute_entry195_U0_start_write : STD_LOGIC;
    signal execute_entry195_U0_simConfig_rowBegin_V_out_din : STD_LOGIC_VECTOR (26 downto 0);
    signal execute_entry195_U0_simConfig_rowBegin_V_out_write : STD_LOGIC;
    signal execute_entry195_U0_simConfig_rowEnd_V_out_din : STD_LOGIC_VECTOR (26 downto 0);
    signal execute_entry195_U0_simConfig_rowEnd_V_out_write : STD_LOGIC;
    signal execute_entry195_U0_simConfig_rowsToSimulate_V_out_din : STD_LOGIC_VECTOR (26 downto 0);
    signal execute_entry195_U0_simConfig_rowsToSimulate_V_out_write : STD_LOGIC;
    signal execute_entry195_U0_simConfig_rowsToSimulate_V_out1_din : STD_LOGIC_VECTOR (26 downto 0);
    signal execute_entry195_U0_simConfig_rowsToSimulate_V_out1_write : STD_LOGIC;
    signal execute_entry195_U0_simConfig_BLOCK_NUMBERS_V_out_din : STD_LOGIC_VECTOR (26 downto 0);
    signal execute_entry195_U0_simConfig_BLOCK_NUMBERS_V_out_write : STD_LOGIC;
    signal execute_entry195_U0_simConfig_BLOCK_NUMBERS_V_out2_din : STD_LOGIC_VECTOR (26 downto 0);
    signal execute_entry195_U0_simConfig_BLOCK_NUMBERS_V_out2_write : STD_LOGIC;
    signal execute_entry195_U0_size_out_din : STD_LOGIC_VECTOR (31 downto 0);
    signal execute_entry195_U0_size_out_write : STD_LOGIC;
    signal execute_entry195_U0_size_out3_din : STD_LOGIC_VECTOR (31 downto 0);
    signal execute_entry195_U0_size_out3_write : STD_LOGIC;
    signal execute_Block_codeRe_U0_ap_start : STD_LOGIC;
    signal execute_Block_codeRe_U0_ap_done : STD_LOGIC;
    signal execute_Block_codeRe_U0_ap_continue : STD_LOGIC;
    signal execute_Block_codeRe_U0_ap_idle : STD_LOGIC;
    signal execute_Block_codeRe_U0_ap_ready : STD_LOGIC;
    signal execute_Block_codeRe_U0_size_read : STD_LOGIC;
    signal execute_Block_codeRe_U0_ap_return : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_channel_done_size_assign_channel : STD_LOGIC;
    signal size_assign_channel_full_n : STD_LOGIC;
    signal blockControl_U0_ap_start : STD_LOGIC;
    signal blockControl_U0_ap_done : STD_LOGIC;
    signal blockControl_U0_ap_continue : STD_LOGIC;
    signal blockControl_U0_ap_idle : STD_LOGIC;
    signal blockControl_U0_ap_ready : STD_LOGIC;
    signal blockControl_U0_start_out : STD_LOGIC;
    signal blockControl_U0_start_write : STD_LOGIC;
    signal blockControl_U0_input_V_data_TREADY : STD_LOGIC;
    signal blockControl_U0_simConfig_rowsToSimulate_V_read : STD_LOGIC;
    signal blockControl_U0_simConfig_BLOCK_NUMBERS_V_read : STD_LOGIC;
    signal blockControl_U0_V_SIZE_read : STD_LOGIC;
    signal blockControl_U0_V_data_V_data_0_din : STD_LOGIC_VECTOR (31 downto 0);
    signal blockControl_U0_V_data_V_data_0_write : STD_LOGIC;
    signal blockControl_U0_V_data_V_data_1_din : STD_LOGIC_VECTOR (31 downto 0);
    signal blockControl_U0_V_data_V_data_1_write : STD_LOGIC;
    signal blockControl_U0_V_data_V_data_2_din : STD_LOGIC_VECTOR (31 downto 0);
    signal blockControl_U0_V_data_V_data_2_write : STD_LOGIC;
    signal blockControl_U0_V_data_V_data_3_din : STD_LOGIC_VECTOR (31 downto 0);
    signal blockControl_U0_V_data_V_data_3_write : STD_LOGIC;
    signal blockControl_U0_C_data_V_data_0_din : STD_LOGIC_VECTOR (31 downto 0);
    signal blockControl_U0_C_data_V_data_0_write : STD_LOGIC;
    signal blockControl_U0_C_data_V_data_1_din : STD_LOGIC_VECTOR (31 downto 0);
    signal blockControl_U0_C_data_V_data_1_write : STD_LOGIC;
    signal blockControl_U0_C_data_V_data_2_din : STD_LOGIC_VECTOR (31 downto 0);
    signal blockControl_U0_C_data_V_data_2_write : STD_LOGIC;
    signal blockControl_U0_C_data_V_data_3_din : STD_LOGIC_VECTOR (31 downto 0);
    signal blockControl_U0_C_data_V_data_3_write : STD_LOGIC;
    signal V_read_U0_ap_start : STD_LOGIC;
    signal V_read_U0_start_out : STD_LOGIC;
    signal V_read_U0_start_write : STD_LOGIC;
    signal V_read_U0_simConfig_rowBegin_V_read : STD_LOGIC;
    signal V_read_U0_simConfig_rowEnd_V_read : STD_LOGIC;
    signal V_read_U0_simConfig_rowsToSimulate_V_read : STD_LOGIC;
    signal V_read_U0_simConfig_BLOCK_NUMBERS_V_read : STD_LOGIC;
    signal V_read_U0_simConfig_rowsToSimulate_V_out_din : STD_LOGIC_VECTOR (26 downto 0);
    signal V_read_U0_simConfig_rowsToSimulate_V_out_write : STD_LOGIC;
    signal V_read_U0_simConfig_BLOCK_NUMBERS_V_out_din : STD_LOGIC_VECTOR (26 downto 0);
    signal V_read_U0_simConfig_BLOCK_NUMBERS_V_out_write : STD_LOGIC;
    signal V_read_U0_V_data_V_data_0_read : STD_LOGIC;
    signal V_read_U0_V_data_V_data_1_read : STD_LOGIC;
    signal V_read_U0_V_data_V_data_2_read : STD_LOGIC;
    signal V_read_U0_V_data_V_data_3_read : STD_LOGIC;
    signal V_read_U0_fixedData_V_data_din : STD_LOGIC_VECTOR (31 downto 0);
    signal V_read_U0_fixedData_V_data_write : STD_LOGIC;
    signal V_read_U0_fixedData_V_tlast_V_din : STD_LOGIC_VECTOR (0 downto 0);
    signal V_read_U0_fixedData_V_tlast_V_write : STD_LOGIC;
    signal V_read_U0_processedData_V_data_din : STD_LOGIC_VECTOR (31 downto 0);
    signal V_read_U0_processedData_V_data_write : STD_LOGIC;
    signal V_read_U0_processedData_V_data_1_din : STD_LOGIC_VECTOR (31 downto 0);
    signal V_read_U0_processedData_V_data_1_write : STD_LOGIC;
    signal V_read_U0_processedData_V_data_2_din : STD_LOGIC_VECTOR (31 downto 0);
    signal V_read_U0_processedData_V_data_2_write : STD_LOGIC;
    signal V_read_U0_processedData_V_data_3_din : STD_LOGIC_VECTOR (31 downto 0);
    signal V_read_U0_processedData_V_data_3_write : STD_LOGIC;
    signal V_read_U0_ap_done : STD_LOGIC;
    signal V_read_U0_ap_ready : STD_LOGIC;
    signal V_read_U0_ap_idle : STD_LOGIC;
    signal V_read_U0_ap_continue : STD_LOGIC;
    signal calc_U0_ap_start : STD_LOGIC;
    signal calc_U0_ap_done : STD_LOGIC;
    signal calc_U0_ap_continue : STD_LOGIC;
    signal calc_U0_ap_idle : STD_LOGIC;
    signal calc_U0_ap_ready : STD_LOGIC;
    signal calc_U0_simConfig_rowsToSimulate_V_read : STD_LOGIC;
    signal calc_U0_simConfig_BLOCK_NUMBERS_V_read : STD_LOGIC;
    signal calc_U0_simConfig_rowsToSimulate_V_out_din : STD_LOGIC_VECTOR (26 downto 0);
    signal calc_U0_simConfig_rowsToSimulate_V_out_write : STD_LOGIC;
    signal calc_U0_simConfig_BLOCK_NUMBERS_V_out_din : STD_LOGIC_VECTOR (26 downto 0);
    signal calc_U0_simConfig_BLOCK_NUMBERS_V_out_write : STD_LOGIC;
    signal calc_U0_processedData_V_data_read : STD_LOGIC;
    signal calc_U0_processedData_V_data_1_read : STD_LOGIC;
    signal calc_U0_processedData_V_data_2_read : STD_LOGIC;
    signal calc_U0_processedData_V_data_3_read : STD_LOGIC;
    signal calc_U0_fixedData_V_data_read : STD_LOGIC;
    signal calc_U0_fixedData_V_tlast_V_read : STD_LOGIC;
    signal calc_U0_V_V_data_0_din : STD_LOGIC_VECTOR (31 downto 0);
    signal calc_U0_V_V_data_0_write : STD_LOGIC;
    signal calc_U0_V_V_data_1_din : STD_LOGIC_VECTOR (31 downto 0);
    signal calc_U0_V_V_data_1_write : STD_LOGIC;
    signal calc_U0_V_V_data_2_din : STD_LOGIC_VECTOR (31 downto 0);
    signal calc_U0_V_V_data_2_write : STD_LOGIC;
    signal calc_U0_V_V_data_3_din : STD_LOGIC_VECTOR (31 downto 0);
    signal calc_U0_V_V_data_3_write : STD_LOGIC;
    signal calc_U0_F_V_data_0_din : STD_LOGIC_VECTOR (31 downto 0);
    signal calc_U0_F_V_data_0_write : STD_LOGIC;
    signal calc_U0_F_V_data_1_din : STD_LOGIC_VECTOR (31 downto 0);
    signal calc_U0_F_V_data_1_write : STD_LOGIC;
    signal calc_U0_F_V_data_2_din : STD_LOGIC_VECTOR (31 downto 0);
    signal calc_U0_F_V_data_2_write : STD_LOGIC;
    signal calc_U0_F_V_data_3_din : STD_LOGIC_VECTOR (31 downto 0);
    signal calc_U0_F_V_data_3_write : STD_LOGIC;
    signal acc_U0_ap_start : STD_LOGIC;
    signal acc_U0_ap_done : STD_LOGIC;
    signal acc_U0_ap_continue : STD_LOGIC;
    signal acc_U0_ap_idle : STD_LOGIC;
    signal acc_U0_ap_ready : STD_LOGIC;
    signal acc_U0_start_out : STD_LOGIC;
    signal acc_U0_start_write : STD_LOGIC;
    signal acc_U0_simConfig_rowsToSimulate_V_read : STD_LOGIC;
    signal acc_U0_simConfig_BLOCK_NUMBERS_V_read : STD_LOGIC;
    signal acc_U0_simConfig_rowsToSimulate_V_out_din : STD_LOGIC_VECTOR (26 downto 0);
    signal acc_U0_simConfig_rowsToSimulate_V_out_write : STD_LOGIC;
    signal acc_U0_simConfig_BLOCK_NUMBERS_V_out_din : STD_LOGIC_VECTOR (26 downto 0);
    signal acc_U0_simConfig_BLOCK_NUMBERS_V_out_write : STD_LOGIC;
    signal acc_U0_F_V_data_0_read : STD_LOGIC;
    signal acc_U0_F_V_data_1_read : STD_LOGIC;
    signal acc_U0_F_V_data_2_read : STD_LOGIC;
    signal acc_U0_F_V_data_3_read : STD_LOGIC;
    signal acc_U0_V_V_data_0_read : STD_LOGIC;
    signal acc_U0_V_V_data_1_read : STD_LOGIC;
    signal acc_U0_V_V_data_2_read : STD_LOGIC;
    signal acc_U0_V_V_data_3_read : STD_LOGIC;
    signal acc_U0_C_data_V_data_0_read : STD_LOGIC;
    signal acc_U0_C_data_V_data_1_read : STD_LOGIC;
    signal acc_U0_C_data_V_data_2_read : STD_LOGIC;
    signal acc_U0_C_data_V_data_3_read : STD_LOGIC;
    signal acc_U0_F_acc_V_data_0_din : STD_LOGIC_VECTOR (31 downto 0);
    signal acc_U0_F_acc_V_data_0_write : STD_LOGIC;
    signal acc_U0_F_acc_V_data_1_din : STD_LOGIC_VECTOR (31 downto 0);
    signal acc_U0_F_acc_V_data_1_write : STD_LOGIC;
    signal acc_U0_F_acc_V_data_2_din : STD_LOGIC_VECTOR (31 downto 0);
    signal acc_U0_F_acc_V_data_2_write : STD_LOGIC;
    signal acc_U0_F_acc_V_data_3_din : STD_LOGIC_VECTOR (31 downto 0);
    signal acc_U0_F_acc_V_data_3_write : STD_LOGIC;
    signal acc_U0_V_acc_V_data_0_din : STD_LOGIC_VECTOR (31 downto 0);
    signal acc_U0_V_acc_V_data_0_write : STD_LOGIC;
    signal acc_U0_V_acc_V_data_1_din : STD_LOGIC_VECTOR (31 downto 0);
    signal acc_U0_V_acc_V_data_1_write : STD_LOGIC;
    signal acc_U0_V_acc_V_data_2_din : STD_LOGIC_VECTOR (31 downto 0);
    signal acc_U0_V_acc_V_data_2_write : STD_LOGIC;
    signal acc_U0_V_acc_V_data_3_din : STD_LOGIC_VECTOR (31 downto 0);
    signal acc_U0_V_acc_V_data_3_write : STD_LOGIC;
    signal I_calc_U0_ap_start : STD_LOGIC;
    signal I_calc_U0_ap_done : STD_LOGIC;
    signal I_calc_U0_ap_continue : STD_LOGIC;
    signal I_calc_U0_ap_idle : STD_LOGIC;
    signal I_calc_U0_ap_ready : STD_LOGIC;
    signal I_calc_U0_output_r_TDATA : STD_LOGIC_VECTOR (31 downto 0);
    signal I_calc_U0_output_r_TVALID : STD_LOGIC;
    signal I_calc_U0_output_r_TLAST : STD_LOGIC_VECTOR (0 downto 0);
    signal I_calc_U0_simConfig_rowsToSimulate_V_read : STD_LOGIC;
    signal I_calc_U0_simConfig_BLOCK_NUMBERS_V_read : STD_LOGIC;
    signal I_calc_U0_F_acc_V_data_0_read : STD_LOGIC;
    signal I_calc_U0_F_acc_V_data_1_read : STD_LOGIC;
    signal I_calc_U0_F_acc_V_data_2_read : STD_LOGIC;
    signal I_calc_U0_F_acc_V_data_3_read : STD_LOGIC;
    signal I_calc_U0_V_acc_V_data_0_read : STD_LOGIC;
    signal I_calc_U0_V_acc_V_data_1_read : STD_LOGIC;
    signal I_calc_U0_V_acc_V_data_2_read : STD_LOGIC;
    signal I_calc_U0_V_acc_V_data_3_read : STD_LOGIC;
    signal ap_sync_continue : STD_LOGIC;
    signal simConfig_rowBegin_V_full_n : STD_LOGIC;
    signal simConfig_rowBegin_V_dout : STD_LOGIC_VECTOR (26 downto 0);
    signal simConfig_rowBegin_V_empty_n : STD_LOGIC;
    signal simConfig_rowEnd_V_c_full_n : STD_LOGIC;
    signal simConfig_rowEnd_V_c_dout : STD_LOGIC_VECTOR (26 downto 0);
    signal simConfig_rowEnd_V_c_empty_n : STD_LOGIC;
    signal simConfig_rowsToSimu_5_full_n : STD_LOGIC;
    signal simConfig_rowsToSimu_5_dout : STD_LOGIC_VECTOR (26 downto 0);
    signal simConfig_rowsToSimu_5_empty_n : STD_LOGIC;
    signal simConfig_rowsToSimu_4_full_n : STD_LOGIC;
    signal simConfig_rowsToSimu_4_dout : STD_LOGIC_VECTOR (26 downto 0);
    signal simConfig_rowsToSimu_4_empty_n : STD_LOGIC;
    signal simConfig_BLOCK_NUMB_5_full_n : STD_LOGIC;
    signal simConfig_BLOCK_NUMB_5_dout : STD_LOGIC_VECTOR (26 downto 0);
    signal simConfig_BLOCK_NUMB_5_empty_n : STD_LOGIC;
    signal simConfig_BLOCK_NUMB_4_full_n : STD_LOGIC;
    signal simConfig_BLOCK_NUMB_4_dout : STD_LOGIC_VECTOR (26 downto 0);
    signal simConfig_BLOCK_NUMB_4_empty_n : STD_LOGIC;
    signal size_c_full_n : STD_LOGIC;
    signal size_c_dout : STD_LOGIC_VECTOR (31 downto 0);
    signal size_c_empty_n : STD_LOGIC;
    signal size_c17_full_n : STD_LOGIC;
    signal size_c17_dout : STD_LOGIC_VECTOR (31 downto 0);
    signal size_c17_empty_n : STD_LOGIC;
    signal size_assign_channel_dout : STD_LOGIC_VECTOR (31 downto 0);
    signal size_assign_channel_empty_n : STD_LOGIC;
    signal V_data_V_data_0_full_n : STD_LOGIC;
    signal V_data_V_data_0_dout : STD_LOGIC_VECTOR (31 downto 0);
    signal V_data_V_data_0_empty_n : STD_LOGIC;
    signal V_data_V_data_1_full_n : STD_LOGIC;
    signal V_data_V_data_1_dout : STD_LOGIC_VECTOR (31 downto 0);
    signal V_data_V_data_1_empty_n : STD_LOGIC;
    signal V_data_V_data_2_full_n : STD_LOGIC;
    signal V_data_V_data_2_dout : STD_LOGIC_VECTOR (31 downto 0);
    signal V_data_V_data_2_empty_n : STD_LOGIC;
    signal V_data_V_data_3_full_n : STD_LOGIC;
    signal V_data_V_data_3_dout : STD_LOGIC_VECTOR (31 downto 0);
    signal V_data_V_data_3_empty_n : STD_LOGIC;
    signal C_data_V_data_0_full_n : STD_LOGIC;
    signal C_data_V_data_0_dout : STD_LOGIC_VECTOR (31 downto 0);
    signal C_data_V_data_0_empty_n : STD_LOGIC;
    signal C_data_V_data_1_full_n : STD_LOGIC;
    signal C_data_V_data_1_dout : STD_LOGIC_VECTOR (31 downto 0);
    signal C_data_V_data_1_empty_n : STD_LOGIC;
    signal C_data_V_data_2_full_n : STD_LOGIC;
    signal C_data_V_data_2_dout : STD_LOGIC_VECTOR (31 downto 0);
    signal C_data_V_data_2_empty_n : STD_LOGIC;
    signal C_data_V_data_3_full_n : STD_LOGIC;
    signal C_data_V_data_3_dout : STD_LOGIC_VECTOR (31 downto 0);
    signal C_data_V_data_3_empty_n : STD_LOGIC;
    signal simConfig_rowsToSimu_3_full_n : STD_LOGIC;
    signal simConfig_rowsToSimu_3_dout : STD_LOGIC_VECTOR (26 downto 0);
    signal simConfig_rowsToSimu_3_empty_n : STD_LOGIC;
    signal simConfig_BLOCK_NUMB_3_full_n : STD_LOGIC;
    signal simConfig_BLOCK_NUMB_3_dout : STD_LOGIC_VECTOR (26 downto 0);
    signal simConfig_BLOCK_NUMB_3_empty_n : STD_LOGIC;
    signal fixedData_V_data_full_n : STD_LOGIC;
    signal fixedData_V_data_dout : STD_LOGIC_VECTOR (31 downto 0);
    signal fixedData_V_data_empty_n : STD_LOGIC;
    signal fixedData_V_tlast_V_full_n : STD_LOGIC;
    signal fixedData_V_tlast_V_dout : STD_LOGIC_VECTOR (0 downto 0);
    signal fixedData_V_tlast_V_empty_n : STD_LOGIC;
    signal processedData_V_data_full_n : STD_LOGIC;
    signal processedData_V_data_dout : STD_LOGIC_VECTOR (31 downto 0);
    signal processedData_V_data_empty_n : STD_LOGIC;
    signal processedData_V_data_1_full_n : STD_LOGIC;
    signal processedData_V_data_1_dout : STD_LOGIC_VECTOR (31 downto 0);
    signal processedData_V_data_1_empty_n : STD_LOGIC;
    signal processedData_V_data_2_full_n : STD_LOGIC;
    signal processedData_V_data_2_dout : STD_LOGIC_VECTOR (31 downto 0);
    signal processedData_V_data_2_empty_n : STD_LOGIC;
    signal processedData_V_data_3_full_n : STD_LOGIC;
    signal processedData_V_data_3_dout : STD_LOGIC_VECTOR (31 downto 0);
    signal processedData_V_data_3_empty_n : STD_LOGIC;
    signal simConfig_rowsToSimu_2_full_n : STD_LOGIC;
    signal simConfig_rowsToSimu_2_dout : STD_LOGIC_VECTOR (26 downto 0);
    signal simConfig_rowsToSimu_2_empty_n : STD_LOGIC;
    signal simConfig_BLOCK_NUMB_2_full_n : STD_LOGIC;
    signal simConfig_BLOCK_NUMB_2_dout : STD_LOGIC_VECTOR (26 downto 0);
    signal simConfig_BLOCK_NUMB_2_empty_n : STD_LOGIC;
    signal V_V_data_0_full_n : STD_LOGIC;
    signal V_V_data_0_dout : STD_LOGIC_VECTOR (31 downto 0);
    signal V_V_data_0_empty_n : STD_LOGIC;
    signal V_V_data_1_full_n : STD_LOGIC;
    signal V_V_data_1_dout : STD_LOGIC_VECTOR (31 downto 0);
    signal V_V_data_1_empty_n : STD_LOGIC;
    signal V_V_data_2_full_n : STD_LOGIC;
    signal V_V_data_2_dout : STD_LOGIC_VECTOR (31 downto 0);
    signal V_V_data_2_empty_n : STD_LOGIC;
    signal V_V_data_3_full_n : STD_LOGIC;
    signal V_V_data_3_dout : STD_LOGIC_VECTOR (31 downto 0);
    signal V_V_data_3_empty_n : STD_LOGIC;
    signal F_V_data_0_full_n : STD_LOGIC;
    signal F_V_data_0_dout : STD_LOGIC_VECTOR (31 downto 0);
    signal F_V_data_0_empty_n : STD_LOGIC;
    signal F_V_data_1_full_n : STD_LOGIC;
    signal F_V_data_1_dout : STD_LOGIC_VECTOR (31 downto 0);
    signal F_V_data_1_empty_n : STD_LOGIC;
    signal F_V_data_2_full_n : STD_LOGIC;
    signal F_V_data_2_dout : STD_LOGIC_VECTOR (31 downto 0);
    signal F_V_data_2_empty_n : STD_LOGIC;
    signal F_V_data_3_full_n : STD_LOGIC;
    signal F_V_data_3_dout : STD_LOGIC_VECTOR (31 downto 0);
    signal F_V_data_3_empty_n : STD_LOGIC;
    signal simConfig_rowsToSimu_1_full_n : STD_LOGIC;
    signal simConfig_rowsToSimu_1_dout : STD_LOGIC_VECTOR (26 downto 0);
    signal simConfig_rowsToSimu_1_empty_n : STD_LOGIC;
    signal simConfig_BLOCK_NUMB_1_full_n : STD_LOGIC;
    signal simConfig_BLOCK_NUMB_1_dout : STD_LOGIC_VECTOR (26 downto 0);
    signal simConfig_BLOCK_NUMB_1_empty_n : STD_LOGIC;
    signal F_acc_V_data_0_full_n : STD_LOGIC;
    signal F_acc_V_data_0_dout : STD_LOGIC_VECTOR (31 downto 0);
    signal F_acc_V_data_0_empty_n : STD_LOGIC;
    signal F_acc_V_data_1_full_n : STD_LOGIC;
    signal F_acc_V_data_1_dout : STD_LOGIC_VECTOR (31 downto 0);
    signal F_acc_V_data_1_empty_n : STD_LOGIC;
    signal F_acc_V_data_2_full_n : STD_LOGIC;
    signal F_acc_V_data_2_dout : STD_LOGIC_VECTOR (31 downto 0);
    signal F_acc_V_data_2_empty_n : STD_LOGIC;
    signal F_acc_V_data_3_full_n : STD_LOGIC;
    signal F_acc_V_data_3_dout : STD_LOGIC_VECTOR (31 downto 0);
    signal F_acc_V_data_3_empty_n : STD_LOGIC;
    signal V_acc_V_data_0_full_n : STD_LOGIC;
    signal V_acc_V_data_0_dout : STD_LOGIC_VECTOR (31 downto 0);
    signal V_acc_V_data_0_empty_n : STD_LOGIC;
    signal V_acc_V_data_1_full_n : STD_LOGIC;
    signal V_acc_V_data_1_dout : STD_LOGIC_VECTOR (31 downto 0);
    signal V_acc_V_data_1_empty_n : STD_LOGIC;
    signal V_acc_V_data_2_full_n : STD_LOGIC;
    signal V_acc_V_data_2_dout : STD_LOGIC_VECTOR (31 downto 0);
    signal V_acc_V_data_2_empty_n : STD_LOGIC;
    signal V_acc_V_data_3_full_n : STD_LOGIC;
    signal V_acc_V_data_3_dout : STD_LOGIC_VECTOR (31 downto 0);
    signal V_acc_V_data_3_empty_n : STD_LOGIC;
    signal ap_sync_done : STD_LOGIC;
    signal ap_sync_ready : STD_LOGIC;
    signal ap_sync_reg_execute_entry195_U0_ap_ready : STD_LOGIC := '0';
    signal ap_sync_execute_entry195_U0_ap_ready : STD_LOGIC;
    signal execute_entry195_U0_ap_ready_count : STD_LOGIC_VECTOR (1 downto 0) := "00";
    signal ap_sync_reg_blockControl_U0_ap_ready : STD_LOGIC := '0';
    signal ap_sync_blockControl_U0_ap_ready : STD_LOGIC;
    signal blockControl_U0_ap_ready_count : STD_LOGIC_VECTOR (1 downto 0) := "00";
    signal start_for_execute_Block_codeRe_U0_din : STD_LOGIC_VECTOR (0 downto 0);
    signal start_for_execute_Block_codeRe_U0_full_n : STD_LOGIC;
    signal start_for_execute_Block_codeRe_U0_dout : STD_LOGIC_VECTOR (0 downto 0);
    signal start_for_execute_Block_codeRe_U0_empty_n : STD_LOGIC;
    signal execute_Block_codeRe_U0_start_full_n : STD_LOGIC;
    signal execute_Block_codeRe_U0_start_write : STD_LOGIC;
    signal start_for_acc_U0_din : STD_LOGIC_VECTOR (0 downto 0);
    signal start_for_acc_U0_full_n : STD_LOGIC;
    signal start_for_acc_U0_dout : STD_LOGIC_VECTOR (0 downto 0);
    signal start_for_acc_U0_empty_n : STD_LOGIC;
    signal start_for_calc_U0_din : STD_LOGIC_VECTOR (0 downto 0);
    signal start_for_calc_U0_full_n : STD_LOGIC;
    signal start_for_calc_U0_dout : STD_LOGIC_VECTOR (0 downto 0);
    signal start_for_calc_U0_empty_n : STD_LOGIC;
    signal calc_U0_start_full_n : STD_LOGIC;
    signal calc_U0_start_write : STD_LOGIC;
    signal start_for_I_calc_U0_din : STD_LOGIC_VECTOR (0 downto 0);
    signal start_for_I_calc_U0_full_n : STD_LOGIC;
    signal start_for_I_calc_U0_dout : STD_LOGIC_VECTOR (0 downto 0);
    signal start_for_I_calc_U0_empty_n : STD_LOGIC;
    signal I_calc_U0_start_full_n : STD_LOGIC;
    signal I_calc_U0_start_write : STD_LOGIC;

    component execute_entry195 IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        start_full_n : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_continue : IN STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        start_out : OUT STD_LOGIC;
        start_write : OUT STD_LOGIC;
        p_read : IN STD_LOGIC_VECTOR (26 downto 0);
        p_read1 : IN STD_LOGIC_VECTOR (26 downto 0);
        p_read2 : IN STD_LOGIC_VECTOR (26 downto 0);
        p_read3 : IN STD_LOGIC_VECTOR (26 downto 0);
        size : IN STD_LOGIC_VECTOR (31 downto 0);
        simConfig_rowBegin_V_out_din : OUT STD_LOGIC_VECTOR (26 downto 0);
        simConfig_rowBegin_V_out_full_n : IN STD_LOGIC;
        simConfig_rowBegin_V_out_write : OUT STD_LOGIC;
        simConfig_rowEnd_V_out_din : OUT STD_LOGIC_VECTOR (26 downto 0);
        simConfig_rowEnd_V_out_full_n : IN STD_LOGIC;
        simConfig_rowEnd_V_out_write : OUT STD_LOGIC;
        simConfig_rowsToSimulate_V_out_din : OUT STD_LOGIC_VECTOR (26 downto 0);
        simConfig_rowsToSimulate_V_out_full_n : IN STD_LOGIC;
        simConfig_rowsToSimulate_V_out_write : OUT STD_LOGIC;
        simConfig_rowsToSimulate_V_out1_din : OUT STD_LOGIC_VECTOR (26 downto 0);
        simConfig_rowsToSimulate_V_out1_full_n : IN STD_LOGIC;
        simConfig_rowsToSimulate_V_out1_write : OUT STD_LOGIC;
        simConfig_BLOCK_NUMBERS_V_out_din : OUT STD_LOGIC_VECTOR (26 downto 0);
        simConfig_BLOCK_NUMBERS_V_out_full_n : IN STD_LOGIC;
        simConfig_BLOCK_NUMBERS_V_out_write : OUT STD_LOGIC;
        simConfig_BLOCK_NUMBERS_V_out2_din : OUT STD_LOGIC_VECTOR (26 downto 0);
        simConfig_BLOCK_NUMBERS_V_out2_full_n : IN STD_LOGIC;
        simConfig_BLOCK_NUMBERS_V_out2_write : OUT STD_LOGIC;
        size_out_din : OUT STD_LOGIC_VECTOR (31 downto 0);
        size_out_full_n : IN STD_LOGIC;
        size_out_write : OUT STD_LOGIC;
        size_out3_din : OUT STD_LOGIC_VECTOR (31 downto 0);
        size_out3_full_n : IN STD_LOGIC;
        size_out3_write : OUT STD_LOGIC );
    end component;


    component execute_Block_codeRe IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_continue : IN STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        size_dout : IN STD_LOGIC_VECTOR (31 downto 0);
        size_empty_n : IN STD_LOGIC;
        size_read : OUT STD_LOGIC;
        ap_return : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component blockControl IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        start_full_n : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_continue : IN STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        start_out : OUT STD_LOGIC;
        start_write : OUT STD_LOGIC;
        input_V_data_TDATA : IN STD_LOGIC_VECTOR (63 downto 0);
        input_V_data_TVALID : IN STD_LOGIC;
        input_V_data_TREADY : OUT STD_LOGIC;
        simConfig_rowsToSimulate_V_dout : IN STD_LOGIC_VECTOR (26 downto 0);
        simConfig_rowsToSimulate_V_empty_n : IN STD_LOGIC;
        simConfig_rowsToSimulate_V_read : OUT STD_LOGIC;
        simConfig_BLOCK_NUMBERS_V_dout : IN STD_LOGIC_VECTOR (26 downto 0);
        simConfig_BLOCK_NUMBERS_V_empty_n : IN STD_LOGIC;
        simConfig_BLOCK_NUMBERS_V_read : OUT STD_LOGIC;
        V_SIZE_dout : IN STD_LOGIC_VECTOR (31 downto 0);
        V_SIZE_empty_n : IN STD_LOGIC;
        V_SIZE_read : OUT STD_LOGIC;
        V_data_V_data_0_din : OUT STD_LOGIC_VECTOR (31 downto 0);
        V_data_V_data_0_full_n : IN STD_LOGIC;
        V_data_V_data_0_write : OUT STD_LOGIC;
        V_data_V_data_1_din : OUT STD_LOGIC_VECTOR (31 downto 0);
        V_data_V_data_1_full_n : IN STD_LOGIC;
        V_data_V_data_1_write : OUT STD_LOGIC;
        V_data_V_data_2_din : OUT STD_LOGIC_VECTOR (31 downto 0);
        V_data_V_data_2_full_n : IN STD_LOGIC;
        V_data_V_data_2_write : OUT STD_LOGIC;
        V_data_V_data_3_din : OUT STD_LOGIC_VECTOR (31 downto 0);
        V_data_V_data_3_full_n : IN STD_LOGIC;
        V_data_V_data_3_write : OUT STD_LOGIC;
        C_data_V_data_0_din : OUT STD_LOGIC_VECTOR (31 downto 0);
        C_data_V_data_0_full_n : IN STD_LOGIC;
        C_data_V_data_0_write : OUT STD_LOGIC;
        C_data_V_data_1_din : OUT STD_LOGIC_VECTOR (31 downto 0);
        C_data_V_data_1_full_n : IN STD_LOGIC;
        C_data_V_data_1_write : OUT STD_LOGIC;
        C_data_V_data_2_din : OUT STD_LOGIC_VECTOR (31 downto 0);
        C_data_V_data_2_full_n : IN STD_LOGIC;
        C_data_V_data_2_write : OUT STD_LOGIC;
        C_data_V_data_3_din : OUT STD_LOGIC_VECTOR (31 downto 0);
        C_data_V_data_3_full_n : IN STD_LOGIC;
        C_data_V_data_3_write : OUT STD_LOGIC );
    end component;


    component V_read IS
    port (
        ap_start : IN STD_LOGIC;
        start_full_n : IN STD_LOGIC;
        start_out : OUT STD_LOGIC;
        start_write : OUT STD_LOGIC;
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        simConfig_rowBegin_V_dout : IN STD_LOGIC_VECTOR (26 downto 0);
        simConfig_rowBegin_V_empty_n : IN STD_LOGIC;
        simConfig_rowBegin_V_read : OUT STD_LOGIC;
        simConfig_rowEnd_V_dout : IN STD_LOGIC_VECTOR (26 downto 0);
        simConfig_rowEnd_V_empty_n : IN STD_LOGIC;
        simConfig_rowEnd_V_read : OUT STD_LOGIC;
        simConfig_rowsToSimulate_V_dout : IN STD_LOGIC_VECTOR (26 downto 0);
        simConfig_rowsToSimulate_V_empty_n : IN STD_LOGIC;
        simConfig_rowsToSimulate_V_read : OUT STD_LOGIC;
        simConfig_BLOCK_NUMBERS_V_dout : IN STD_LOGIC_VECTOR (26 downto 0);
        simConfig_BLOCK_NUMBERS_V_empty_n : IN STD_LOGIC;
        simConfig_BLOCK_NUMBERS_V_read : OUT STD_LOGIC;
        V_SIZE_read : IN STD_LOGIC_VECTOR (31 downto 0);
        simConfig_rowsToSimulate_V_out_din : OUT STD_LOGIC_VECTOR (26 downto 0);
        simConfig_rowsToSimulate_V_out_full_n : IN STD_LOGIC;
        simConfig_rowsToSimulate_V_out_write : OUT STD_LOGIC;
        simConfig_BLOCK_NUMBERS_V_out_din : OUT STD_LOGIC_VECTOR (26 downto 0);
        simConfig_BLOCK_NUMBERS_V_out_full_n : IN STD_LOGIC;
        simConfig_BLOCK_NUMBERS_V_out_write : OUT STD_LOGIC;
        V_data_V_data_0_dout : IN STD_LOGIC_VECTOR (31 downto 0);
        V_data_V_data_0_empty_n : IN STD_LOGIC;
        V_data_V_data_0_read : OUT STD_LOGIC;
        V_data_V_data_1_dout : IN STD_LOGIC_VECTOR (31 downto 0);
        V_data_V_data_1_empty_n : IN STD_LOGIC;
        V_data_V_data_1_read : OUT STD_LOGIC;
        V_data_V_data_2_dout : IN STD_LOGIC_VECTOR (31 downto 0);
        V_data_V_data_2_empty_n : IN STD_LOGIC;
        V_data_V_data_2_read : OUT STD_LOGIC;
        V_data_V_data_3_dout : IN STD_LOGIC_VECTOR (31 downto 0);
        V_data_V_data_3_empty_n : IN STD_LOGIC;
        V_data_V_data_3_read : OUT STD_LOGIC;
        fixedData_V_data_din : OUT STD_LOGIC_VECTOR (31 downto 0);
        fixedData_V_data_full_n : IN STD_LOGIC;
        fixedData_V_data_write : OUT STD_LOGIC;
        fixedData_V_tlast_V_din : OUT STD_LOGIC_VECTOR (0 downto 0);
        fixedData_V_tlast_V_full_n : IN STD_LOGIC;
        fixedData_V_tlast_V_write : OUT STD_LOGIC;
        processedData_V_data_din : OUT STD_LOGIC_VECTOR (31 downto 0);
        processedData_V_data_full_n : IN STD_LOGIC;
        processedData_V_data_write : OUT STD_LOGIC;
        processedData_V_data_1_din : OUT STD_LOGIC_VECTOR (31 downto 0);
        processedData_V_data_1_full_n : IN STD_LOGIC;
        processedData_V_data_1_write : OUT STD_LOGIC;
        processedData_V_data_2_din : OUT STD_LOGIC_VECTOR (31 downto 0);
        processedData_V_data_2_full_n : IN STD_LOGIC;
        processedData_V_data_2_write : OUT STD_LOGIC;
        processedData_V_data_3_din : OUT STD_LOGIC_VECTOR (31 downto 0);
        processedData_V_data_3_full_n : IN STD_LOGIC;
        processedData_V_data_3_write : OUT STD_LOGIC;
        V_SIZE_read_ap_vld : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_continue : IN STD_LOGIC );
    end component;


    component calc IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_continue : IN STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        simConfig_rowsToSimulate_V_dout : IN STD_LOGIC_VECTOR (26 downto 0);
        simConfig_rowsToSimulate_V_empty_n : IN STD_LOGIC;
        simConfig_rowsToSimulate_V_read : OUT STD_LOGIC;
        simConfig_BLOCK_NUMBERS_V_dout : IN STD_LOGIC_VECTOR (26 downto 0);
        simConfig_BLOCK_NUMBERS_V_empty_n : IN STD_LOGIC;
        simConfig_BLOCK_NUMBERS_V_read : OUT STD_LOGIC;
        simConfig_rowsToSimulate_V_out_din : OUT STD_LOGIC_VECTOR (26 downto 0);
        simConfig_rowsToSimulate_V_out_full_n : IN STD_LOGIC;
        simConfig_rowsToSimulate_V_out_write : OUT STD_LOGIC;
        simConfig_BLOCK_NUMBERS_V_out_din : OUT STD_LOGIC_VECTOR (26 downto 0);
        simConfig_BLOCK_NUMBERS_V_out_full_n : IN STD_LOGIC;
        simConfig_BLOCK_NUMBERS_V_out_write : OUT STD_LOGIC;
        processedData_V_data_dout : IN STD_LOGIC_VECTOR (31 downto 0);
        processedData_V_data_empty_n : IN STD_LOGIC;
        processedData_V_data_read : OUT STD_LOGIC;
        processedData_V_data_1_dout : IN STD_LOGIC_VECTOR (31 downto 0);
        processedData_V_data_1_empty_n : IN STD_LOGIC;
        processedData_V_data_1_read : OUT STD_LOGIC;
        processedData_V_data_2_dout : IN STD_LOGIC_VECTOR (31 downto 0);
        processedData_V_data_2_empty_n : IN STD_LOGIC;
        processedData_V_data_2_read : OUT STD_LOGIC;
        processedData_V_data_3_dout : IN STD_LOGIC_VECTOR (31 downto 0);
        processedData_V_data_3_empty_n : IN STD_LOGIC;
        processedData_V_data_3_read : OUT STD_LOGIC;
        fixedData_V_data_dout : IN STD_LOGIC_VECTOR (31 downto 0);
        fixedData_V_data_empty_n : IN STD_LOGIC;
        fixedData_V_data_read : OUT STD_LOGIC;
        fixedData_V_tlast_V_dout : IN STD_LOGIC_VECTOR (0 downto 0);
        fixedData_V_tlast_V_empty_n : IN STD_LOGIC;
        fixedData_V_tlast_V_read : OUT STD_LOGIC;
        V_V_data_0_din : OUT STD_LOGIC_VECTOR (31 downto 0);
        V_V_data_0_full_n : IN STD_LOGIC;
        V_V_data_0_write : OUT STD_LOGIC;
        V_V_data_1_din : OUT STD_LOGIC_VECTOR (31 downto 0);
        V_V_data_1_full_n : IN STD_LOGIC;
        V_V_data_1_write : OUT STD_LOGIC;
        V_V_data_2_din : OUT STD_LOGIC_VECTOR (31 downto 0);
        V_V_data_2_full_n : IN STD_LOGIC;
        V_V_data_2_write : OUT STD_LOGIC;
        V_V_data_3_din : OUT STD_LOGIC_VECTOR (31 downto 0);
        V_V_data_3_full_n : IN STD_LOGIC;
        V_V_data_3_write : OUT STD_LOGIC;
        F_V_data_0_din : OUT STD_LOGIC_VECTOR (31 downto 0);
        F_V_data_0_full_n : IN STD_LOGIC;
        F_V_data_0_write : OUT STD_LOGIC;
        F_V_data_1_din : OUT STD_LOGIC_VECTOR (31 downto 0);
        F_V_data_1_full_n : IN STD_LOGIC;
        F_V_data_1_write : OUT STD_LOGIC;
        F_V_data_2_din : OUT STD_LOGIC_VECTOR (31 downto 0);
        F_V_data_2_full_n : IN STD_LOGIC;
        F_V_data_2_write : OUT STD_LOGIC;
        F_V_data_3_din : OUT STD_LOGIC_VECTOR (31 downto 0);
        F_V_data_3_full_n : IN STD_LOGIC;
        F_V_data_3_write : OUT STD_LOGIC );
    end component;


    component acc IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        start_full_n : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_continue : IN STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        start_out : OUT STD_LOGIC;
        start_write : OUT STD_LOGIC;
        simConfig_rowsToSimulate_V_dout : IN STD_LOGIC_VECTOR (26 downto 0);
        simConfig_rowsToSimulate_V_empty_n : IN STD_LOGIC;
        simConfig_rowsToSimulate_V_read : OUT STD_LOGIC;
        simConfig_BLOCK_NUMBERS_V_dout : IN STD_LOGIC_VECTOR (26 downto 0);
        simConfig_BLOCK_NUMBERS_V_empty_n : IN STD_LOGIC;
        simConfig_BLOCK_NUMBERS_V_read : OUT STD_LOGIC;
        simConfig_rowsToSimulate_V_out_din : OUT STD_LOGIC_VECTOR (26 downto 0);
        simConfig_rowsToSimulate_V_out_full_n : IN STD_LOGIC;
        simConfig_rowsToSimulate_V_out_write : OUT STD_LOGIC;
        simConfig_BLOCK_NUMBERS_V_out_din : OUT STD_LOGIC_VECTOR (26 downto 0);
        simConfig_BLOCK_NUMBERS_V_out_full_n : IN STD_LOGIC;
        simConfig_BLOCK_NUMBERS_V_out_write : OUT STD_LOGIC;
        F_V_data_0_dout : IN STD_LOGIC_VECTOR (31 downto 0);
        F_V_data_0_empty_n : IN STD_LOGIC;
        F_V_data_0_read : OUT STD_LOGIC;
        F_V_data_1_dout : IN STD_LOGIC_VECTOR (31 downto 0);
        F_V_data_1_empty_n : IN STD_LOGIC;
        F_V_data_1_read : OUT STD_LOGIC;
        F_V_data_2_dout : IN STD_LOGIC_VECTOR (31 downto 0);
        F_V_data_2_empty_n : IN STD_LOGIC;
        F_V_data_2_read : OUT STD_LOGIC;
        F_V_data_3_dout : IN STD_LOGIC_VECTOR (31 downto 0);
        F_V_data_3_empty_n : IN STD_LOGIC;
        F_V_data_3_read : OUT STD_LOGIC;
        V_V_data_0_dout : IN STD_LOGIC_VECTOR (31 downto 0);
        V_V_data_0_empty_n : IN STD_LOGIC;
        V_V_data_0_read : OUT STD_LOGIC;
        V_V_data_1_dout : IN STD_LOGIC_VECTOR (31 downto 0);
        V_V_data_1_empty_n : IN STD_LOGIC;
        V_V_data_1_read : OUT STD_LOGIC;
        V_V_data_2_dout : IN STD_LOGIC_VECTOR (31 downto 0);
        V_V_data_2_empty_n : IN STD_LOGIC;
        V_V_data_2_read : OUT STD_LOGIC;
        V_V_data_3_dout : IN STD_LOGIC_VECTOR (31 downto 0);
        V_V_data_3_empty_n : IN STD_LOGIC;
        V_V_data_3_read : OUT STD_LOGIC;
        C_data_V_data_0_dout : IN STD_LOGIC_VECTOR (31 downto 0);
        C_data_V_data_0_empty_n : IN STD_LOGIC;
        C_data_V_data_0_read : OUT STD_LOGIC;
        C_data_V_data_1_dout : IN STD_LOGIC_VECTOR (31 downto 0);
        C_data_V_data_1_empty_n : IN STD_LOGIC;
        C_data_V_data_1_read : OUT STD_LOGIC;
        C_data_V_data_2_dout : IN STD_LOGIC_VECTOR (31 downto 0);
        C_data_V_data_2_empty_n : IN STD_LOGIC;
        C_data_V_data_2_read : OUT STD_LOGIC;
        C_data_V_data_3_dout : IN STD_LOGIC_VECTOR (31 downto 0);
        C_data_V_data_3_empty_n : IN STD_LOGIC;
        C_data_V_data_3_read : OUT STD_LOGIC;
        F_acc_V_data_0_din : OUT STD_LOGIC_VECTOR (31 downto 0);
        F_acc_V_data_0_full_n : IN STD_LOGIC;
        F_acc_V_data_0_write : OUT STD_LOGIC;
        F_acc_V_data_1_din : OUT STD_LOGIC_VECTOR (31 downto 0);
        F_acc_V_data_1_full_n : IN STD_LOGIC;
        F_acc_V_data_1_write : OUT STD_LOGIC;
        F_acc_V_data_2_din : OUT STD_LOGIC_VECTOR (31 downto 0);
        F_acc_V_data_2_full_n : IN STD_LOGIC;
        F_acc_V_data_2_write : OUT STD_LOGIC;
        F_acc_V_data_3_din : OUT STD_LOGIC_VECTOR (31 downto 0);
        F_acc_V_data_3_full_n : IN STD_LOGIC;
        F_acc_V_data_3_write : OUT STD_LOGIC;
        V_acc_V_data_0_din : OUT STD_LOGIC_VECTOR (31 downto 0);
        V_acc_V_data_0_full_n : IN STD_LOGIC;
        V_acc_V_data_0_write : OUT STD_LOGIC;
        V_acc_V_data_1_din : OUT STD_LOGIC_VECTOR (31 downto 0);
        V_acc_V_data_1_full_n : IN STD_LOGIC;
        V_acc_V_data_1_write : OUT STD_LOGIC;
        V_acc_V_data_2_din : OUT STD_LOGIC_VECTOR (31 downto 0);
        V_acc_V_data_2_full_n : IN STD_LOGIC;
        V_acc_V_data_2_write : OUT STD_LOGIC;
        V_acc_V_data_3_din : OUT STD_LOGIC_VECTOR (31 downto 0);
        V_acc_V_data_3_full_n : IN STD_LOGIC;
        V_acc_V_data_3_write : OUT STD_LOGIC );
    end component;


    component I_calc IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_continue : IN STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        output_r_TDATA : OUT STD_LOGIC_VECTOR (31 downto 0);
        output_r_TVALID : OUT STD_LOGIC;
        output_r_TREADY : IN STD_LOGIC;
        output_r_TLAST : OUT STD_LOGIC_VECTOR (0 downto 0);
        simConfig_rowsToSimulate_V_dout : IN STD_LOGIC_VECTOR (26 downto 0);
        simConfig_rowsToSimulate_V_empty_n : IN STD_LOGIC;
        simConfig_rowsToSimulate_V_read : OUT STD_LOGIC;
        simConfig_BLOCK_NUMBERS_V_dout : IN STD_LOGIC_VECTOR (26 downto 0);
        simConfig_BLOCK_NUMBERS_V_empty_n : IN STD_LOGIC;
        simConfig_BLOCK_NUMBERS_V_read : OUT STD_LOGIC;
        F_acc_V_data_0_dout : IN STD_LOGIC_VECTOR (31 downto 0);
        F_acc_V_data_0_empty_n : IN STD_LOGIC;
        F_acc_V_data_0_read : OUT STD_LOGIC;
        F_acc_V_data_1_dout : IN STD_LOGIC_VECTOR (31 downto 0);
        F_acc_V_data_1_empty_n : IN STD_LOGIC;
        F_acc_V_data_1_read : OUT STD_LOGIC;
        F_acc_V_data_2_dout : IN STD_LOGIC_VECTOR (31 downto 0);
        F_acc_V_data_2_empty_n : IN STD_LOGIC;
        F_acc_V_data_2_read : OUT STD_LOGIC;
        F_acc_V_data_3_dout : IN STD_LOGIC_VECTOR (31 downto 0);
        F_acc_V_data_3_empty_n : IN STD_LOGIC;
        F_acc_V_data_3_read : OUT STD_LOGIC;
        V_acc_V_data_0_dout : IN STD_LOGIC_VECTOR (31 downto 0);
        V_acc_V_data_0_empty_n : IN STD_LOGIC;
        V_acc_V_data_0_read : OUT STD_LOGIC;
        V_acc_V_data_1_dout : IN STD_LOGIC_VECTOR (31 downto 0);
        V_acc_V_data_1_empty_n : IN STD_LOGIC;
        V_acc_V_data_1_read : OUT STD_LOGIC;
        V_acc_V_data_2_dout : IN STD_LOGIC_VECTOR (31 downto 0);
        V_acc_V_data_2_empty_n : IN STD_LOGIC;
        V_acc_V_data_2_read : OUT STD_LOGIC;
        V_acc_V_data_3_dout : IN STD_LOGIC_VECTOR (31 downto 0);
        V_acc_V_data_3_empty_n : IN STD_LOGIC;
        V_acc_V_data_3_read : OUT STD_LOGIC );
    end component;


    component fifo_w27_d3_A_x IS
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        if_read_ce : IN STD_LOGIC;
        if_write_ce : IN STD_LOGIC;
        if_din : IN STD_LOGIC_VECTOR (26 downto 0);
        if_full_n : OUT STD_LOGIC;
        if_write : IN STD_LOGIC;
        if_dout : OUT STD_LOGIC_VECTOR (26 downto 0);
        if_empty_n : OUT STD_LOGIC;
        if_read : IN STD_LOGIC );
    end component;


    component fifo_w27_d2_A_x IS
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        if_read_ce : IN STD_LOGIC;
        if_write_ce : IN STD_LOGIC;
        if_din : IN STD_LOGIC_VECTOR (26 downto 0);
        if_full_n : OUT STD_LOGIC;
        if_write : IN STD_LOGIC;
        if_dout : OUT STD_LOGIC_VECTOR (26 downto 0);
        if_empty_n : OUT STD_LOGIC;
        if_read : IN STD_LOGIC );
    end component;


    component fifo_w32_d2_A_x IS
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        if_read_ce : IN STD_LOGIC;
        if_write_ce : IN STD_LOGIC;
        if_din : IN STD_LOGIC_VECTOR (31 downto 0);
        if_full_n : OUT STD_LOGIC;
        if_write : IN STD_LOGIC;
        if_dout : OUT STD_LOGIC_VECTOR (31 downto 0);
        if_empty_n : OUT STD_LOGIC;
        if_read : IN STD_LOGIC );
    end component;


    component fifo_w32_d128_A IS
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        if_read_ce : IN STD_LOGIC;
        if_write_ce : IN STD_LOGIC;
        if_din : IN STD_LOGIC_VECTOR (31 downto 0);
        if_full_n : OUT STD_LOGIC;
        if_write : IN STD_LOGIC;
        if_dout : OUT STD_LOGIC_VECTOR (31 downto 0);
        if_empty_n : OUT STD_LOGIC;
        if_read : IN STD_LOGIC );
    end component;


    component fifo_w1_d128_A IS
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        if_read_ce : IN STD_LOGIC;
        if_write_ce : IN STD_LOGIC;
        if_din : IN STD_LOGIC_VECTOR (0 downto 0);
        if_full_n : OUT STD_LOGIC;
        if_write : IN STD_LOGIC;
        if_dout : OUT STD_LOGIC_VECTOR (0 downto 0);
        if_empty_n : OUT STD_LOGIC;
        if_read : IN STD_LOGIC );
    end component;


    component start_for_execute_Block_codeRe_U0 IS
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        if_read_ce : IN STD_LOGIC;
        if_write_ce : IN STD_LOGIC;
        if_din : IN STD_LOGIC_VECTOR (0 downto 0);
        if_full_n : OUT STD_LOGIC;
        if_write : IN STD_LOGIC;
        if_dout : OUT STD_LOGIC_VECTOR (0 downto 0);
        if_empty_n : OUT STD_LOGIC;
        if_read : IN STD_LOGIC );
    end component;


    component start_for_acc_U0 IS
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        if_read_ce : IN STD_LOGIC;
        if_write_ce : IN STD_LOGIC;
        if_din : IN STD_LOGIC_VECTOR (0 downto 0);
        if_full_n : OUT STD_LOGIC;
        if_write : IN STD_LOGIC;
        if_dout : OUT STD_LOGIC_VECTOR (0 downto 0);
        if_empty_n : OUT STD_LOGIC;
        if_read : IN STD_LOGIC );
    end component;


    component start_for_calc_U0 IS
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        if_read_ce : IN STD_LOGIC;
        if_write_ce : IN STD_LOGIC;
        if_din : IN STD_LOGIC_VECTOR (0 downto 0);
        if_full_n : OUT STD_LOGIC;
        if_write : IN STD_LOGIC;
        if_dout : OUT STD_LOGIC_VECTOR (0 downto 0);
        if_empty_n : OUT STD_LOGIC;
        if_read : IN STD_LOGIC );
    end component;


    component start_for_I_calc_U0 IS
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        if_read_ce : IN STD_LOGIC;
        if_write_ce : IN STD_LOGIC;
        if_din : IN STD_LOGIC_VECTOR (0 downto 0);
        if_full_n : OUT STD_LOGIC;
        if_write : IN STD_LOGIC;
        if_dout : OUT STD_LOGIC_VECTOR (0 downto 0);
        if_empty_n : OUT STD_LOGIC;
        if_read : IN STD_LOGIC );
    end component;



begin
    execute_entry195_U0 : component execute_entry195
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => execute_entry195_U0_ap_start,
        start_full_n => start_for_execute_Block_codeRe_U0_full_n,
        ap_done => execute_entry195_U0_ap_done,
        ap_continue => execute_entry195_U0_ap_continue,
        ap_idle => execute_entry195_U0_ap_idle,
        ap_ready => execute_entry195_U0_ap_ready,
        start_out => execute_entry195_U0_start_out,
        start_write => execute_entry195_U0_start_write,
        p_read => simConfig_rowBegin_V_2,
        p_read1 => simConfig_rowEnd_V_r,
        p_read2 => simConfig_rowsToSimu,
        p_read3 => simConfig_BLOCK_NUMB,
        size => size,
        simConfig_rowBegin_V_out_din => execute_entry195_U0_simConfig_rowBegin_V_out_din,
        simConfig_rowBegin_V_out_full_n => simConfig_rowBegin_V_full_n,
        simConfig_rowBegin_V_out_write => execute_entry195_U0_simConfig_rowBegin_V_out_write,
        simConfig_rowEnd_V_out_din => execute_entry195_U0_simConfig_rowEnd_V_out_din,
        simConfig_rowEnd_V_out_full_n => simConfig_rowEnd_V_c_full_n,
        simConfig_rowEnd_V_out_write => execute_entry195_U0_simConfig_rowEnd_V_out_write,
        simConfig_rowsToSimulate_V_out_din => execute_entry195_U0_simConfig_rowsToSimulate_V_out_din,
        simConfig_rowsToSimulate_V_out_full_n => simConfig_rowsToSimu_5_full_n,
        simConfig_rowsToSimulate_V_out_write => execute_entry195_U0_simConfig_rowsToSimulate_V_out_write,
        simConfig_rowsToSimulate_V_out1_din => execute_entry195_U0_simConfig_rowsToSimulate_V_out1_din,
        simConfig_rowsToSimulate_V_out1_full_n => simConfig_rowsToSimu_4_full_n,
        simConfig_rowsToSimulate_V_out1_write => execute_entry195_U0_simConfig_rowsToSimulate_V_out1_write,
        simConfig_BLOCK_NUMBERS_V_out_din => execute_entry195_U0_simConfig_BLOCK_NUMBERS_V_out_din,
        simConfig_BLOCK_NUMBERS_V_out_full_n => simConfig_BLOCK_NUMB_5_full_n,
        simConfig_BLOCK_NUMBERS_V_out_write => execute_entry195_U0_simConfig_BLOCK_NUMBERS_V_out_write,
        simConfig_BLOCK_NUMBERS_V_out2_din => execute_entry195_U0_simConfig_BLOCK_NUMBERS_V_out2_din,
        simConfig_BLOCK_NUMBERS_V_out2_full_n => simConfig_BLOCK_NUMB_4_full_n,
        simConfig_BLOCK_NUMBERS_V_out2_write => execute_entry195_U0_simConfig_BLOCK_NUMBERS_V_out2_write,
        size_out_din => execute_entry195_U0_size_out_din,
        size_out_full_n => size_c_full_n,
        size_out_write => execute_entry195_U0_size_out_write,
        size_out3_din => execute_entry195_U0_size_out3_din,
        size_out3_full_n => size_c17_full_n,
        size_out3_write => execute_entry195_U0_size_out3_write);

    execute_Block_codeRe_U0 : component execute_Block_codeRe
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => execute_Block_codeRe_U0_ap_start,
        ap_done => execute_Block_codeRe_U0_ap_done,
        ap_continue => execute_Block_codeRe_U0_ap_continue,
        ap_idle => execute_Block_codeRe_U0_ap_idle,
        ap_ready => execute_Block_codeRe_U0_ap_ready,
        size_dout => size_c_dout,
        size_empty_n => size_c_empty_n,
        size_read => execute_Block_codeRe_U0_size_read,
        ap_return => execute_Block_codeRe_U0_ap_return);

    blockControl_U0 : component blockControl
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => blockControl_U0_ap_start,
        start_full_n => start_for_acc_U0_full_n,
        ap_done => blockControl_U0_ap_done,
        ap_continue => blockControl_U0_ap_continue,
        ap_idle => blockControl_U0_ap_idle,
        ap_ready => blockControl_U0_ap_ready,
        start_out => blockControl_U0_start_out,
        start_write => blockControl_U0_start_write,
        input_V_data_TDATA => input_V_data_TDATA,
        input_V_data_TVALID => input_V_data_TVALID,
        input_V_data_TREADY => blockControl_U0_input_V_data_TREADY,
        simConfig_rowsToSimulate_V_dout => simConfig_rowsToSimu_5_dout,
        simConfig_rowsToSimulate_V_empty_n => simConfig_rowsToSimu_5_empty_n,
        simConfig_rowsToSimulate_V_read => blockControl_U0_simConfig_rowsToSimulate_V_read,
        simConfig_BLOCK_NUMBERS_V_dout => simConfig_BLOCK_NUMB_5_dout,
        simConfig_BLOCK_NUMBERS_V_empty_n => simConfig_BLOCK_NUMB_5_empty_n,
        simConfig_BLOCK_NUMBERS_V_read => blockControl_U0_simConfig_BLOCK_NUMBERS_V_read,
        V_SIZE_dout => size_c17_dout,
        V_SIZE_empty_n => size_c17_empty_n,
        V_SIZE_read => blockControl_U0_V_SIZE_read,
        V_data_V_data_0_din => blockControl_U0_V_data_V_data_0_din,
        V_data_V_data_0_full_n => V_data_V_data_0_full_n,
        V_data_V_data_0_write => blockControl_U0_V_data_V_data_0_write,
        V_data_V_data_1_din => blockControl_U0_V_data_V_data_1_din,
        V_data_V_data_1_full_n => V_data_V_data_1_full_n,
        V_data_V_data_1_write => blockControl_U0_V_data_V_data_1_write,
        V_data_V_data_2_din => blockControl_U0_V_data_V_data_2_din,
        V_data_V_data_2_full_n => V_data_V_data_2_full_n,
        V_data_V_data_2_write => blockControl_U0_V_data_V_data_2_write,
        V_data_V_data_3_din => blockControl_U0_V_data_V_data_3_din,
        V_data_V_data_3_full_n => V_data_V_data_3_full_n,
        V_data_V_data_3_write => blockControl_U0_V_data_V_data_3_write,
        C_data_V_data_0_din => blockControl_U0_C_data_V_data_0_din,
        C_data_V_data_0_full_n => C_data_V_data_0_full_n,
        C_data_V_data_0_write => blockControl_U0_C_data_V_data_0_write,
        C_data_V_data_1_din => blockControl_U0_C_data_V_data_1_din,
        C_data_V_data_1_full_n => C_data_V_data_1_full_n,
        C_data_V_data_1_write => blockControl_U0_C_data_V_data_1_write,
        C_data_V_data_2_din => blockControl_U0_C_data_V_data_2_din,
        C_data_V_data_2_full_n => C_data_V_data_2_full_n,
        C_data_V_data_2_write => blockControl_U0_C_data_V_data_2_write,
        C_data_V_data_3_din => blockControl_U0_C_data_V_data_3_din,
        C_data_V_data_3_full_n => C_data_V_data_3_full_n,
        C_data_V_data_3_write => blockControl_U0_C_data_V_data_3_write);

    V_read_U0 : component V_read
    port map (
        ap_start => V_read_U0_ap_start,
        start_full_n => start_for_calc_U0_full_n,
        start_out => V_read_U0_start_out,
        start_write => V_read_U0_start_write,
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        simConfig_rowBegin_V_dout => simConfig_rowBegin_V_dout,
        simConfig_rowBegin_V_empty_n => simConfig_rowBegin_V_empty_n,
        simConfig_rowBegin_V_read => V_read_U0_simConfig_rowBegin_V_read,
        simConfig_rowEnd_V_dout => simConfig_rowEnd_V_c_dout,
        simConfig_rowEnd_V_empty_n => simConfig_rowEnd_V_c_empty_n,
        simConfig_rowEnd_V_read => V_read_U0_simConfig_rowEnd_V_read,
        simConfig_rowsToSimulate_V_dout => simConfig_rowsToSimu_4_dout,
        simConfig_rowsToSimulate_V_empty_n => simConfig_rowsToSimu_4_empty_n,
        simConfig_rowsToSimulate_V_read => V_read_U0_simConfig_rowsToSimulate_V_read,
        simConfig_BLOCK_NUMBERS_V_dout => simConfig_BLOCK_NUMB_4_dout,
        simConfig_BLOCK_NUMBERS_V_empty_n => simConfig_BLOCK_NUMB_4_empty_n,
        simConfig_BLOCK_NUMBERS_V_read => V_read_U0_simConfig_BLOCK_NUMBERS_V_read,
        V_SIZE_read => size_assign_channel_dout,
        simConfig_rowsToSimulate_V_out_din => V_read_U0_simConfig_rowsToSimulate_V_out_din,
        simConfig_rowsToSimulate_V_out_full_n => simConfig_rowsToSimu_3_full_n,
        simConfig_rowsToSimulate_V_out_write => V_read_U0_simConfig_rowsToSimulate_V_out_write,
        simConfig_BLOCK_NUMBERS_V_out_din => V_read_U0_simConfig_BLOCK_NUMBERS_V_out_din,
        simConfig_BLOCK_NUMBERS_V_out_full_n => simConfig_BLOCK_NUMB_3_full_n,
        simConfig_BLOCK_NUMBERS_V_out_write => V_read_U0_simConfig_BLOCK_NUMBERS_V_out_write,
        V_data_V_data_0_dout => V_data_V_data_0_dout,
        V_data_V_data_0_empty_n => V_data_V_data_0_empty_n,
        V_data_V_data_0_read => V_read_U0_V_data_V_data_0_read,
        V_data_V_data_1_dout => V_data_V_data_1_dout,
        V_data_V_data_1_empty_n => V_data_V_data_1_empty_n,
        V_data_V_data_1_read => V_read_U0_V_data_V_data_1_read,
        V_data_V_data_2_dout => V_data_V_data_2_dout,
        V_data_V_data_2_empty_n => V_data_V_data_2_empty_n,
        V_data_V_data_2_read => V_read_U0_V_data_V_data_2_read,
        V_data_V_data_3_dout => V_data_V_data_3_dout,
        V_data_V_data_3_empty_n => V_data_V_data_3_empty_n,
        V_data_V_data_3_read => V_read_U0_V_data_V_data_3_read,
        fixedData_V_data_din => V_read_U0_fixedData_V_data_din,
        fixedData_V_data_full_n => fixedData_V_data_full_n,
        fixedData_V_data_write => V_read_U0_fixedData_V_data_write,
        fixedData_V_tlast_V_din => V_read_U0_fixedData_V_tlast_V_din,
        fixedData_V_tlast_V_full_n => fixedData_V_tlast_V_full_n,
        fixedData_V_tlast_V_write => V_read_U0_fixedData_V_tlast_V_write,
        processedData_V_data_din => V_read_U0_processedData_V_data_din,
        processedData_V_data_full_n => processedData_V_data_full_n,
        processedData_V_data_write => V_read_U0_processedData_V_data_write,
        processedData_V_data_1_din => V_read_U0_processedData_V_data_1_din,
        processedData_V_data_1_full_n => processedData_V_data_1_full_n,
        processedData_V_data_1_write => V_read_U0_processedData_V_data_1_write,
        processedData_V_data_2_din => V_read_U0_processedData_V_data_2_din,
        processedData_V_data_2_full_n => processedData_V_data_2_full_n,
        processedData_V_data_2_write => V_read_U0_processedData_V_data_2_write,
        processedData_V_data_3_din => V_read_U0_processedData_V_data_3_din,
        processedData_V_data_3_full_n => processedData_V_data_3_full_n,
        processedData_V_data_3_write => V_read_U0_processedData_V_data_3_write,
        V_SIZE_read_ap_vld => ap_const_logic_0,
        ap_done => V_read_U0_ap_done,
        ap_ready => V_read_U0_ap_ready,
        ap_idle => V_read_U0_ap_idle,
        ap_continue => V_read_U0_ap_continue);

    calc_U0 : component calc
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => calc_U0_ap_start,
        ap_done => calc_U0_ap_done,
        ap_continue => calc_U0_ap_continue,
        ap_idle => calc_U0_ap_idle,
        ap_ready => calc_U0_ap_ready,
        simConfig_rowsToSimulate_V_dout => simConfig_rowsToSimu_3_dout,
        simConfig_rowsToSimulate_V_empty_n => simConfig_rowsToSimu_3_empty_n,
        simConfig_rowsToSimulate_V_read => calc_U0_simConfig_rowsToSimulate_V_read,
        simConfig_BLOCK_NUMBERS_V_dout => simConfig_BLOCK_NUMB_3_dout,
        simConfig_BLOCK_NUMBERS_V_empty_n => simConfig_BLOCK_NUMB_3_empty_n,
        simConfig_BLOCK_NUMBERS_V_read => calc_U0_simConfig_BLOCK_NUMBERS_V_read,
        simConfig_rowsToSimulate_V_out_din => calc_U0_simConfig_rowsToSimulate_V_out_din,
        simConfig_rowsToSimulate_V_out_full_n => simConfig_rowsToSimu_2_full_n,
        simConfig_rowsToSimulate_V_out_write => calc_U0_simConfig_rowsToSimulate_V_out_write,
        simConfig_BLOCK_NUMBERS_V_out_din => calc_U0_simConfig_BLOCK_NUMBERS_V_out_din,
        simConfig_BLOCK_NUMBERS_V_out_full_n => simConfig_BLOCK_NUMB_2_full_n,
        simConfig_BLOCK_NUMBERS_V_out_write => calc_U0_simConfig_BLOCK_NUMBERS_V_out_write,
        processedData_V_data_dout => processedData_V_data_dout,
        processedData_V_data_empty_n => processedData_V_data_empty_n,
        processedData_V_data_read => calc_U0_processedData_V_data_read,
        processedData_V_data_1_dout => processedData_V_data_1_dout,
        processedData_V_data_1_empty_n => processedData_V_data_1_empty_n,
        processedData_V_data_1_read => calc_U0_processedData_V_data_1_read,
        processedData_V_data_2_dout => processedData_V_data_2_dout,
        processedData_V_data_2_empty_n => processedData_V_data_2_empty_n,
        processedData_V_data_2_read => calc_U0_processedData_V_data_2_read,
        processedData_V_data_3_dout => processedData_V_data_3_dout,
        processedData_V_data_3_empty_n => processedData_V_data_3_empty_n,
        processedData_V_data_3_read => calc_U0_processedData_V_data_3_read,
        fixedData_V_data_dout => fixedData_V_data_dout,
        fixedData_V_data_empty_n => fixedData_V_data_empty_n,
        fixedData_V_data_read => calc_U0_fixedData_V_data_read,
        fixedData_V_tlast_V_dout => fixedData_V_tlast_V_dout,
        fixedData_V_tlast_V_empty_n => fixedData_V_tlast_V_empty_n,
        fixedData_V_tlast_V_read => calc_U0_fixedData_V_tlast_V_read,
        V_V_data_0_din => calc_U0_V_V_data_0_din,
        V_V_data_0_full_n => V_V_data_0_full_n,
        V_V_data_0_write => calc_U0_V_V_data_0_write,
        V_V_data_1_din => calc_U0_V_V_data_1_din,
        V_V_data_1_full_n => V_V_data_1_full_n,
        V_V_data_1_write => calc_U0_V_V_data_1_write,
        V_V_data_2_din => calc_U0_V_V_data_2_din,
        V_V_data_2_full_n => V_V_data_2_full_n,
        V_V_data_2_write => calc_U0_V_V_data_2_write,
        V_V_data_3_din => calc_U0_V_V_data_3_din,
        V_V_data_3_full_n => V_V_data_3_full_n,
        V_V_data_3_write => calc_U0_V_V_data_3_write,
        F_V_data_0_din => calc_U0_F_V_data_0_din,
        F_V_data_0_full_n => F_V_data_0_full_n,
        F_V_data_0_write => calc_U0_F_V_data_0_write,
        F_V_data_1_din => calc_U0_F_V_data_1_din,
        F_V_data_1_full_n => F_V_data_1_full_n,
        F_V_data_1_write => calc_U0_F_V_data_1_write,
        F_V_data_2_din => calc_U0_F_V_data_2_din,
        F_V_data_2_full_n => F_V_data_2_full_n,
        F_V_data_2_write => calc_U0_F_V_data_2_write,
        F_V_data_3_din => calc_U0_F_V_data_3_din,
        F_V_data_3_full_n => F_V_data_3_full_n,
        F_V_data_3_write => calc_U0_F_V_data_3_write);

    acc_U0 : component acc
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => acc_U0_ap_start,
        start_full_n => start_for_I_calc_U0_full_n,
        ap_done => acc_U0_ap_done,
        ap_continue => acc_U0_ap_continue,
        ap_idle => acc_U0_ap_idle,
        ap_ready => acc_U0_ap_ready,
        start_out => acc_U0_start_out,
        start_write => acc_U0_start_write,
        simConfig_rowsToSimulate_V_dout => simConfig_rowsToSimu_2_dout,
        simConfig_rowsToSimulate_V_empty_n => simConfig_rowsToSimu_2_empty_n,
        simConfig_rowsToSimulate_V_read => acc_U0_simConfig_rowsToSimulate_V_read,
        simConfig_BLOCK_NUMBERS_V_dout => simConfig_BLOCK_NUMB_2_dout,
        simConfig_BLOCK_NUMBERS_V_empty_n => simConfig_BLOCK_NUMB_2_empty_n,
        simConfig_BLOCK_NUMBERS_V_read => acc_U0_simConfig_BLOCK_NUMBERS_V_read,
        simConfig_rowsToSimulate_V_out_din => acc_U0_simConfig_rowsToSimulate_V_out_din,
        simConfig_rowsToSimulate_V_out_full_n => simConfig_rowsToSimu_1_full_n,
        simConfig_rowsToSimulate_V_out_write => acc_U0_simConfig_rowsToSimulate_V_out_write,
        simConfig_BLOCK_NUMBERS_V_out_din => acc_U0_simConfig_BLOCK_NUMBERS_V_out_din,
        simConfig_BLOCK_NUMBERS_V_out_full_n => simConfig_BLOCK_NUMB_1_full_n,
        simConfig_BLOCK_NUMBERS_V_out_write => acc_U0_simConfig_BLOCK_NUMBERS_V_out_write,
        F_V_data_0_dout => F_V_data_0_dout,
        F_V_data_0_empty_n => F_V_data_0_empty_n,
        F_V_data_0_read => acc_U0_F_V_data_0_read,
        F_V_data_1_dout => F_V_data_1_dout,
        F_V_data_1_empty_n => F_V_data_1_empty_n,
        F_V_data_1_read => acc_U0_F_V_data_1_read,
        F_V_data_2_dout => F_V_data_2_dout,
        F_V_data_2_empty_n => F_V_data_2_empty_n,
        F_V_data_2_read => acc_U0_F_V_data_2_read,
        F_V_data_3_dout => F_V_data_3_dout,
        F_V_data_3_empty_n => F_V_data_3_empty_n,
        F_V_data_3_read => acc_U0_F_V_data_3_read,
        V_V_data_0_dout => V_V_data_0_dout,
        V_V_data_0_empty_n => V_V_data_0_empty_n,
        V_V_data_0_read => acc_U0_V_V_data_0_read,
        V_V_data_1_dout => V_V_data_1_dout,
        V_V_data_1_empty_n => V_V_data_1_empty_n,
        V_V_data_1_read => acc_U0_V_V_data_1_read,
        V_V_data_2_dout => V_V_data_2_dout,
        V_V_data_2_empty_n => V_V_data_2_empty_n,
        V_V_data_2_read => acc_U0_V_V_data_2_read,
        V_V_data_3_dout => V_V_data_3_dout,
        V_V_data_3_empty_n => V_V_data_3_empty_n,
        V_V_data_3_read => acc_U0_V_V_data_3_read,
        C_data_V_data_0_dout => C_data_V_data_0_dout,
        C_data_V_data_0_empty_n => C_data_V_data_0_empty_n,
        C_data_V_data_0_read => acc_U0_C_data_V_data_0_read,
        C_data_V_data_1_dout => C_data_V_data_1_dout,
        C_data_V_data_1_empty_n => C_data_V_data_1_empty_n,
        C_data_V_data_1_read => acc_U0_C_data_V_data_1_read,
        C_data_V_data_2_dout => C_data_V_data_2_dout,
        C_data_V_data_2_empty_n => C_data_V_data_2_empty_n,
        C_data_V_data_2_read => acc_U0_C_data_V_data_2_read,
        C_data_V_data_3_dout => C_data_V_data_3_dout,
        C_data_V_data_3_empty_n => C_data_V_data_3_empty_n,
        C_data_V_data_3_read => acc_U0_C_data_V_data_3_read,
        F_acc_V_data_0_din => acc_U0_F_acc_V_data_0_din,
        F_acc_V_data_0_full_n => F_acc_V_data_0_full_n,
        F_acc_V_data_0_write => acc_U0_F_acc_V_data_0_write,
        F_acc_V_data_1_din => acc_U0_F_acc_V_data_1_din,
        F_acc_V_data_1_full_n => F_acc_V_data_1_full_n,
        F_acc_V_data_1_write => acc_U0_F_acc_V_data_1_write,
        F_acc_V_data_2_din => acc_U0_F_acc_V_data_2_din,
        F_acc_V_data_2_full_n => F_acc_V_data_2_full_n,
        F_acc_V_data_2_write => acc_U0_F_acc_V_data_2_write,
        F_acc_V_data_3_din => acc_U0_F_acc_V_data_3_din,
        F_acc_V_data_3_full_n => F_acc_V_data_3_full_n,
        F_acc_V_data_3_write => acc_U0_F_acc_V_data_3_write,
        V_acc_V_data_0_din => acc_U0_V_acc_V_data_0_din,
        V_acc_V_data_0_full_n => V_acc_V_data_0_full_n,
        V_acc_V_data_0_write => acc_U0_V_acc_V_data_0_write,
        V_acc_V_data_1_din => acc_U0_V_acc_V_data_1_din,
        V_acc_V_data_1_full_n => V_acc_V_data_1_full_n,
        V_acc_V_data_1_write => acc_U0_V_acc_V_data_1_write,
        V_acc_V_data_2_din => acc_U0_V_acc_V_data_2_din,
        V_acc_V_data_2_full_n => V_acc_V_data_2_full_n,
        V_acc_V_data_2_write => acc_U0_V_acc_V_data_2_write,
        V_acc_V_data_3_din => acc_U0_V_acc_V_data_3_din,
        V_acc_V_data_3_full_n => V_acc_V_data_3_full_n,
        V_acc_V_data_3_write => acc_U0_V_acc_V_data_3_write);

    I_calc_U0 : component I_calc
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => I_calc_U0_ap_start,
        ap_done => I_calc_U0_ap_done,
        ap_continue => I_calc_U0_ap_continue,
        ap_idle => I_calc_U0_ap_idle,
        ap_ready => I_calc_U0_ap_ready,
        output_r_TDATA => I_calc_U0_output_r_TDATA,
        output_r_TVALID => I_calc_U0_output_r_TVALID,
        output_r_TREADY => output_r_TREADY,
        output_r_TLAST => I_calc_U0_output_r_TLAST,
        simConfig_rowsToSimulate_V_dout => simConfig_rowsToSimu_1_dout,
        simConfig_rowsToSimulate_V_empty_n => simConfig_rowsToSimu_1_empty_n,
        simConfig_rowsToSimulate_V_read => I_calc_U0_simConfig_rowsToSimulate_V_read,
        simConfig_BLOCK_NUMBERS_V_dout => simConfig_BLOCK_NUMB_1_dout,
        simConfig_BLOCK_NUMBERS_V_empty_n => simConfig_BLOCK_NUMB_1_empty_n,
        simConfig_BLOCK_NUMBERS_V_read => I_calc_U0_simConfig_BLOCK_NUMBERS_V_read,
        F_acc_V_data_0_dout => F_acc_V_data_0_dout,
        F_acc_V_data_0_empty_n => F_acc_V_data_0_empty_n,
        F_acc_V_data_0_read => I_calc_U0_F_acc_V_data_0_read,
        F_acc_V_data_1_dout => F_acc_V_data_1_dout,
        F_acc_V_data_1_empty_n => F_acc_V_data_1_empty_n,
        F_acc_V_data_1_read => I_calc_U0_F_acc_V_data_1_read,
        F_acc_V_data_2_dout => F_acc_V_data_2_dout,
        F_acc_V_data_2_empty_n => F_acc_V_data_2_empty_n,
        F_acc_V_data_2_read => I_calc_U0_F_acc_V_data_2_read,
        F_acc_V_data_3_dout => F_acc_V_data_3_dout,
        F_acc_V_data_3_empty_n => F_acc_V_data_3_empty_n,
        F_acc_V_data_3_read => I_calc_U0_F_acc_V_data_3_read,
        V_acc_V_data_0_dout => V_acc_V_data_0_dout,
        V_acc_V_data_0_empty_n => V_acc_V_data_0_empty_n,
        V_acc_V_data_0_read => I_calc_U0_V_acc_V_data_0_read,
        V_acc_V_data_1_dout => V_acc_V_data_1_dout,
        V_acc_V_data_1_empty_n => V_acc_V_data_1_empty_n,
        V_acc_V_data_1_read => I_calc_U0_V_acc_V_data_1_read,
        V_acc_V_data_2_dout => V_acc_V_data_2_dout,
        V_acc_V_data_2_empty_n => V_acc_V_data_2_empty_n,
        V_acc_V_data_2_read => I_calc_U0_V_acc_V_data_2_read,
        V_acc_V_data_3_dout => V_acc_V_data_3_dout,
        V_acc_V_data_3_empty_n => V_acc_V_data_3_empty_n,
        V_acc_V_data_3_read => I_calc_U0_V_acc_V_data_3_read);

    simConfig_rowBegin_V_U : component fifo_w27_d3_A_x
    port map (
        clk => ap_clk,
        reset => ap_rst,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => execute_entry195_U0_simConfig_rowBegin_V_out_din,
        if_full_n => simConfig_rowBegin_V_full_n,
        if_write => execute_entry195_U0_simConfig_rowBegin_V_out_write,
        if_dout => simConfig_rowBegin_V_dout,
        if_empty_n => simConfig_rowBegin_V_empty_n,
        if_read => V_read_U0_simConfig_rowBegin_V_read);

    simConfig_rowEnd_V_c_U : component fifo_w27_d3_A_x
    port map (
        clk => ap_clk,
        reset => ap_rst,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => execute_entry195_U0_simConfig_rowEnd_V_out_din,
        if_full_n => simConfig_rowEnd_V_c_full_n,
        if_write => execute_entry195_U0_simConfig_rowEnd_V_out_write,
        if_dout => simConfig_rowEnd_V_c_dout,
        if_empty_n => simConfig_rowEnd_V_c_empty_n,
        if_read => V_read_U0_simConfig_rowEnd_V_read);

    simConfig_rowsToSimu_5_U : component fifo_w27_d2_A_x
    port map (
        clk => ap_clk,
        reset => ap_rst,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => execute_entry195_U0_simConfig_rowsToSimulate_V_out_din,
        if_full_n => simConfig_rowsToSimu_5_full_n,
        if_write => execute_entry195_U0_simConfig_rowsToSimulate_V_out_write,
        if_dout => simConfig_rowsToSimu_5_dout,
        if_empty_n => simConfig_rowsToSimu_5_empty_n,
        if_read => blockControl_U0_simConfig_rowsToSimulate_V_read);

    simConfig_rowsToSimu_4_U : component fifo_w27_d3_A_x
    port map (
        clk => ap_clk,
        reset => ap_rst,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => execute_entry195_U0_simConfig_rowsToSimulate_V_out1_din,
        if_full_n => simConfig_rowsToSimu_4_full_n,
        if_write => execute_entry195_U0_simConfig_rowsToSimulate_V_out1_write,
        if_dout => simConfig_rowsToSimu_4_dout,
        if_empty_n => simConfig_rowsToSimu_4_empty_n,
        if_read => V_read_U0_simConfig_rowsToSimulate_V_read);

    simConfig_BLOCK_NUMB_5_U : component fifo_w27_d2_A_x
    port map (
        clk => ap_clk,
        reset => ap_rst,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => execute_entry195_U0_simConfig_BLOCK_NUMBERS_V_out_din,
        if_full_n => simConfig_BLOCK_NUMB_5_full_n,
        if_write => execute_entry195_U0_simConfig_BLOCK_NUMBERS_V_out_write,
        if_dout => simConfig_BLOCK_NUMB_5_dout,
        if_empty_n => simConfig_BLOCK_NUMB_5_empty_n,
        if_read => blockControl_U0_simConfig_BLOCK_NUMBERS_V_read);

    simConfig_BLOCK_NUMB_4_U : component fifo_w27_d3_A_x
    port map (
        clk => ap_clk,
        reset => ap_rst,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => execute_entry195_U0_simConfig_BLOCK_NUMBERS_V_out2_din,
        if_full_n => simConfig_BLOCK_NUMB_4_full_n,
        if_write => execute_entry195_U0_simConfig_BLOCK_NUMBERS_V_out2_write,
        if_dout => simConfig_BLOCK_NUMB_4_dout,
        if_empty_n => simConfig_BLOCK_NUMB_4_empty_n,
        if_read => V_read_U0_simConfig_BLOCK_NUMBERS_V_read);

    size_c_U : component fifo_w32_d2_A_x
    port map (
        clk => ap_clk,
        reset => ap_rst,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => execute_entry195_U0_size_out_din,
        if_full_n => size_c_full_n,
        if_write => execute_entry195_U0_size_out_write,
        if_dout => size_c_dout,
        if_empty_n => size_c_empty_n,
        if_read => execute_Block_codeRe_U0_size_read);

    size_c17_U : component fifo_w32_d2_A_x
    port map (
        clk => ap_clk,
        reset => ap_rst,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => execute_entry195_U0_size_out3_din,
        if_full_n => size_c17_full_n,
        if_write => execute_entry195_U0_size_out3_write,
        if_dout => size_c17_dout,
        if_empty_n => size_c17_empty_n,
        if_read => blockControl_U0_V_SIZE_read);

    size_assign_channel_U : component fifo_w32_d2_A_x
    port map (
        clk => ap_clk,
        reset => ap_rst,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => execute_Block_codeRe_U0_ap_return,
        if_full_n => size_assign_channel_full_n,
        if_write => execute_Block_codeRe_U0_ap_done,
        if_dout => size_assign_channel_dout,
        if_empty_n => size_assign_channel_empty_n,
        if_read => V_read_U0_ap_ready);

    V_data_V_data_0_U : component fifo_w32_d128_A
    port map (
        clk => ap_clk,
        reset => ap_rst,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => blockControl_U0_V_data_V_data_0_din,
        if_full_n => V_data_V_data_0_full_n,
        if_write => blockControl_U0_V_data_V_data_0_write,
        if_dout => V_data_V_data_0_dout,
        if_empty_n => V_data_V_data_0_empty_n,
        if_read => V_read_U0_V_data_V_data_0_read);

    V_data_V_data_1_U : component fifo_w32_d128_A
    port map (
        clk => ap_clk,
        reset => ap_rst,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => blockControl_U0_V_data_V_data_1_din,
        if_full_n => V_data_V_data_1_full_n,
        if_write => blockControl_U0_V_data_V_data_1_write,
        if_dout => V_data_V_data_1_dout,
        if_empty_n => V_data_V_data_1_empty_n,
        if_read => V_read_U0_V_data_V_data_1_read);

    V_data_V_data_2_U : component fifo_w32_d128_A
    port map (
        clk => ap_clk,
        reset => ap_rst,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => blockControl_U0_V_data_V_data_2_din,
        if_full_n => V_data_V_data_2_full_n,
        if_write => blockControl_U0_V_data_V_data_2_write,
        if_dout => V_data_V_data_2_dout,
        if_empty_n => V_data_V_data_2_empty_n,
        if_read => V_read_U0_V_data_V_data_2_read);

    V_data_V_data_3_U : component fifo_w32_d128_A
    port map (
        clk => ap_clk,
        reset => ap_rst,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => blockControl_U0_V_data_V_data_3_din,
        if_full_n => V_data_V_data_3_full_n,
        if_write => blockControl_U0_V_data_V_data_3_write,
        if_dout => V_data_V_data_3_dout,
        if_empty_n => V_data_V_data_3_empty_n,
        if_read => V_read_U0_V_data_V_data_3_read);

    C_data_V_data_0_U : component fifo_w32_d128_A
    port map (
        clk => ap_clk,
        reset => ap_rst,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => blockControl_U0_C_data_V_data_0_din,
        if_full_n => C_data_V_data_0_full_n,
        if_write => blockControl_U0_C_data_V_data_0_write,
        if_dout => C_data_V_data_0_dout,
        if_empty_n => C_data_V_data_0_empty_n,
        if_read => acc_U0_C_data_V_data_0_read);

    C_data_V_data_1_U : component fifo_w32_d128_A
    port map (
        clk => ap_clk,
        reset => ap_rst,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => blockControl_U0_C_data_V_data_1_din,
        if_full_n => C_data_V_data_1_full_n,
        if_write => blockControl_U0_C_data_V_data_1_write,
        if_dout => C_data_V_data_1_dout,
        if_empty_n => C_data_V_data_1_empty_n,
        if_read => acc_U0_C_data_V_data_1_read);

    C_data_V_data_2_U : component fifo_w32_d128_A
    port map (
        clk => ap_clk,
        reset => ap_rst,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => blockControl_U0_C_data_V_data_2_din,
        if_full_n => C_data_V_data_2_full_n,
        if_write => blockControl_U0_C_data_V_data_2_write,
        if_dout => C_data_V_data_2_dout,
        if_empty_n => C_data_V_data_2_empty_n,
        if_read => acc_U0_C_data_V_data_2_read);

    C_data_V_data_3_U : component fifo_w32_d128_A
    port map (
        clk => ap_clk,
        reset => ap_rst,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => blockControl_U0_C_data_V_data_3_din,
        if_full_n => C_data_V_data_3_full_n,
        if_write => blockControl_U0_C_data_V_data_3_write,
        if_dout => C_data_V_data_3_dout,
        if_empty_n => C_data_V_data_3_empty_n,
        if_read => acc_U0_C_data_V_data_3_read);

    simConfig_rowsToSimu_3_U : component fifo_w27_d2_A_x
    port map (
        clk => ap_clk,
        reset => ap_rst,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => V_read_U0_simConfig_rowsToSimulate_V_out_din,
        if_full_n => simConfig_rowsToSimu_3_full_n,
        if_write => V_read_U0_simConfig_rowsToSimulate_V_out_write,
        if_dout => simConfig_rowsToSimu_3_dout,
        if_empty_n => simConfig_rowsToSimu_3_empty_n,
        if_read => calc_U0_simConfig_rowsToSimulate_V_read);

    simConfig_BLOCK_NUMB_3_U : component fifo_w27_d2_A_x
    port map (
        clk => ap_clk,
        reset => ap_rst,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => V_read_U0_simConfig_BLOCK_NUMBERS_V_out_din,
        if_full_n => simConfig_BLOCK_NUMB_3_full_n,
        if_write => V_read_U0_simConfig_BLOCK_NUMBERS_V_out_write,
        if_dout => simConfig_BLOCK_NUMB_3_dout,
        if_empty_n => simConfig_BLOCK_NUMB_3_empty_n,
        if_read => calc_U0_simConfig_BLOCK_NUMBERS_V_read);

    fixedData_V_data_U : component fifo_w32_d128_A
    port map (
        clk => ap_clk,
        reset => ap_rst,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => V_read_U0_fixedData_V_data_din,
        if_full_n => fixedData_V_data_full_n,
        if_write => V_read_U0_fixedData_V_data_write,
        if_dout => fixedData_V_data_dout,
        if_empty_n => fixedData_V_data_empty_n,
        if_read => calc_U0_fixedData_V_data_read);

    fixedData_V_tlast_V_U : component fifo_w1_d128_A
    port map (
        clk => ap_clk,
        reset => ap_rst,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => V_read_U0_fixedData_V_tlast_V_din,
        if_full_n => fixedData_V_tlast_V_full_n,
        if_write => V_read_U0_fixedData_V_tlast_V_write,
        if_dout => fixedData_V_tlast_V_dout,
        if_empty_n => fixedData_V_tlast_V_empty_n,
        if_read => calc_U0_fixedData_V_tlast_V_read);

    processedData_V_data_U : component fifo_w32_d128_A
    port map (
        clk => ap_clk,
        reset => ap_rst,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => V_read_U0_processedData_V_data_din,
        if_full_n => processedData_V_data_full_n,
        if_write => V_read_U0_processedData_V_data_write,
        if_dout => processedData_V_data_dout,
        if_empty_n => processedData_V_data_empty_n,
        if_read => calc_U0_processedData_V_data_read);

    processedData_V_data_1_U : component fifo_w32_d128_A
    port map (
        clk => ap_clk,
        reset => ap_rst,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => V_read_U0_processedData_V_data_1_din,
        if_full_n => processedData_V_data_1_full_n,
        if_write => V_read_U0_processedData_V_data_1_write,
        if_dout => processedData_V_data_1_dout,
        if_empty_n => processedData_V_data_1_empty_n,
        if_read => calc_U0_processedData_V_data_1_read);

    processedData_V_data_2_U : component fifo_w32_d128_A
    port map (
        clk => ap_clk,
        reset => ap_rst,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => V_read_U0_processedData_V_data_2_din,
        if_full_n => processedData_V_data_2_full_n,
        if_write => V_read_U0_processedData_V_data_2_write,
        if_dout => processedData_V_data_2_dout,
        if_empty_n => processedData_V_data_2_empty_n,
        if_read => calc_U0_processedData_V_data_2_read);

    processedData_V_data_3_U : component fifo_w32_d128_A
    port map (
        clk => ap_clk,
        reset => ap_rst,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => V_read_U0_processedData_V_data_3_din,
        if_full_n => processedData_V_data_3_full_n,
        if_write => V_read_U0_processedData_V_data_3_write,
        if_dout => processedData_V_data_3_dout,
        if_empty_n => processedData_V_data_3_empty_n,
        if_read => calc_U0_processedData_V_data_3_read);

    simConfig_rowsToSimu_2_U : component fifo_w27_d2_A_x
    port map (
        clk => ap_clk,
        reset => ap_rst,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => calc_U0_simConfig_rowsToSimulate_V_out_din,
        if_full_n => simConfig_rowsToSimu_2_full_n,
        if_write => calc_U0_simConfig_rowsToSimulate_V_out_write,
        if_dout => simConfig_rowsToSimu_2_dout,
        if_empty_n => simConfig_rowsToSimu_2_empty_n,
        if_read => acc_U0_simConfig_rowsToSimulate_V_read);

    simConfig_BLOCK_NUMB_2_U : component fifo_w27_d2_A_x
    port map (
        clk => ap_clk,
        reset => ap_rst,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => calc_U0_simConfig_BLOCK_NUMBERS_V_out_din,
        if_full_n => simConfig_BLOCK_NUMB_2_full_n,
        if_write => calc_U0_simConfig_BLOCK_NUMBERS_V_out_write,
        if_dout => simConfig_BLOCK_NUMB_2_dout,
        if_empty_n => simConfig_BLOCK_NUMB_2_empty_n,
        if_read => acc_U0_simConfig_BLOCK_NUMBERS_V_read);

    V_V_data_0_U : component fifo_w32_d128_A
    port map (
        clk => ap_clk,
        reset => ap_rst,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => calc_U0_V_V_data_0_din,
        if_full_n => V_V_data_0_full_n,
        if_write => calc_U0_V_V_data_0_write,
        if_dout => V_V_data_0_dout,
        if_empty_n => V_V_data_0_empty_n,
        if_read => acc_U0_V_V_data_0_read);

    V_V_data_1_U : component fifo_w32_d128_A
    port map (
        clk => ap_clk,
        reset => ap_rst,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => calc_U0_V_V_data_1_din,
        if_full_n => V_V_data_1_full_n,
        if_write => calc_U0_V_V_data_1_write,
        if_dout => V_V_data_1_dout,
        if_empty_n => V_V_data_1_empty_n,
        if_read => acc_U0_V_V_data_1_read);

    V_V_data_2_U : component fifo_w32_d128_A
    port map (
        clk => ap_clk,
        reset => ap_rst,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => calc_U0_V_V_data_2_din,
        if_full_n => V_V_data_2_full_n,
        if_write => calc_U0_V_V_data_2_write,
        if_dout => V_V_data_2_dout,
        if_empty_n => V_V_data_2_empty_n,
        if_read => acc_U0_V_V_data_2_read);

    V_V_data_3_U : component fifo_w32_d128_A
    port map (
        clk => ap_clk,
        reset => ap_rst,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => calc_U0_V_V_data_3_din,
        if_full_n => V_V_data_3_full_n,
        if_write => calc_U0_V_V_data_3_write,
        if_dout => V_V_data_3_dout,
        if_empty_n => V_V_data_3_empty_n,
        if_read => acc_U0_V_V_data_3_read);

    F_V_data_0_U : component fifo_w32_d128_A
    port map (
        clk => ap_clk,
        reset => ap_rst,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => calc_U0_F_V_data_0_din,
        if_full_n => F_V_data_0_full_n,
        if_write => calc_U0_F_V_data_0_write,
        if_dout => F_V_data_0_dout,
        if_empty_n => F_V_data_0_empty_n,
        if_read => acc_U0_F_V_data_0_read);

    F_V_data_1_U : component fifo_w32_d128_A
    port map (
        clk => ap_clk,
        reset => ap_rst,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => calc_U0_F_V_data_1_din,
        if_full_n => F_V_data_1_full_n,
        if_write => calc_U0_F_V_data_1_write,
        if_dout => F_V_data_1_dout,
        if_empty_n => F_V_data_1_empty_n,
        if_read => acc_U0_F_V_data_1_read);

    F_V_data_2_U : component fifo_w32_d128_A
    port map (
        clk => ap_clk,
        reset => ap_rst,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => calc_U0_F_V_data_2_din,
        if_full_n => F_V_data_2_full_n,
        if_write => calc_U0_F_V_data_2_write,
        if_dout => F_V_data_2_dout,
        if_empty_n => F_V_data_2_empty_n,
        if_read => acc_U0_F_V_data_2_read);

    F_V_data_3_U : component fifo_w32_d128_A
    port map (
        clk => ap_clk,
        reset => ap_rst,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => calc_U0_F_V_data_3_din,
        if_full_n => F_V_data_3_full_n,
        if_write => calc_U0_F_V_data_3_write,
        if_dout => F_V_data_3_dout,
        if_empty_n => F_V_data_3_empty_n,
        if_read => acc_U0_F_V_data_3_read);

    simConfig_rowsToSimu_1_U : component fifo_w27_d2_A_x
    port map (
        clk => ap_clk,
        reset => ap_rst,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => acc_U0_simConfig_rowsToSimulate_V_out_din,
        if_full_n => simConfig_rowsToSimu_1_full_n,
        if_write => acc_U0_simConfig_rowsToSimulate_V_out_write,
        if_dout => simConfig_rowsToSimu_1_dout,
        if_empty_n => simConfig_rowsToSimu_1_empty_n,
        if_read => I_calc_U0_simConfig_rowsToSimulate_V_read);

    simConfig_BLOCK_NUMB_1_U : component fifo_w27_d2_A_x
    port map (
        clk => ap_clk,
        reset => ap_rst,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => acc_U0_simConfig_BLOCK_NUMBERS_V_out_din,
        if_full_n => simConfig_BLOCK_NUMB_1_full_n,
        if_write => acc_U0_simConfig_BLOCK_NUMBERS_V_out_write,
        if_dout => simConfig_BLOCK_NUMB_1_dout,
        if_empty_n => simConfig_BLOCK_NUMB_1_empty_n,
        if_read => I_calc_U0_simConfig_BLOCK_NUMBERS_V_read);

    F_acc_V_data_0_U : component fifo_w32_d128_A
    port map (
        clk => ap_clk,
        reset => ap_rst,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => acc_U0_F_acc_V_data_0_din,
        if_full_n => F_acc_V_data_0_full_n,
        if_write => acc_U0_F_acc_V_data_0_write,
        if_dout => F_acc_V_data_0_dout,
        if_empty_n => F_acc_V_data_0_empty_n,
        if_read => I_calc_U0_F_acc_V_data_0_read);

    F_acc_V_data_1_U : component fifo_w32_d128_A
    port map (
        clk => ap_clk,
        reset => ap_rst,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => acc_U0_F_acc_V_data_1_din,
        if_full_n => F_acc_V_data_1_full_n,
        if_write => acc_U0_F_acc_V_data_1_write,
        if_dout => F_acc_V_data_1_dout,
        if_empty_n => F_acc_V_data_1_empty_n,
        if_read => I_calc_U0_F_acc_V_data_1_read);

    F_acc_V_data_2_U : component fifo_w32_d128_A
    port map (
        clk => ap_clk,
        reset => ap_rst,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => acc_U0_F_acc_V_data_2_din,
        if_full_n => F_acc_V_data_2_full_n,
        if_write => acc_U0_F_acc_V_data_2_write,
        if_dout => F_acc_V_data_2_dout,
        if_empty_n => F_acc_V_data_2_empty_n,
        if_read => I_calc_U0_F_acc_V_data_2_read);

    F_acc_V_data_3_U : component fifo_w32_d128_A
    port map (
        clk => ap_clk,
        reset => ap_rst,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => acc_U0_F_acc_V_data_3_din,
        if_full_n => F_acc_V_data_3_full_n,
        if_write => acc_U0_F_acc_V_data_3_write,
        if_dout => F_acc_V_data_3_dout,
        if_empty_n => F_acc_V_data_3_empty_n,
        if_read => I_calc_U0_F_acc_V_data_3_read);

    V_acc_V_data_0_U : component fifo_w32_d128_A
    port map (
        clk => ap_clk,
        reset => ap_rst,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => acc_U0_V_acc_V_data_0_din,
        if_full_n => V_acc_V_data_0_full_n,
        if_write => acc_U0_V_acc_V_data_0_write,
        if_dout => V_acc_V_data_0_dout,
        if_empty_n => V_acc_V_data_0_empty_n,
        if_read => I_calc_U0_V_acc_V_data_0_read);

    V_acc_V_data_1_U : component fifo_w32_d128_A
    port map (
        clk => ap_clk,
        reset => ap_rst,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => acc_U0_V_acc_V_data_1_din,
        if_full_n => V_acc_V_data_1_full_n,
        if_write => acc_U0_V_acc_V_data_1_write,
        if_dout => V_acc_V_data_1_dout,
        if_empty_n => V_acc_V_data_1_empty_n,
        if_read => I_calc_U0_V_acc_V_data_1_read);

    V_acc_V_data_2_U : component fifo_w32_d128_A
    port map (
        clk => ap_clk,
        reset => ap_rst,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => acc_U0_V_acc_V_data_2_din,
        if_full_n => V_acc_V_data_2_full_n,
        if_write => acc_U0_V_acc_V_data_2_write,
        if_dout => V_acc_V_data_2_dout,
        if_empty_n => V_acc_V_data_2_empty_n,
        if_read => I_calc_U0_V_acc_V_data_2_read);

    V_acc_V_data_3_U : component fifo_w32_d128_A
    port map (
        clk => ap_clk,
        reset => ap_rst,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => acc_U0_V_acc_V_data_3_din,
        if_full_n => V_acc_V_data_3_full_n,
        if_write => acc_U0_V_acc_V_data_3_write,
        if_dout => V_acc_V_data_3_dout,
        if_empty_n => V_acc_V_data_3_empty_n,
        if_read => I_calc_U0_V_acc_V_data_3_read);

    start_for_execute_Block_codeRe_U0_U : component start_for_execute_Block_codeRe_U0
    port map (
        clk => ap_clk,
        reset => ap_rst,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => start_for_execute_Block_codeRe_U0_din,
        if_full_n => start_for_execute_Block_codeRe_U0_full_n,
        if_write => execute_entry195_U0_start_write,
        if_dout => start_for_execute_Block_codeRe_U0_dout,
        if_empty_n => start_for_execute_Block_codeRe_U0_empty_n,
        if_read => execute_Block_codeRe_U0_ap_ready);

    start_for_acc_U0_U : component start_for_acc_U0
    port map (
        clk => ap_clk,
        reset => ap_rst,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => start_for_acc_U0_din,
        if_full_n => start_for_acc_U0_full_n,
        if_write => blockControl_U0_start_write,
        if_dout => start_for_acc_U0_dout,
        if_empty_n => start_for_acc_U0_empty_n,
        if_read => acc_U0_ap_ready);

    start_for_calc_U0_U : component start_for_calc_U0
    port map (
        clk => ap_clk,
        reset => ap_rst,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => start_for_calc_U0_din,
        if_full_n => start_for_calc_U0_full_n,
        if_write => V_read_U0_start_write,
        if_dout => start_for_calc_U0_dout,
        if_empty_n => start_for_calc_U0_empty_n,
        if_read => calc_U0_ap_ready);

    start_for_I_calc_U0_U : component start_for_I_calc_U0
    port map (
        clk => ap_clk,
        reset => ap_rst,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => start_for_I_calc_U0_din,
        if_full_n => start_for_I_calc_U0_full_n,
        if_write => acc_U0_start_write,
        if_dout => start_for_I_calc_U0_dout,
        if_empty_n => start_for_I_calc_U0_empty_n,
        if_read => I_calc_U0_ap_ready);





    ap_sync_reg_blockControl_U0_ap_ready_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_sync_reg_blockControl_U0_ap_ready <= ap_const_logic_0;
            else
                if (((ap_sync_ready and ap_start) = ap_const_logic_1)) then 
                    ap_sync_reg_blockControl_U0_ap_ready <= ap_const_logic_0;
                else 
                    ap_sync_reg_blockControl_U0_ap_ready <= ap_sync_blockControl_U0_ap_ready;
                end if; 
            end if;
        end if;
    end process;


    ap_sync_reg_execute_entry195_U0_ap_ready_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_sync_reg_execute_entry195_U0_ap_ready <= ap_const_logic_0;
            else
                if (((ap_sync_ready and ap_start) = ap_const_logic_1)) then 
                    ap_sync_reg_execute_entry195_U0_ap_ready <= ap_const_logic_0;
                else 
                    ap_sync_reg_execute_entry195_U0_ap_ready <= ap_sync_execute_entry195_U0_ap_ready;
                end if; 
            end if;
        end if;
    end process;


    blockControl_U0_ap_ready_count_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((blockControl_U0_ap_ready = ap_const_logic_0) and (ap_sync_ready = ap_const_logic_1))) then 
                blockControl_U0_ap_ready_count <= std_logic_vector(unsigned(blockControl_U0_ap_ready_count) - unsigned(ap_const_lv2_1));
            elsif (((ap_sync_ready = ap_const_logic_0) and (blockControl_U0_ap_ready = ap_const_logic_1))) then 
                blockControl_U0_ap_ready_count <= std_logic_vector(unsigned(blockControl_U0_ap_ready_count) + unsigned(ap_const_lv2_1));
            end if; 
        end if;
    end process;

    execute_entry195_U0_ap_ready_count_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_sync_ready = ap_const_logic_1) and (execute_entry195_U0_ap_ready = ap_const_logic_0))) then 
                execute_entry195_U0_ap_ready_count <= std_logic_vector(unsigned(execute_entry195_U0_ap_ready_count) - unsigned(ap_const_lv2_1));
            elsif (((ap_sync_ready = ap_const_logic_0) and (execute_entry195_U0_ap_ready = ap_const_logic_1))) then 
                execute_entry195_U0_ap_ready_count <= std_logic_vector(unsigned(execute_entry195_U0_ap_ready_count) + unsigned(ap_const_lv2_1));
            end if; 
        end if;
    end process;
    I_calc_U0_ap_continue <= ap_continue;
    I_calc_U0_ap_start <= start_for_I_calc_U0_empty_n;
    I_calc_U0_start_full_n <= ap_const_logic_1;
    I_calc_U0_start_write <= ap_const_logic_0;
    V_read_U0_ap_continue <= ap_const_logic_1;
    V_read_U0_ap_start <= size_assign_channel_empty_n;
    acc_U0_ap_continue <= ap_const_logic_1;
    acc_U0_ap_start <= start_for_acc_U0_empty_n;
    ap_channel_done_size_assign_channel <= execute_Block_codeRe_U0_ap_done;
    ap_done <= I_calc_U0_ap_done;
    ap_idle <= ((size_assign_channel_empty_n xor ap_const_logic_1) and execute_entry195_U0_ap_idle and execute_Block_codeRe_U0_ap_idle and calc_U0_ap_idle and blockControl_U0_ap_idle and acc_U0_ap_idle and V_read_U0_ap_idle and I_calc_U0_ap_idle);
    ap_ready <= ap_sync_ready;
    ap_sync_blockControl_U0_ap_ready <= (blockControl_U0_ap_ready or ap_sync_reg_blockControl_U0_ap_ready);
    ap_sync_continue <= ap_continue;
    ap_sync_done <= I_calc_U0_ap_done;
    ap_sync_execute_entry195_U0_ap_ready <= (execute_entry195_U0_ap_ready or ap_sync_reg_execute_entry195_U0_ap_ready);
    ap_sync_ready <= (ap_sync_execute_entry195_U0_ap_ready and ap_sync_blockControl_U0_ap_ready);
    blockControl_U0_ap_continue <= ap_const_logic_1;
    blockControl_U0_ap_start <= ((ap_sync_reg_blockControl_U0_ap_ready xor ap_const_logic_1) and ap_start);
    calc_U0_ap_continue <= ap_const_logic_1;
    calc_U0_ap_start <= start_for_calc_U0_empty_n;
    calc_U0_start_full_n <= ap_const_logic_1;
    calc_U0_start_write <= ap_const_logic_0;
    execute_Block_codeRe_U0_ap_continue <= size_assign_channel_full_n;
    execute_Block_codeRe_U0_ap_start <= start_for_execute_Block_codeRe_U0_empty_n;
    execute_Block_codeRe_U0_start_full_n <= ap_const_logic_1;
    execute_Block_codeRe_U0_start_write <= ap_const_logic_0;
    execute_entry195_U0_ap_continue <= ap_const_logic_1;
    execute_entry195_U0_ap_start <= ((ap_sync_reg_execute_entry195_U0_ap_ready xor ap_const_logic_1) and ap_start);
    input_V_data_TREADY <= blockControl_U0_input_V_data_TREADY;
    output_r_TDATA <= I_calc_U0_output_r_TDATA;
    output_r_TLAST <= I_calc_U0_output_r_TLAST;
    output_r_TVALID <= I_calc_U0_output_r_TVALID;
    start_for_I_calc_U0_din <= (0=>ap_const_logic_1, others=>'-');
    start_for_acc_U0_din <= (0=>ap_const_logic_1, others=>'-');
    start_for_calc_U0_din <= (0=>ap_const_logic_1, others=>'-');
    start_for_execute_Block_codeRe_U0_din <= (0=>ap_const_logic_1, others=>'-');
end behav;
