/******************************************************************************
*
* Copyright (C) 2009 - 2014 Xilinx, Inc.  All rights reserved.
*
* Permission is hereby granted, free of charge, to any person obtaining a copy
* of this software and associated documentation files (the "Software"), to deal
* in the Software without restriction, including without limitation the rights
* to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
* copies of the Software, and to permit persons to whom the Software is
* furnished to do so, subject to the following conditions:
*
* The above copyright notice and this permission notice shall be included in
* all copies or substantial portions of the Software.
*
* Use of the Software is limited solely to applications:
* (a) running on a Xilinx device, or
* (b) that interact with a Xilinx device through a bus or interconnect.
*
* THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
* IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
* FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL
* XILINX  BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY,
* WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF
* OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
* SOFTWARE.
*
* Except as contained in this notice, the name of the Xilinx shall not be used
* in advertising or otherwise to promote the sale, use or other dealings in
* this Software without prior written authorization from Xilinx.
*
******************************************************************************/

/*
 * helloworld.c: simple test application
 *
 * This application configures UART 16550 to baud rate 9600.
 * PS7 UART (Zynq) is not initialized by this application, since
 * bootrom/bsp configures it to baud rate 115200
 *
 * ------------------------------------------------
 * | UART TYPE   BAUD RATE                        |
 * ------------------------------------------------
 *   uartns550   9600
 *   uartlite    Configurable only in HW design
 *   ps7_uart    115200 (configured by bootrom/bsp)
 */

#include <stdio.h>
//#include "platform.h"
#include "xil_printf.h"
/* Xilinx includes. */
#include "xil_printf.h"
#include "xparameters.h"
#include "xtime_l.h"

int result;
long factorial_num;
long sub_num;
long div_num;
long add_num;
long mul_num;
XTime ttotal_1, tStart_1, tEnd_1;
double ttotal_d_1;
int iteration = 100;
int no_random = 1;
int maxi_iter = 20;
int a_sum = 306;
int b_sum = 136;
int a_mul = 29;
int b_mul = 77;
int a_div = 958;
int b_div = 207;
int a_sub = 786;
int b_sub =165;
int a_fact = 10;

/*-----------------------------------------------------------*/
int loop1 (int max_iter, int a, int b) {
	int value;
    for(int i=0; i < max_iter; i++){
    	value = value + a + b;
    }
    return value;
}

int loop2 (int max_iter, int a, int b){
    int value;
    for (int i=0; i< max_iter; i++){
    	for(int j=0; j<max_iter; j++){
    		value = value + a + b;
    	}
    }
    return value;
}

int loop3 (int max_iter, int a, int b){
    int value;
    for (int i=0; i< max_iter; i++){
    	for(int j=0; j<max_iter; j++){
    		for(int j=0; j<max_iter; j++){
    			value = value + a + b;
    		}
    	}
    }
    return value;
}

static void task_0()
{
    	int a;
    	int b;
        if(no_random){
        	a = a_sum;
        	b = b_sum;
        }else{
            a = rand() % 1000;
            b = rand() % 1000;
        }

        xil_printf( "For Sum Loop1: Data A is %i and Data B is %i\r\n", a,b);
        result = loop1(maxi_iter,a,b);
        xil_printf( "Result of Loop1 add is: %i\r\n", result );
        add_num++;
        if(add_num == iteration){
        	return 0;
        }
}

static void task_1()
{

    	int a;
    	int b;
        if(no_random){
        	a = a_sum;
        	b = b_sum;
        }else{
            a = rand() % 1000;
            b = rand() % 1000;
        }

        xil_printf( "For Sum Loop2: Data A is %i and Data B is %i\r\n", a,b);
        result = loop2(maxi_iter,a,b);
        xil_printf( "Result of Loop2 add is: %i\r\n", result );
        mul_num++;
        if(mul_num == iteration){
            return 0;
        }
}

static void task_2()
{
    	int a;
    	int b;


        if(no_random){
        	a = a_sum;
        	b = b_sum;
        }else{
            a = rand() % 1000;
            b = rand() % 1000;
        }

        xil_printf( "For Loop3 Sum: Data A is %i and Data B is %i\r\n", a,b);
        result = loop3(maxi_iter,a,b);
        xil_printf( "Result of Loop3 add is: %i\r\n", result );
        div_num++;
        if(div_num == iteration){
            return 0;
        }
}



int main()
{
//    init_platform();
    XTime_GetTime(&tStart_1);
    print("CCCC Hello World\n\r");
    for (int i =0; i < iteration; i++){
    	task_0();
    	task_1();
    	task_2();
    }

    XTime_GetTime(&tEnd_1);
    ttotal_1 = tEnd_1 - tStart_1;
    ttotal_d_1 = 1.0 * ttotal_1 / (COUNTS_PER_SECOND/1000000);

    printf("Number of loop1 did during this execution: %lu\n", add_num);
    printf("Number of loop2 did during this execution: %lu\n", mul_num);
    printf("Number of loop3  did during this execution: %lu\n", div_num);
    printf("NO RTOS Output 1 took %llu clock cycles.\n", (ttotal_1));
    printf("NO RTOS Output 1 took %.2f us.\n", ttotal_d_1);


   // cleanup_platform();
    return 0;
}

