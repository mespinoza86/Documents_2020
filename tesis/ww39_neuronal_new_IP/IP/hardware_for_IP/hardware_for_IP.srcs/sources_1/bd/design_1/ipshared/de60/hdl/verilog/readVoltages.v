// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2016.4
// Copyright (C) 1986-2017 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module readVoltages (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_continue,
        ap_idle,
        ap_ready,
        voltagesBackup_address0,
        voltagesBackup_ce0,
        voltagesBackup_we0,
        voltagesBackup_d0,
        voltagesBackup_address1,
        voltagesBackup_ce1,
        voltagesBackup_we1,
        voltagesBackup_d1,
        V_SIZE_dout,
        V_SIZE_empty_n,
        V_SIZE_read,
        V_data_V_data_0_dout,
        V_data_V_data_0_empty_n,
        V_data_V_data_0_read,
        V_data_V_data_1_dout,
        V_data_V_data_1_empty_n,
        V_data_V_data_1_read,
        V_data_V_data_2_dout,
        V_data_V_data_2_empty_n,
        V_data_V_data_2_read,
        V_data_V_data_3_dout,
        V_data_V_data_3_empty_n,
        V_data_V_data_3_read
);

parameter    ap_ST_fsm_state1 = 3'b1;
parameter    ap_ST_fsm_state2 = 3'b10;
parameter    ap_ST_fsm_state3 = 3'b100;
parameter    ap_const_lv32_0 = 32'b00000000000000000000000000000000;
parameter    ap_const_lv32_1 = 32'b1;
parameter    ap_const_lv32_2 = 32'b10;
parameter    ap_const_lv27_0 = 27'b000000000000000000000000000;
parameter    ap_const_lv28_1 = 28'b1;
parameter    ap_const_lv27_2 = 27'b10;
parameter    ap_const_lv27_3 = 27'b11;
parameter    ap_const_lv27_4 = 27'b100;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
input   ap_continue;
output   ap_idle;
output   ap_ready;
output  [13:0] voltagesBackup_address0;
output   voltagesBackup_ce0;
output   voltagesBackup_we0;
output  [31:0] voltagesBackup_d0;
output  [13:0] voltagesBackup_address1;
output   voltagesBackup_ce1;
output   voltagesBackup_we1;
output  [31:0] voltagesBackup_d1;
input  [31:0] V_SIZE_dout;
input   V_SIZE_empty_n;
output   V_SIZE_read;
input  [31:0] V_data_V_data_0_dout;
input   V_data_V_data_0_empty_n;
output   V_data_V_data_0_read;
input  [31:0] V_data_V_data_1_dout;
input   V_data_V_data_1_empty_n;
output   V_data_V_data_1_read;
input  [31:0] V_data_V_data_2_dout;
input   V_data_V_data_2_empty_n;
output   V_data_V_data_2_read;
input  [31:0] V_data_V_data_3_dout;
input   V_data_V_data_3_empty_n;
output   V_data_V_data_3_read;

reg ap_done;
reg ap_idle;
reg ap_ready;
reg[13:0] voltagesBackup_address0;
reg voltagesBackup_ce0;
reg voltagesBackup_we0;
reg[31:0] voltagesBackup_d0;
reg[13:0] voltagesBackup_address1;
reg voltagesBackup_ce1;
reg voltagesBackup_we1;
reg[31:0] voltagesBackup_d1;
reg V_SIZE_read;

reg    ap_done_reg;
(* fsm_encoding = "none" *) reg   [2:0] ap_CS_fsm;
wire   [0:0] ap_CS_fsm_state1;
reg    V_SIZE_blk_n;
reg    V_data_V_data_0_blk_n;
wire   [0:0] ap_CS_fsm_state2;
wire   [0:0] tmp_11_i_i_fu_135_p2;
reg    V_data_V_data_1_blk_n;
reg    V_data_V_data_2_blk_n;
reg    V_data_V_data_3_blk_n;
reg   [31:0] V_SIZE_read_reg_206;
reg    ap_condition_84;
reg   [31:0] tmp_data_2_reg_214;
wire    V_data_V_data_00_status;
reg   [31:0] tmp_data_3_reg_219;
wire   [26:0] i_V_fu_200_p2;
wire   [0:0] ap_CS_fsm_state3;
reg   [26:0] p_i_i_reg_119;
wire  signed [63:0] tmp_19_i_i_fu_162_p1;
wire  signed [63:0] tmp_19_1_i_i_fu_173_p1;
wire  signed [63:0] tmp_19_2_i_i_fu_184_p1;
wire  signed [63:0] tmp_19_3_i_i_fu_195_p1;
reg    V_data_V_data_00_update;
wire  signed [31:0] tmp_i_i_fu_131_p1;
wire  signed [27:0] lhs_V_fu_158_p1;
wire   [27:0] r_V_i_i_fu_167_p2;
wire   [26:0] r_V_1_i_i_fu_178_p2;
wire   [26:0] r_V_2_i_i_fu_189_p2;
reg   [2:0] ap_NS_fsm;

// power-on initialization
initial begin
#0 ap_done_reg = 1'b0;
#0 ap_CS_fsm = 3'b1;
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_done_reg <= 1'b0;
    end else begin
        if ((1'b1 == ap_continue)) begin
            ap_done_reg <= 1'b0;
        end else if (((1'b1 == ap_CS_fsm_state2) & (tmp_11_i_i_fu_135_p2 == 1'b0) & ~(~(tmp_11_i_i_fu_135_p2 == 1'b0) & (V_data_V_data_00_status == 1'b0)))) begin
            ap_done_reg <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        p_i_i_reg_119 <= i_V_fu_200_p2;
    end else if (((ap_CS_fsm_state1 == 1'b1) & ~(ap_condition_84 == 1'b1))) begin
        p_i_i_reg_119 <= ap_const_lv27_0;
    end
end

always @ (posedge ap_clk) begin
    if (((ap_CS_fsm_state1 == 1'b1) & ~(ap_condition_84 == 1'b1))) begin
        V_SIZE_read_reg_206 <= V_SIZE_dout;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state2) & ~(tmp_11_i_i_fu_135_p2 == 1'b0) & ~(~(tmp_11_i_i_fu_135_p2 == 1'b0) & (V_data_V_data_00_status == 1'b0)))) begin
        tmp_data_2_reg_214 <= V_data_V_data_2_dout;
        tmp_data_3_reg_219 <= V_data_V_data_3_dout;
    end
end

always @ (*) begin
    if (((ap_CS_fsm_state1 == 1'b1) & ~((ap_start == 1'b0) | (ap_done_reg == 1'b1)))) begin
        V_SIZE_blk_n = V_SIZE_empty_n;
    end else begin
        V_SIZE_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((ap_CS_fsm_state1 == 1'b1) & ~(ap_condition_84 == 1'b1))) begin
        V_SIZE_read = 1'b1;
    end else begin
        V_SIZE_read = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state2) & ~(tmp_11_i_i_fu_135_p2 == 1'b0) & ~(~(tmp_11_i_i_fu_135_p2 == 1'b0) & (V_data_V_data_00_status == 1'b0)))) begin
        V_data_V_data_00_update = 1'b1;
    end else begin
        V_data_V_data_00_update = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state2) & ~(tmp_11_i_i_fu_135_p2 == 1'b0))) begin
        V_data_V_data_0_blk_n = V_data_V_data_0_empty_n;
    end else begin
        V_data_V_data_0_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state2) & ~(tmp_11_i_i_fu_135_p2 == 1'b0))) begin
        V_data_V_data_1_blk_n = V_data_V_data_1_empty_n;
    end else begin
        V_data_V_data_1_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state2) & ~(tmp_11_i_i_fu_135_p2 == 1'b0))) begin
        V_data_V_data_2_blk_n = V_data_V_data_2_empty_n;
    end else begin
        V_data_V_data_2_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state2) & ~(tmp_11_i_i_fu_135_p2 == 1'b0))) begin
        V_data_V_data_3_blk_n = V_data_V_data_3_empty_n;
    end else begin
        V_data_V_data_3_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((1'b1 == ap_done_reg) | ((1'b1 == ap_CS_fsm_state2) & (tmp_11_i_i_fu_135_p2 == 1'b0) & ~(~(tmp_11_i_i_fu_135_p2 == 1'b0) & (V_data_V_data_00_status == 1'b0))))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_start) & (ap_CS_fsm_state1 == 1'b1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state2) & (tmp_11_i_i_fu_135_p2 == 1'b0) & ~(~(tmp_11_i_i_fu_135_p2 == 1'b0) & (V_data_V_data_00_status == 1'b0)))) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        voltagesBackup_address0 = tmp_19_2_i_i_fu_184_p1;
    end else if ((1'b1 == ap_CS_fsm_state2)) begin
        voltagesBackup_address0 = tmp_19_i_i_fu_162_p1;
    end else begin
        voltagesBackup_address0 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        voltagesBackup_address1 = tmp_19_3_i_i_fu_195_p1;
    end else if ((1'b1 == ap_CS_fsm_state2)) begin
        voltagesBackup_address1 = tmp_19_1_i_i_fu_173_p1;
    end else begin
        voltagesBackup_address1 = 'bx;
    end
end

always @ (*) begin
    if ((((1'b1 == ap_CS_fsm_state2) & ~(~(tmp_11_i_i_fu_135_p2 == 1'b0) & (V_data_V_data_00_status == 1'b0))) | (1'b1 == ap_CS_fsm_state3))) begin
        voltagesBackup_ce0 = 1'b1;
    end else begin
        voltagesBackup_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((((1'b1 == ap_CS_fsm_state2) & ~(~(tmp_11_i_i_fu_135_p2 == 1'b0) & (V_data_V_data_00_status == 1'b0))) | (1'b1 == ap_CS_fsm_state3))) begin
        voltagesBackup_ce1 = 1'b1;
    end else begin
        voltagesBackup_ce1 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        voltagesBackup_d0 = tmp_data_2_reg_214;
    end else if ((1'b1 == ap_CS_fsm_state2)) begin
        voltagesBackup_d0 = V_data_V_data_0_dout;
    end else begin
        voltagesBackup_d0 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        voltagesBackup_d1 = tmp_data_3_reg_219;
    end else if ((1'b1 == ap_CS_fsm_state2)) begin
        voltagesBackup_d1 = V_data_V_data_1_dout;
    end else begin
        voltagesBackup_d1 = 'bx;
    end
end

always @ (*) begin
    if ((((1'b1 == ap_CS_fsm_state2) & ~(tmp_11_i_i_fu_135_p2 == 1'b0) & ~(~(tmp_11_i_i_fu_135_p2 == 1'b0) & (V_data_V_data_00_status == 1'b0))) | (1'b1 == ap_CS_fsm_state3))) begin
        voltagesBackup_we0 = 1'b1;
    end else begin
        voltagesBackup_we0 = 1'b0;
    end
end

always @ (*) begin
    if ((((1'b1 == ap_CS_fsm_state2) & ~(tmp_11_i_i_fu_135_p2 == 1'b0) & ~(~(tmp_11_i_i_fu_135_p2 == 1'b0) & (V_data_V_data_00_status == 1'b0))) | (1'b1 == ap_CS_fsm_state3))) begin
        voltagesBackup_we1 = 1'b1;
    end else begin
        voltagesBackup_we1 = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if (~(ap_condition_84 == 1'b1)) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_state2 : begin
            if (((tmp_11_i_i_fu_135_p2 == 1'b0) & ~(~(tmp_11_i_i_fu_135_p2 == 1'b0) & (V_data_V_data_00_status == 1'b0)))) begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end else if ((~(tmp_11_i_i_fu_135_p2 == 1'b0) & ~(~(tmp_11_i_i_fu_135_p2 == 1'b0) & (V_data_V_data_00_status == 1'b0)))) begin
                ap_NS_fsm = ap_ST_fsm_state3;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end
        end
        ap_ST_fsm_state3 : begin
            ap_NS_fsm = ap_ST_fsm_state2;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign V_data_V_data_00_status = (V_data_V_data_0_empty_n & V_data_V_data_1_empty_n & V_data_V_data_2_empty_n & V_data_V_data_3_empty_n);

assign V_data_V_data_0_read = V_data_V_data_00_update;

assign V_data_V_data_1_read = V_data_V_data_00_update;

assign V_data_V_data_2_read = V_data_V_data_00_update;

assign V_data_V_data_3_read = V_data_V_data_00_update;

assign ap_CS_fsm_state1 = ap_CS_fsm[ap_const_lv32_0];

assign ap_CS_fsm_state2 = ap_CS_fsm[ap_const_lv32_1];

assign ap_CS_fsm_state3 = ap_CS_fsm[ap_const_lv32_2];

always @ (*) begin
    ap_condition_84 = ((ap_start == 1'b0) | (ap_done_reg == 1'b1) | (V_SIZE_empty_n == 1'b0));
end

assign i_V_fu_200_p2 = (p_i_i_reg_119 + ap_const_lv27_4);

assign lhs_V_fu_158_p1 = $signed(p_i_i_reg_119);

assign r_V_1_i_i_fu_178_p2 = (p_i_i_reg_119 | ap_const_lv27_2);

assign r_V_2_i_i_fu_189_p2 = (p_i_i_reg_119 | ap_const_lv27_3);

assign r_V_i_i_fu_167_p2 = (lhs_V_fu_158_p1 | ap_const_lv28_1);

assign tmp_11_i_i_fu_135_p2 = (($signed(tmp_i_i_fu_131_p1) < $signed(V_SIZE_read_reg_206)) ? 1'b1 : 1'b0);

assign tmp_19_1_i_i_fu_173_p1 = $signed(r_V_i_i_fu_167_p2);

assign tmp_19_2_i_i_fu_184_p1 = $signed(r_V_1_i_i_fu_178_p2);

assign tmp_19_3_i_i_fu_195_p1 = $signed(r_V_2_i_i_fu_189_p2);

assign tmp_19_i_i_fu_162_p1 = $signed(p_i_i_reg_119);

assign tmp_i_i_fu_131_p1 = $signed(p_i_i_reg_119);

endmodule //readVoltages
