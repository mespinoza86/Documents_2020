// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2016.4
// Copyright (C) 1986-2017 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module getTotalCurrent (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        row_V,
        output_r_TDATA,
        output_r_TVALID,
        output_r_TREADY,
        output_r_TLAST,
        RowOfBlocks_V_read,
        simConfig_rowsToSimulate_V_read,
        F_temp_data_address0,
        F_temp_data_ce0,
        F_temp_data_q0,
        V_temp_data_address0,
        V_temp_data_ce0,
        V_temp_data_q0
);

parameter    ap_ST_fsm_state1 = 22'b1;
parameter    ap_ST_fsm_state2 = 22'b10;
parameter    ap_ST_fsm_state3 = 22'b100;
parameter    ap_ST_fsm_state4 = 22'b1000;
parameter    ap_ST_fsm_state5 = 22'b10000;
parameter    ap_ST_fsm_state6 = 22'b100000;
parameter    ap_ST_fsm_state7 = 22'b1000000;
parameter    ap_ST_fsm_state8 = 22'b10000000;
parameter    ap_ST_fsm_state9 = 22'b100000000;
parameter    ap_ST_fsm_state10 = 22'b1000000000;
parameter    ap_ST_fsm_state11 = 22'b10000000000;
parameter    ap_ST_fsm_state12 = 22'b100000000000;
parameter    ap_ST_fsm_state13 = 22'b1000000000000;
parameter    ap_ST_fsm_state14 = 22'b10000000000000;
parameter    ap_ST_fsm_state15 = 22'b100000000000000;
parameter    ap_ST_fsm_state16 = 22'b1000000000000000;
parameter    ap_ST_fsm_state17 = 22'b10000000000000000;
parameter    ap_ST_fsm_state18 = 22'b100000000000000000;
parameter    ap_ST_fsm_state19 = 22'b1000000000000000000;
parameter    ap_ST_fsm_state20 = 22'b10000000000000000000;
parameter    ap_ST_fsm_state21 = 22'b100000000000000000000;
parameter    ap_ST_fsm_state22 = 22'b1000000000000000000000;
parameter    ap_const_lv32_0 = 32'b00000000000000000000000000000000;
parameter    ap_const_lv32_15 = 32'b10101;
parameter    ap_const_lv32_1 = 32'b1;
parameter    ap_const_lv32_2 = 32'b10;
parameter    ap_const_lv32_B = 32'b1011;
parameter    ap_const_lv32_13 = 32'b10011;
parameter    ap_const_lv32_14 = 32'b10100;
parameter    ap_const_lv32_C = 32'b1100;
parameter    ap_const_lv64_3FE999999999999A = 64'b11111111101001100110011001100110011001100110011001100110011010;
parameter    ap_const_lv32_3 = 32'b11;
parameter    ap_const_lv64_3FC999999999999A = 64'b11111111001001100110011001100110011001100110011001100110011010;
parameter    ap_const_lv3_3 = 3'b11;
parameter    ap_const_lv28_FFFFFFF = 28'b1111111111111111111111111111;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
input  [2:0] row_V;
output  [31:0] output_r_TDATA;
output   output_r_TVALID;
input   output_r_TREADY;
output  [0:0] output_r_TLAST;
input  [25:0] RowOfBlocks_V_read;
input  [26:0] simConfig_rowsToSimulate_V_read;
output  [1:0] F_temp_data_address0;
output   F_temp_data_ce0;
input  [31:0] F_temp_data_q0;
output  [1:0] V_temp_data_address0;
output   V_temp_data_ce0;
input  [31:0] V_temp_data_q0;

reg ap_done;
reg ap_idle;
reg ap_ready;
reg output_r_TVALID;
reg F_temp_data_ce0;
reg V_temp_data_ce0;

(* fsm_encoding = "none" *) reg   [21:0] ap_CS_fsm;
wire   [0:0] ap_CS_fsm_state1;
reg    output_r_TDATA_blk_n;
wire   [0:0] ap_CS_fsm_state22;
wire   [0:0] tmp_i_fu_124_p2;
reg   [0:0] tmp_i_reg_165;
reg   [31:0] F_temp_data_load_reg_170;
wire   [0:0] ap_CS_fsm_state2;
reg   [31:0] V_temp_data_load_reg_175;
wire   [63:0] tmp_s_fu_98_p1;
reg   [63:0] tmp_s_reg_180;
wire   [0:0] ap_CS_fsm_state3;
wire   [63:0] tmp_2_fu_101_p1;
reg   [63:0] tmp_2_reg_185;
wire   [63:0] grp_fu_108_p2;
reg   [63:0] tmp_1_reg_190;
wire   [0:0] ap_CS_fsm_state12;
wire   [63:0] grp_fu_113_p2;
reg   [63:0] tmp_3_reg_195;
wire   [63:0] grp_fu_104_p2;
reg   [63:0] tmp_4_reg_200;
wire   [0:0] ap_CS_fsm_state20;
wire   [0:0] tmp_10_i_fu_144_p2;
reg   [0:0] tmp_10_i_reg_205;
wire   [0:0] ap_CS_fsm_state21;
wire   [63:0] tmp_fu_118_p1;
wire   [31:0] grp_fu_94_p1;
reg    ap_reg_ioackin_output_r_TREADY;
reg    ap_sig_ioackin_output_r_TREADY;
wire   [0:0] ap_CS_fsm_state13;
wire   [0:0] ap_CS_fsm_state4;
wire  signed [27:0] lhs_V_i_cast_fu_130_p1;
wire   [27:0] tmp_i_cast_fu_140_p1;
wire   [27:0] r_V_fu_134_p2;
reg    grp_fu_94_ce;
reg   [21:0] ap_NS_fsm;

// power-on initialization
initial begin
#0 ap_CS_fsm = 22'b1;
#0 ap_reg_ioackin_output_r_TREADY = 1'b0;
end

GapJunctionIP_fptxdS #(
    .ID( 1 ),
    .NUM_STAGE( 2 ),
    .din0_WIDTH( 64 ),
    .dout_WIDTH( 32 ))
GapJunctionIP_fptxdS_U188(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(tmp_4_reg_200),
    .ce(grp_fu_94_ce),
    .dout(grp_fu_94_p1)
);

GapJunctionIP_fpeyd2 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 32 ),
    .dout_WIDTH( 64 ))
GapJunctionIP_fpeyd2_U189(
    .din0(F_temp_data_load_reg_170),
    .dout(tmp_s_fu_98_p1)
);

GapJunctionIP_fpeyd2 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 32 ),
    .dout_WIDTH( 64 ))
GapJunctionIP_fpeyd2_U190(
    .din0(V_temp_data_load_reg_175),
    .dout(tmp_2_fu_101_p1)
);

GapJunctionIP_dadzec #(
    .ID( 1 ),
    .NUM_STAGE( 8 ),
    .din0_WIDTH( 64 ),
    .din1_WIDTH( 64 ),
    .dout_WIDTH( 64 ))
GapJunctionIP_dadzec_U191(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(tmp_1_reg_190),
    .din1(tmp_3_reg_195),
    .ce(1'b1),
    .dout(grp_fu_104_p2)
);

GapJunctionIP_dmuAem #(
    .ID( 1 ),
    .NUM_STAGE( 9 ),
    .din0_WIDTH( 64 ),
    .din1_WIDTH( 64 ),
    .dout_WIDTH( 64 ))
GapJunctionIP_dmuAem_U192(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(tmp_s_reg_180),
    .din1(ap_const_lv64_3FE999999999999A),
    .ce(1'b1),
    .dout(grp_fu_108_p2)
);

GapJunctionIP_dmuAem #(
    .ID( 1 ),
    .NUM_STAGE( 9 ),
    .din0_WIDTH( 64 ),
    .din1_WIDTH( 64 ),
    .dout_WIDTH( 64 ))
GapJunctionIP_dmuAem_U193(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(tmp_2_reg_185),
    .din1(ap_const_lv64_3FC999999999999A),
    .ce(1'b1),
    .dout(grp_fu_113_p2)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_reg_ioackin_output_r_TREADY <= 1'b0;
    end else begin
        if (((1'b1 == ap_CS_fsm_state22) & ~(1'b0 == ap_sig_ioackin_output_r_TREADY))) begin
            ap_reg_ioackin_output_r_TREADY <= 1'b0;
        end else if (((1'b1 == ap_CS_fsm_state22) & (1'b1 == output_r_TREADY))) begin
            ap_reg_ioackin_output_r_TREADY <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        F_temp_data_load_reg_170 <= F_temp_data_q0;
        V_temp_data_load_reg_175 <= V_temp_data_q0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state21)) begin
        tmp_10_i_reg_205 <= tmp_10_i_fu_144_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state12)) begin
        tmp_1_reg_190 <= grp_fu_108_p2;
        tmp_3_reg_195 <= grp_fu_113_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        tmp_2_reg_185 <= tmp_2_fu_101_p1;
        tmp_s_reg_180 <= tmp_s_fu_98_p1;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state20)) begin
        tmp_4_reg_200 <= grp_fu_104_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((ap_CS_fsm_state1 == 1'b1) & ~(ap_start == 1'b0))) begin
        tmp_i_reg_165 <= tmp_i_fu_124_p2;
    end
end

always @ (*) begin
    if (((ap_CS_fsm_state1 == 1'b1) & ~(ap_start == 1'b0))) begin
        F_temp_data_ce0 = 1'b1;
    end else begin
        F_temp_data_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_CS_fsm_state1 == 1'b1) & ~(ap_start == 1'b0))) begin
        V_temp_data_ce0 = 1'b1;
    end else begin
        V_temp_data_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((((1'b0 == ap_start) & (ap_CS_fsm_state1 == 1'b1)) | ((1'b1 == ap_CS_fsm_state22) & ~(1'b0 == ap_sig_ioackin_output_r_TREADY)))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_start) & (ap_CS_fsm_state1 == 1'b1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state22) & ~(1'b0 == ap_sig_ioackin_output_r_TREADY))) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if ((1'b0 == ap_reg_ioackin_output_r_TREADY)) begin
        ap_sig_ioackin_output_r_TREADY = output_r_TREADY;
    end else begin
        ap_sig_ioackin_output_r_TREADY = 1'b1;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state21) | ((1'b1 == ap_CS_fsm_state22) & ~(1'b0 == ap_sig_ioackin_output_r_TREADY)))) begin
        grp_fu_94_ce = 1'b1;
    end else begin
        grp_fu_94_ce = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state22)) begin
        output_r_TDATA_blk_n = output_r_TREADY;
    end else begin
        output_r_TDATA_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state22) & (1'b0 == ap_reg_ioackin_output_r_TREADY))) begin
        output_r_TVALID = 1'b1;
    end else begin
        output_r_TVALID = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if (~(ap_start == 1'b0)) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_state2 : begin
            ap_NS_fsm = ap_ST_fsm_state3;
        end
        ap_ST_fsm_state3 : begin
            ap_NS_fsm = ap_ST_fsm_state4;
        end
        ap_ST_fsm_state4 : begin
            ap_NS_fsm = ap_ST_fsm_state5;
        end
        ap_ST_fsm_state5 : begin
            ap_NS_fsm = ap_ST_fsm_state6;
        end
        ap_ST_fsm_state6 : begin
            ap_NS_fsm = ap_ST_fsm_state7;
        end
        ap_ST_fsm_state7 : begin
            ap_NS_fsm = ap_ST_fsm_state8;
        end
        ap_ST_fsm_state8 : begin
            ap_NS_fsm = ap_ST_fsm_state9;
        end
        ap_ST_fsm_state9 : begin
            ap_NS_fsm = ap_ST_fsm_state10;
        end
        ap_ST_fsm_state10 : begin
            ap_NS_fsm = ap_ST_fsm_state11;
        end
        ap_ST_fsm_state11 : begin
            ap_NS_fsm = ap_ST_fsm_state12;
        end
        ap_ST_fsm_state12 : begin
            ap_NS_fsm = ap_ST_fsm_state13;
        end
        ap_ST_fsm_state13 : begin
            ap_NS_fsm = ap_ST_fsm_state14;
        end
        ap_ST_fsm_state14 : begin
            ap_NS_fsm = ap_ST_fsm_state15;
        end
        ap_ST_fsm_state15 : begin
            ap_NS_fsm = ap_ST_fsm_state16;
        end
        ap_ST_fsm_state16 : begin
            ap_NS_fsm = ap_ST_fsm_state17;
        end
        ap_ST_fsm_state17 : begin
            ap_NS_fsm = ap_ST_fsm_state18;
        end
        ap_ST_fsm_state18 : begin
            ap_NS_fsm = ap_ST_fsm_state19;
        end
        ap_ST_fsm_state19 : begin
            ap_NS_fsm = ap_ST_fsm_state20;
        end
        ap_ST_fsm_state20 : begin
            ap_NS_fsm = ap_ST_fsm_state21;
        end
        ap_ST_fsm_state21 : begin
            ap_NS_fsm = ap_ST_fsm_state22;
        end
        ap_ST_fsm_state22 : begin
            if (~(1'b0 == ap_sig_ioackin_output_r_TREADY)) begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state22;
            end
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign F_temp_data_address0 = tmp_fu_118_p1;

assign V_temp_data_address0 = tmp_fu_118_p1;

assign ap_CS_fsm_state1 = ap_CS_fsm[ap_const_lv32_0];

assign ap_CS_fsm_state12 = ap_CS_fsm[ap_const_lv32_B];

assign ap_CS_fsm_state13 = ap_CS_fsm[ap_const_lv32_C];

assign ap_CS_fsm_state2 = ap_CS_fsm[ap_const_lv32_1];

assign ap_CS_fsm_state20 = ap_CS_fsm[ap_const_lv32_13];

assign ap_CS_fsm_state21 = ap_CS_fsm[ap_const_lv32_14];

assign ap_CS_fsm_state22 = ap_CS_fsm[ap_const_lv32_15];

assign ap_CS_fsm_state3 = ap_CS_fsm[ap_const_lv32_2];

assign ap_CS_fsm_state4 = ap_CS_fsm[ap_const_lv32_3];

assign lhs_V_i_cast_fu_130_p1 = $signed(simConfig_rowsToSimulate_V_read);

assign output_r_TDATA = grp_fu_94_p1;

assign output_r_TLAST = (tmp_i_reg_165 & tmp_10_i_reg_205);

assign r_V_fu_134_p2 = ($signed(lhs_V_i_cast_fu_130_p1) + $signed(ap_const_lv28_FFFFFFF));

assign tmp_10_i_fu_144_p2 = ((tmp_i_cast_fu_140_p1 == r_V_fu_134_p2) ? 1'b1 : 1'b0);

assign tmp_fu_118_p1 = row_V;

assign tmp_i_cast_fu_140_p1 = RowOfBlocks_V_read;

assign tmp_i_fu_124_p2 = ((row_V == ap_const_lv3_3) ? 1'b1 : 1'b0);

endmodule //getTotalCurrent
