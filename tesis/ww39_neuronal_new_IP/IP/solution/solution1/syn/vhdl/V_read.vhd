-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
-- Version: 2016.4
-- Copyright (C) 1986-2017 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity V_read is
port (
    ap_start : IN STD_LOGIC;
    start_full_n : IN STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    start_out : OUT STD_LOGIC;
    start_write : OUT STD_LOGIC;
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    simConfig_rowBegin_V_dout : IN STD_LOGIC_VECTOR (26 downto 0);
    simConfig_rowBegin_V_empty_n : IN STD_LOGIC;
    simConfig_rowBegin_V_read : OUT STD_LOGIC;
    simConfig_rowEnd_V_dout : IN STD_LOGIC_VECTOR (26 downto 0);
    simConfig_rowEnd_V_empty_n : IN STD_LOGIC;
    simConfig_rowEnd_V_read : OUT STD_LOGIC;
    simConfig_rowsToSimulate_V_dout : IN STD_LOGIC_VECTOR (26 downto 0);
    simConfig_rowsToSimulate_V_empty_n : IN STD_LOGIC;
    simConfig_rowsToSimulate_V_read : OUT STD_LOGIC;
    simConfig_BLOCK_NUMBERS_V_dout : IN STD_LOGIC_VECTOR (26 downto 0);
    simConfig_BLOCK_NUMBERS_V_empty_n : IN STD_LOGIC;
    simConfig_BLOCK_NUMBERS_V_read : OUT STD_LOGIC;
    V_SIZE_read : IN STD_LOGIC_VECTOR (31 downto 0);
    simConfig_rowsToSimulate_V_out_din : OUT STD_LOGIC_VECTOR (26 downto 0);
    simConfig_rowsToSimulate_V_out_full_n : IN STD_LOGIC;
    simConfig_rowsToSimulate_V_out_write : OUT STD_LOGIC;
    simConfig_BLOCK_NUMBERS_V_out_din : OUT STD_LOGIC_VECTOR (26 downto 0);
    simConfig_BLOCK_NUMBERS_V_out_full_n : IN STD_LOGIC;
    simConfig_BLOCK_NUMBERS_V_out_write : OUT STD_LOGIC;
    V_data_V_data_0_dout : IN STD_LOGIC_VECTOR (31 downto 0);
    V_data_V_data_0_empty_n : IN STD_LOGIC;
    V_data_V_data_0_read : OUT STD_LOGIC;
    V_data_V_data_1_dout : IN STD_LOGIC_VECTOR (31 downto 0);
    V_data_V_data_1_empty_n : IN STD_LOGIC;
    V_data_V_data_1_read : OUT STD_LOGIC;
    V_data_V_data_2_dout : IN STD_LOGIC_VECTOR (31 downto 0);
    V_data_V_data_2_empty_n : IN STD_LOGIC;
    V_data_V_data_2_read : OUT STD_LOGIC;
    V_data_V_data_3_dout : IN STD_LOGIC_VECTOR (31 downto 0);
    V_data_V_data_3_empty_n : IN STD_LOGIC;
    V_data_V_data_3_read : OUT STD_LOGIC;
    fixedData_V_data_din : OUT STD_LOGIC_VECTOR (31 downto 0);
    fixedData_V_data_full_n : IN STD_LOGIC;
    fixedData_V_data_write : OUT STD_LOGIC;
    fixedData_V_tlast_V_din : OUT STD_LOGIC_VECTOR (0 downto 0);
    fixedData_V_tlast_V_full_n : IN STD_LOGIC;
    fixedData_V_tlast_V_write : OUT STD_LOGIC;
    processedData_V_data_din : OUT STD_LOGIC_VECTOR (31 downto 0);
    processedData_V_data_full_n : IN STD_LOGIC;
    processedData_V_data_write : OUT STD_LOGIC;
    processedData_V_data_1_din : OUT STD_LOGIC_VECTOR (31 downto 0);
    processedData_V_data_1_full_n : IN STD_LOGIC;
    processedData_V_data_1_write : OUT STD_LOGIC;
    processedData_V_data_2_din : OUT STD_LOGIC_VECTOR (31 downto 0);
    processedData_V_data_2_full_n : IN STD_LOGIC;
    processedData_V_data_2_write : OUT STD_LOGIC;
    processedData_V_data_3_din : OUT STD_LOGIC_VECTOR (31 downto 0);
    processedData_V_data_3_full_n : IN STD_LOGIC;
    processedData_V_data_3_write : OUT STD_LOGIC;
    V_SIZE_read_ap_vld : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_continue : IN STD_LOGIC );
end;


architecture behav of V_read is 
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_boolean_1 : BOOLEAN := true;
    constant ap_const_lv27_0 : STD_LOGIC_VECTOR (26 downto 0) := "000000000000000000000000000";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv2_0 : STD_LOGIC_VECTOR (1 downto 0) := "00";
    constant ap_const_lv2_1 : STD_LOGIC_VECTOR (1 downto 0) := "01";

    signal real_start : STD_LOGIC;
    signal real_start_status_reg : STD_LOGIC := '0';
    signal internal_ap_ready : STD_LOGIC;
    signal start_once_reg : STD_LOGIC := '0';
    signal start_control_reg : STD_LOGIC := '0';
    signal voltagesBackup_i_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal voltagesBackup_i_q1 : STD_LOGIC_VECTOR (31 downto 0);
    signal voltagesBackup_t_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal voltagesBackup_t_q1 : STD_LOGIC_VECTOR (31 downto 0);
    signal V_read_entry201214_U0_ap_start : STD_LOGIC;
    signal V_read_entry201214_U0_ap_done : STD_LOGIC;
    signal V_read_entry201214_U0_ap_continue : STD_LOGIC;
    signal V_read_entry201214_U0_ap_idle : STD_LOGIC;
    signal V_read_entry201214_U0_ap_ready : STD_LOGIC;
    signal V_read_entry201214_U0_start_out : STD_LOGIC;
    signal V_read_entry201214_U0_start_write : STD_LOGIC;
    signal V_read_entry201214_U0_scalar_simConfig_BLOCK_NUMBERS_V_read : STD_LOGIC;
    signal V_read_entry201214_U0_simConfig_BLOCK_NUMBERS_V_out_din : STD_LOGIC_VECTOR (26 downto 0);
    signal V_read_entry201214_U0_simConfig_BLOCK_NUMBERS_V_out_write : STD_LOGIC;
    signal V_read_entry201214_U0_scalar_simConfig_rowsToSimulate_V_read : STD_LOGIC;
    signal V_read_entry201214_U0_simConfig_rowsToSimulate_V_out_din : STD_LOGIC_VECTOR (26 downto 0);
    signal V_read_entry201214_U0_simConfig_rowsToSimulate_V_out_write : STD_LOGIC;
    signal V_read_entry201214_U0_simConfig_rowBegin_V_read : STD_LOGIC;
    signal V_read_entry201214_U0_simConfig_rowEnd_V_read : STD_LOGIC;
    signal V_read_entry201214_U0_simConfig_rowBegin_V_channel_i_din : STD_LOGIC_VECTOR (26 downto 0);
    signal V_read_entry201214_U0_simConfig_rowBegin_V_channel_i_write : STD_LOGIC;
    signal V_read_entry201214_U0_simConfig_rowEnd_V_channel_i_din : STD_LOGIC_VECTOR (26 downto 0);
    signal V_read_entry201214_U0_simConfig_rowEnd_V_channel_i_write : STD_LOGIC;
    signal V_read_entry201214_U0_simConfig_rowsToSimulate_V_channel_i_din : STD_LOGIC_VECTOR (26 downto 0);
    signal V_read_entry201214_U0_simConfig_rowsToSimulate_V_channel_i_write : STD_LOGIC;
    signal V_read_entry201214_U0_simConfig_BLOCK_NUMBERS_V_channel_i_din : STD_LOGIC_VECTOR (26 downto 0);
    signal V_read_entry201214_U0_simConfig_BLOCK_NUMBERS_V_channel_i_write : STD_LOGIC;
    signal V_read_entry201214_U0_simConfig_BLOCK_NUMBERS_V_channel1_i_din : STD_LOGIC_VECTOR (26 downto 0);
    signal V_read_entry201214_U0_simConfig_BLOCK_NUMBERS_V_channel1_i_write : STD_LOGIC;
    signal V_read_entry201214_U0_V_SIZE_channel_i_din : STD_LOGIC_VECTOR (31 downto 0);
    signal V_read_entry201214_U0_V_SIZE_channel_i_write : STD_LOGIC;
    signal ap_hs_continue : STD_LOGIC;
    signal readVoltages_U0_ap_start : STD_LOGIC;
    signal readVoltages_U0_ap_done : STD_LOGIC;
    signal readVoltages_U0_ap_continue : STD_LOGIC;
    signal readVoltages_U0_ap_idle : STD_LOGIC;
    signal readVoltages_U0_ap_ready : STD_LOGIC;
    signal readVoltages_U0_voltagesBackup_address0 : STD_LOGIC_VECTOR (13 downto 0);
    signal readVoltages_U0_voltagesBackup_ce0 : STD_LOGIC;
    signal readVoltages_U0_voltagesBackup_we0 : STD_LOGIC;
    signal readVoltages_U0_voltagesBackup_d0 : STD_LOGIC_VECTOR (31 downto 0);
    signal readVoltages_U0_voltagesBackup_address1 : STD_LOGIC_VECTOR (13 downto 0);
    signal readVoltages_U0_voltagesBackup_ce1 : STD_LOGIC;
    signal readVoltages_U0_voltagesBackup_we1 : STD_LOGIC;
    signal readVoltages_U0_voltagesBackup_d1 : STD_LOGIC_VECTOR (31 downto 0);
    signal readVoltages_U0_V_SIZE_read : STD_LOGIC;
    signal readVoltages_U0_V_data_V_data_0_read : STD_LOGIC;
    signal readVoltages_U0_V_data_V_data_1_read : STD_LOGIC;
    signal readVoltages_U0_V_data_V_data_2_read : STD_LOGIC;
    signal readVoltages_U0_V_data_V_data_3_read : STD_LOGIC;
    signal ap_channel_done_voltagesBackup : STD_LOGIC;
    signal readVoltages_U0_voltagesBackup_full_n : STD_LOGIC;
    signal indexGeneration_U0_ap_start : STD_LOGIC;
    signal indexGeneration_U0_ap_done : STD_LOGIC;
    signal indexGeneration_U0_ap_continue : STD_LOGIC;
    signal indexGeneration_U0_ap_idle : STD_LOGIC;
    signal indexGeneration_U0_ap_ready : STD_LOGIC;
    signal indexGeneration_U0_simConfig_rowBegin_V_read : STD_LOGIC;
    signal indexGeneration_U0_simConfig_rowEnd_V_read : STD_LOGIC;
    signal indexGeneration_U0_simConfig_BLOCK_NUMBERS_V_read : STD_LOGIC;
    signal indexGeneration_U0_Vi_idx_V_data_V_0_din : STD_LOGIC_VECTOR (26 downto 0);
    signal indexGeneration_U0_Vi_idx_V_data_V_0_write : STD_LOGIC;
    signal indexGeneration_U0_Vi_idx_V_data_V_1_din : STD_LOGIC_VECTOR (26 downto 0);
    signal indexGeneration_U0_Vi_idx_V_data_V_1_write : STD_LOGIC;
    signal indexGeneration_U0_Vi_idx_V_data_V_2_din : STD_LOGIC_VECTOR (26 downto 0);
    signal indexGeneration_U0_Vi_idx_V_data_V_2_write : STD_LOGIC;
    signal indexGeneration_U0_Vi_idx_V_data_V_3_din : STD_LOGIC_VECTOR (26 downto 0);
    signal indexGeneration_U0_Vi_idx_V_data_V_3_write : STD_LOGIC;
    signal indexGeneration_U0_Vj_idx_V_data_V_0_din : STD_LOGIC_VECTOR (26 downto 0);
    signal indexGeneration_U0_Vj_idx_V_data_V_0_write : STD_LOGIC;
    signal indexGeneration_U0_Vj_idx_V_data_V_1_din : STD_LOGIC_VECTOR (26 downto 0);
    signal indexGeneration_U0_Vj_idx_V_data_V_1_write : STD_LOGIC;
    signal indexGeneration_U0_Vj_idx_V_data_V_2_din : STD_LOGIC_VECTOR (26 downto 0);
    signal indexGeneration_U0_Vj_idx_V_data_V_2_write : STD_LOGIC;
    signal indexGeneration_U0_Vj_idx_V_data_V_3_din : STD_LOGIC_VECTOR (26 downto 0);
    signal indexGeneration_U0_Vj_idx_V_data_V_3_write : STD_LOGIC;
    signal writeV2calc_U0_ap_start : STD_LOGIC;
    signal writeV2calc_U0_ap_done : STD_LOGIC;
    signal writeV2calc_U0_ap_continue : STD_LOGIC;
    signal writeV2calc_U0_ap_idle : STD_LOGIC;
    signal writeV2calc_U0_ap_ready : STD_LOGIC;
    signal writeV2calc_U0_voltagesBackup_address0 : STD_LOGIC_VECTOR (13 downto 0);
    signal writeV2calc_U0_voltagesBackup_ce0 : STD_LOGIC;
    signal writeV2calc_U0_voltagesBackup_address1 : STD_LOGIC_VECTOR (13 downto 0);
    signal writeV2calc_U0_voltagesBackup_ce1 : STD_LOGIC;
    signal writeV2calc_U0_simConfig_rowsToSimu_read : STD_LOGIC;
    signal writeV2calc_U0_simConfig_BLOCK_NUMBERS_V_read : STD_LOGIC;
    signal writeV2calc_U0_Vi_idx_V_data_V_0_read : STD_LOGIC;
    signal writeV2calc_U0_Vi_idx_V_data_V_1_read : STD_LOGIC;
    signal writeV2calc_U0_Vi_idx_V_data_V_2_read : STD_LOGIC;
    signal writeV2calc_U0_Vi_idx_V_data_V_3_read : STD_LOGIC;
    signal writeV2calc_U0_fixedData_V_data_din : STD_LOGIC_VECTOR (31 downto 0);
    signal writeV2calc_U0_fixedData_V_data_write : STD_LOGIC;
    signal writeV2calc_U0_fixedData_V_tlast_V_din : STD_LOGIC_VECTOR (0 downto 0);
    signal writeV2calc_U0_fixedData_V_tlast_V_write : STD_LOGIC;
    signal writeV2calc_U0_Vj_idx_V_data_V_0_read : STD_LOGIC;
    signal writeV2calc_U0_Vj_idx_V_data_V_1_read : STD_LOGIC;
    signal writeV2calc_U0_Vj_idx_V_data_V_2_read : STD_LOGIC;
    signal writeV2calc_U0_Vj_idx_V_data_V_3_read : STD_LOGIC;
    signal writeV2calc_U0_processedData_V_data_din : STD_LOGIC_VECTOR (31 downto 0);
    signal writeV2calc_U0_processedData_V_data_write : STD_LOGIC;
    signal writeV2calc_U0_processedData_V_data_1_din : STD_LOGIC_VECTOR (31 downto 0);
    signal writeV2calc_U0_processedData_V_data_1_write : STD_LOGIC;
    signal writeV2calc_U0_processedData_V_data_2_din : STD_LOGIC_VECTOR (31 downto 0);
    signal writeV2calc_U0_processedData_V_data_2_write : STD_LOGIC;
    signal writeV2calc_U0_processedData_V_data_3_din : STD_LOGIC_VECTOR (31 downto 0);
    signal writeV2calc_U0_processedData_V_data_3_write : STD_LOGIC;
    signal voltagesBackup_i_full_n : STD_LOGIC;
    signal voltagesBackup_t_empty_n : STD_LOGIC;
    signal simConfig_rowBegin_V_3_full_n : STD_LOGIC;
    signal simConfig_rowBegin_V_3_dout : STD_LOGIC_VECTOR (26 downto 0);
    signal simConfig_rowBegin_V_3_empty_n : STD_LOGIC;
    signal simConfig_rowEnd_V_c_full_n : STD_LOGIC;
    signal simConfig_rowEnd_V_c_dout : STD_LOGIC_VECTOR (26 downto 0);
    signal simConfig_rowEnd_V_c_empty_n : STD_LOGIC;
    signal simConfig_rowsToSimu_full_n : STD_LOGIC;
    signal simConfig_rowsToSimu_dout : STD_LOGIC_VECTOR (26 downto 0);
    signal simConfig_rowsToSimu_empty_n : STD_LOGIC;
    signal simConfig_BLOCK_NUMB_6_full_n : STD_LOGIC;
    signal simConfig_BLOCK_NUMB_6_dout : STD_LOGIC_VECTOR (26 downto 0);
    signal simConfig_BLOCK_NUMB_6_empty_n : STD_LOGIC;
    signal simConfig_BLOCK_NUMB_full_n : STD_LOGIC;
    signal simConfig_BLOCK_NUMB_dout : STD_LOGIC_VECTOR (26 downto 0);
    signal simConfig_BLOCK_NUMB_empty_n : STD_LOGIC;
    signal V_SIZE_channel_i_full_n : STD_LOGIC;
    signal V_SIZE_channel_i_dout : STD_LOGIC_VECTOR (31 downto 0);
    signal V_SIZE_channel_i_empty_n : STD_LOGIC;
    signal Vi_idx_V_data_V_0_full_n : STD_LOGIC;
    signal Vi_idx_V_data_V_0_dout : STD_LOGIC_VECTOR (26 downto 0);
    signal Vi_idx_V_data_V_0_empty_n : STD_LOGIC;
    signal Vi_idx_V_data_V_1_full_n : STD_LOGIC;
    signal Vi_idx_V_data_V_1_dout : STD_LOGIC_VECTOR (26 downto 0);
    signal Vi_idx_V_data_V_1_empty_n : STD_LOGIC;
    signal Vi_idx_V_data_V_2_full_n : STD_LOGIC;
    signal Vi_idx_V_data_V_2_dout : STD_LOGIC_VECTOR (26 downto 0);
    signal Vi_idx_V_data_V_2_empty_n : STD_LOGIC;
    signal Vi_idx_V_data_V_3_full_n : STD_LOGIC;
    signal Vi_idx_V_data_V_3_dout : STD_LOGIC_VECTOR (26 downto 0);
    signal Vi_idx_V_data_V_3_empty_n : STD_LOGIC;
    signal Vj_idx_V_data_V_0_full_n : STD_LOGIC;
    signal Vj_idx_V_data_V_0_dout : STD_LOGIC_VECTOR (26 downto 0);
    signal Vj_idx_V_data_V_0_empty_n : STD_LOGIC;
    signal Vj_idx_V_data_V_1_full_n : STD_LOGIC;
    signal Vj_idx_V_data_V_1_dout : STD_LOGIC_VECTOR (26 downto 0);
    signal Vj_idx_V_data_V_1_empty_n : STD_LOGIC;
    signal Vj_idx_V_data_V_2_full_n : STD_LOGIC;
    signal Vj_idx_V_data_V_2_dout : STD_LOGIC_VECTOR (26 downto 0);
    signal Vj_idx_V_data_V_2_empty_n : STD_LOGIC;
    signal Vj_idx_V_data_V_3_full_n : STD_LOGIC;
    signal Vj_idx_V_data_V_3_dout : STD_LOGIC_VECTOR (26 downto 0);
    signal Vj_idx_V_data_V_3_empty_n : STD_LOGIC;
    signal ap_hs_done : STD_LOGIC;
    signal ap_reg_V_read_entry201214_U0_ap_done : STD_LOGIC := '0';
    signal ap_reg_writeV2calc_U0_ap_done : STD_LOGIC := '0';
    signal ap_hs_ready : STD_LOGIC;
    signal ap_sync_reg_V_read_entry201214_U0_ap_ready : STD_LOGIC := '0';
    signal ap_sync_V_read_entry201214_U0_ap_ready : STD_LOGIC;
    signal V_read_entry201214_U0_ap_ready_count : STD_LOGIC_VECTOR (1 downto 0) := "00";
    signal ap_sync_reg_readVoltages_U0_ap_ready : STD_LOGIC := '0';
    signal ap_sync_readVoltages_U0_ap_ready : STD_LOGIC;
    signal readVoltages_U0_ap_ready_count : STD_LOGIC_VECTOR (1 downto 0) := "00";
    signal ap_sync_V_read_entry201214_U0_ap_start : STD_LOGIC;
    signal ap_sync_readVoltages_U0_ap_start : STD_LOGIC;
    signal start_for_indexGeneration_U0_din : STD_LOGIC_VECTOR (0 downto 0);
    signal start_for_indexGeneration_U0_full_n : STD_LOGIC;
    signal start_for_indexGeneration_U0_dout : STD_LOGIC_VECTOR (0 downto 0);
    signal start_for_indexGeneration_U0_empty_n : STD_LOGIC;

    component V_read_entry201214 IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        start_full_n : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_continue : IN STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        start_out : OUT STD_LOGIC;
        start_write : OUT STD_LOGIC;
        scalar_simConfig_BLOCK_NUMBERS_V_dout : IN STD_LOGIC_VECTOR (26 downto 0);
        scalar_simConfig_BLOCK_NUMBERS_V_empty_n : IN STD_LOGIC;
        scalar_simConfig_BLOCK_NUMBERS_V_read : OUT STD_LOGIC;
        simConfig_BLOCK_NUMBERS_V_out_din : OUT STD_LOGIC_VECTOR (26 downto 0);
        simConfig_BLOCK_NUMBERS_V_out_full_n : IN STD_LOGIC;
        simConfig_BLOCK_NUMBERS_V_out_write : OUT STD_LOGIC;
        scalar_simConfig_rowsToSimulate_V_dout : IN STD_LOGIC_VECTOR (26 downto 0);
        scalar_simConfig_rowsToSimulate_V_empty_n : IN STD_LOGIC;
        scalar_simConfig_rowsToSimulate_V_read : OUT STD_LOGIC;
        simConfig_rowsToSimulate_V_out_din : OUT STD_LOGIC_VECTOR (26 downto 0);
        simConfig_rowsToSimulate_V_out_full_n : IN STD_LOGIC;
        simConfig_rowsToSimulate_V_out_write : OUT STD_LOGIC;
        simConfig_rowBegin_V_dout : IN STD_LOGIC_VECTOR (26 downto 0);
        simConfig_rowBegin_V_empty_n : IN STD_LOGIC;
        simConfig_rowBegin_V_read : OUT STD_LOGIC;
        simConfig_rowEnd_V_dout : IN STD_LOGIC_VECTOR (26 downto 0);
        simConfig_rowEnd_V_empty_n : IN STD_LOGIC;
        simConfig_rowEnd_V_read : OUT STD_LOGIC;
        p_read : IN STD_LOGIC_VECTOR (31 downto 0);
        simConfig_rowBegin_V_channel_i_din : OUT STD_LOGIC_VECTOR (26 downto 0);
        simConfig_rowBegin_V_channel_i_full_n : IN STD_LOGIC;
        simConfig_rowBegin_V_channel_i_write : OUT STD_LOGIC;
        simConfig_rowEnd_V_channel_i_din : OUT STD_LOGIC_VECTOR (26 downto 0);
        simConfig_rowEnd_V_channel_i_full_n : IN STD_LOGIC;
        simConfig_rowEnd_V_channel_i_write : OUT STD_LOGIC;
        simConfig_rowsToSimulate_V_channel_i_din : OUT STD_LOGIC_VECTOR (26 downto 0);
        simConfig_rowsToSimulate_V_channel_i_full_n : IN STD_LOGIC;
        simConfig_rowsToSimulate_V_channel_i_write : OUT STD_LOGIC;
        simConfig_BLOCK_NUMBERS_V_channel_i_din : OUT STD_LOGIC_VECTOR (26 downto 0);
        simConfig_BLOCK_NUMBERS_V_channel_i_full_n : IN STD_LOGIC;
        simConfig_BLOCK_NUMBERS_V_channel_i_write : OUT STD_LOGIC;
        simConfig_BLOCK_NUMBERS_V_channel1_i_din : OUT STD_LOGIC_VECTOR (26 downto 0);
        simConfig_BLOCK_NUMBERS_V_channel1_i_full_n : IN STD_LOGIC;
        simConfig_BLOCK_NUMBERS_V_channel1_i_write : OUT STD_LOGIC;
        V_SIZE_channel_i_din : OUT STD_LOGIC_VECTOR (31 downto 0);
        V_SIZE_channel_i_full_n : IN STD_LOGIC;
        V_SIZE_channel_i_write : OUT STD_LOGIC );
    end component;


    component readVoltages IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_continue : IN STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        voltagesBackup_address0 : OUT STD_LOGIC_VECTOR (13 downto 0);
        voltagesBackup_ce0 : OUT STD_LOGIC;
        voltagesBackup_we0 : OUT STD_LOGIC;
        voltagesBackup_d0 : OUT STD_LOGIC_VECTOR (31 downto 0);
        voltagesBackup_address1 : OUT STD_LOGIC_VECTOR (13 downto 0);
        voltagesBackup_ce1 : OUT STD_LOGIC;
        voltagesBackup_we1 : OUT STD_LOGIC;
        voltagesBackup_d1 : OUT STD_LOGIC_VECTOR (31 downto 0);
        V_SIZE_dout : IN STD_LOGIC_VECTOR (31 downto 0);
        V_SIZE_empty_n : IN STD_LOGIC;
        V_SIZE_read : OUT STD_LOGIC;
        V_data_V_data_0_dout : IN STD_LOGIC_VECTOR (31 downto 0);
        V_data_V_data_0_empty_n : IN STD_LOGIC;
        V_data_V_data_0_read : OUT STD_LOGIC;
        V_data_V_data_1_dout : IN STD_LOGIC_VECTOR (31 downto 0);
        V_data_V_data_1_empty_n : IN STD_LOGIC;
        V_data_V_data_1_read : OUT STD_LOGIC;
        V_data_V_data_2_dout : IN STD_LOGIC_VECTOR (31 downto 0);
        V_data_V_data_2_empty_n : IN STD_LOGIC;
        V_data_V_data_2_read : OUT STD_LOGIC;
        V_data_V_data_3_dout : IN STD_LOGIC_VECTOR (31 downto 0);
        V_data_V_data_3_empty_n : IN STD_LOGIC;
        V_data_V_data_3_read : OUT STD_LOGIC );
    end component;


    component indexGeneration IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_continue : IN STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        simConfig_rowBegin_V_dout : IN STD_LOGIC_VECTOR (26 downto 0);
        simConfig_rowBegin_V_empty_n : IN STD_LOGIC;
        simConfig_rowBegin_V_read : OUT STD_LOGIC;
        simConfig_rowEnd_V_dout : IN STD_LOGIC_VECTOR (26 downto 0);
        simConfig_rowEnd_V_empty_n : IN STD_LOGIC;
        simConfig_rowEnd_V_read : OUT STD_LOGIC;
        simConfig_BLOCK_NUMBERS_V_dout : IN STD_LOGIC_VECTOR (26 downto 0);
        simConfig_BLOCK_NUMBERS_V_empty_n : IN STD_LOGIC;
        simConfig_BLOCK_NUMBERS_V_read : OUT STD_LOGIC;
        Vi_idx_V_data_V_0_din : OUT STD_LOGIC_VECTOR (26 downto 0);
        Vi_idx_V_data_V_0_full_n : IN STD_LOGIC;
        Vi_idx_V_data_V_0_write : OUT STD_LOGIC;
        Vi_idx_V_data_V_1_din : OUT STD_LOGIC_VECTOR (26 downto 0);
        Vi_idx_V_data_V_1_full_n : IN STD_LOGIC;
        Vi_idx_V_data_V_1_write : OUT STD_LOGIC;
        Vi_idx_V_data_V_2_din : OUT STD_LOGIC_VECTOR (26 downto 0);
        Vi_idx_V_data_V_2_full_n : IN STD_LOGIC;
        Vi_idx_V_data_V_2_write : OUT STD_LOGIC;
        Vi_idx_V_data_V_3_din : OUT STD_LOGIC_VECTOR (26 downto 0);
        Vi_idx_V_data_V_3_full_n : IN STD_LOGIC;
        Vi_idx_V_data_V_3_write : OUT STD_LOGIC;
        Vj_idx_V_data_V_0_din : OUT STD_LOGIC_VECTOR (26 downto 0);
        Vj_idx_V_data_V_0_full_n : IN STD_LOGIC;
        Vj_idx_V_data_V_0_write : OUT STD_LOGIC;
        Vj_idx_V_data_V_1_din : OUT STD_LOGIC_VECTOR (26 downto 0);
        Vj_idx_V_data_V_1_full_n : IN STD_LOGIC;
        Vj_idx_V_data_V_1_write : OUT STD_LOGIC;
        Vj_idx_V_data_V_2_din : OUT STD_LOGIC_VECTOR (26 downto 0);
        Vj_idx_V_data_V_2_full_n : IN STD_LOGIC;
        Vj_idx_V_data_V_2_write : OUT STD_LOGIC;
        Vj_idx_V_data_V_3_din : OUT STD_LOGIC_VECTOR (26 downto 0);
        Vj_idx_V_data_V_3_full_n : IN STD_LOGIC;
        Vj_idx_V_data_V_3_write : OUT STD_LOGIC );
    end component;


    component writeV2calc IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_continue : IN STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        voltagesBackup_address0 : OUT STD_LOGIC_VECTOR (13 downto 0);
        voltagesBackup_ce0 : OUT STD_LOGIC;
        voltagesBackup_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
        voltagesBackup_address1 : OUT STD_LOGIC_VECTOR (13 downto 0);
        voltagesBackup_ce1 : OUT STD_LOGIC;
        voltagesBackup_q1 : IN STD_LOGIC_VECTOR (31 downto 0);
        simConfig_rowsToSimu_dout : IN STD_LOGIC_VECTOR (26 downto 0);
        simConfig_rowsToSimu_empty_n : IN STD_LOGIC;
        simConfig_rowsToSimu_read : OUT STD_LOGIC;
        simConfig_BLOCK_NUMBERS_V_dout : IN STD_LOGIC_VECTOR (26 downto 0);
        simConfig_BLOCK_NUMBERS_V_empty_n : IN STD_LOGIC;
        simConfig_BLOCK_NUMBERS_V_read : OUT STD_LOGIC;
        Vi_idx_V_data_V_0_dout : IN STD_LOGIC_VECTOR (26 downto 0);
        Vi_idx_V_data_V_0_empty_n : IN STD_LOGIC;
        Vi_idx_V_data_V_0_read : OUT STD_LOGIC;
        Vi_idx_V_data_V_1_dout : IN STD_LOGIC_VECTOR (26 downto 0);
        Vi_idx_V_data_V_1_empty_n : IN STD_LOGIC;
        Vi_idx_V_data_V_1_read : OUT STD_LOGIC;
        Vi_idx_V_data_V_2_dout : IN STD_LOGIC_VECTOR (26 downto 0);
        Vi_idx_V_data_V_2_empty_n : IN STD_LOGIC;
        Vi_idx_V_data_V_2_read : OUT STD_LOGIC;
        Vi_idx_V_data_V_3_dout : IN STD_LOGIC_VECTOR (26 downto 0);
        Vi_idx_V_data_V_3_empty_n : IN STD_LOGIC;
        Vi_idx_V_data_V_3_read : OUT STD_LOGIC;
        fixedData_V_data_din : OUT STD_LOGIC_VECTOR (31 downto 0);
        fixedData_V_data_full_n : IN STD_LOGIC;
        fixedData_V_data_write : OUT STD_LOGIC;
        fixedData_V_tlast_V_din : OUT STD_LOGIC_VECTOR (0 downto 0);
        fixedData_V_tlast_V_full_n : IN STD_LOGIC;
        fixedData_V_tlast_V_write : OUT STD_LOGIC;
        Vj_idx_V_data_V_0_dout : IN STD_LOGIC_VECTOR (26 downto 0);
        Vj_idx_V_data_V_0_empty_n : IN STD_LOGIC;
        Vj_idx_V_data_V_0_read : OUT STD_LOGIC;
        Vj_idx_V_data_V_1_dout : IN STD_LOGIC_VECTOR (26 downto 0);
        Vj_idx_V_data_V_1_empty_n : IN STD_LOGIC;
        Vj_idx_V_data_V_1_read : OUT STD_LOGIC;
        Vj_idx_V_data_V_2_dout : IN STD_LOGIC_VECTOR (26 downto 0);
        Vj_idx_V_data_V_2_empty_n : IN STD_LOGIC;
        Vj_idx_V_data_V_2_read : OUT STD_LOGIC;
        Vj_idx_V_data_V_3_dout : IN STD_LOGIC_VECTOR (26 downto 0);
        Vj_idx_V_data_V_3_empty_n : IN STD_LOGIC;
        Vj_idx_V_data_V_3_read : OUT STD_LOGIC;
        processedData_V_data_din : OUT STD_LOGIC_VECTOR (31 downto 0);
        processedData_V_data_full_n : IN STD_LOGIC;
        processedData_V_data_write : OUT STD_LOGIC;
        processedData_V_data_1_din : OUT STD_LOGIC_VECTOR (31 downto 0);
        processedData_V_data_1_full_n : IN STD_LOGIC;
        processedData_V_data_1_write : OUT STD_LOGIC;
        processedData_V_data_2_din : OUT STD_LOGIC_VECTOR (31 downto 0);
        processedData_V_data_2_full_n : IN STD_LOGIC;
        processedData_V_data_2_write : OUT STD_LOGIC;
        processedData_V_data_3_din : OUT STD_LOGIC_VECTOR (31 downto 0);
        processedData_V_data_3_full_n : IN STD_LOGIC;
        processedData_V_data_3_write : OUT STD_LOGIC );
    end component;


    component V_read_voltagesBabkb IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        i_address0 : IN STD_LOGIC_VECTOR (13 downto 0);
        i_ce0 : IN STD_LOGIC;
        i_we0 : IN STD_LOGIC;
        i_d0 : IN STD_LOGIC_VECTOR (31 downto 0);
        i_q0 : OUT STD_LOGIC_VECTOR (31 downto 0);
        i_address1 : IN STD_LOGIC_VECTOR (13 downto 0);
        i_ce1 : IN STD_LOGIC;
        i_we1 : IN STD_LOGIC;
        i_d1 : IN STD_LOGIC_VECTOR (31 downto 0);
        i_q1 : OUT STD_LOGIC_VECTOR (31 downto 0);
        t_address0 : IN STD_LOGIC_VECTOR (13 downto 0);
        t_ce0 : IN STD_LOGIC;
        t_we0 : IN STD_LOGIC;
        t_d0 : IN STD_LOGIC_VECTOR (31 downto 0);
        t_q0 : OUT STD_LOGIC_VECTOR (31 downto 0);
        t_address1 : IN STD_LOGIC_VECTOR (13 downto 0);
        t_ce1 : IN STD_LOGIC;
        t_we1 : IN STD_LOGIC;
        t_d1 : IN STD_LOGIC_VECTOR (31 downto 0);
        t_q1 : OUT STD_LOGIC_VECTOR (31 downto 0);
        i_ce : IN STD_LOGIC;
        t_ce : IN STD_LOGIC;
        i_full_n : OUT STD_LOGIC;
        i_write : IN STD_LOGIC;
        t_empty_n : OUT STD_LOGIC;
        t_read : IN STD_LOGIC );
    end component;


    component V_read_simConfig_cud IS
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        if_read_ce : IN STD_LOGIC;
        if_write_ce : IN STD_LOGIC;
        if_din : IN STD_LOGIC_VECTOR (26 downto 0);
        if_full_n : OUT STD_LOGIC;
        if_write : IN STD_LOGIC;
        if_dout : OUT STD_LOGIC_VECTOR (26 downto 0);
        if_empty_n : OUT STD_LOGIC;
        if_read : IN STD_LOGIC );
    end component;


    component V_read_simConfig_dEe IS
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        if_read_ce : IN STD_LOGIC;
        if_write_ce : IN STD_LOGIC;
        if_din : IN STD_LOGIC_VECTOR (26 downto 0);
        if_full_n : OUT STD_LOGIC;
        if_write : IN STD_LOGIC;
        if_dout : OUT STD_LOGIC_VECTOR (26 downto 0);
        if_empty_n : OUT STD_LOGIC;
        if_read : IN STD_LOGIC );
    end component;


    component V_read_simConfig_eOg IS
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        if_read_ce : IN STD_LOGIC;
        if_write_ce : IN STD_LOGIC;
        if_din : IN STD_LOGIC_VECTOR (26 downto 0);
        if_full_n : OUT STD_LOGIC;
        if_write : IN STD_LOGIC;
        if_dout : OUT STD_LOGIC_VECTOR (26 downto 0);
        if_empty_n : OUT STD_LOGIC;
        if_read : IN STD_LOGIC );
    end component;


    component V_read_simConfig_fYi IS
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        if_read_ce : IN STD_LOGIC;
        if_write_ce : IN STD_LOGIC;
        if_din : IN STD_LOGIC_VECTOR (26 downto 0);
        if_full_n : OUT STD_LOGIC;
        if_write : IN STD_LOGIC;
        if_dout : OUT STD_LOGIC_VECTOR (26 downto 0);
        if_empty_n : OUT STD_LOGIC;
        if_read : IN STD_LOGIC );
    end component;


    component V_read_simConfig_g8j IS
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        if_read_ce : IN STD_LOGIC;
        if_write_ce : IN STD_LOGIC;
        if_din : IN STD_LOGIC_VECTOR (26 downto 0);
        if_full_n : OUT STD_LOGIC;
        if_write : IN STD_LOGIC;
        if_dout : OUT STD_LOGIC_VECTOR (26 downto 0);
        if_empty_n : OUT STD_LOGIC;
        if_read : IN STD_LOGIC );
    end component;


    component V_read_V_SIZE_chahbi IS
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        if_read_ce : IN STD_LOGIC;
        if_write_ce : IN STD_LOGIC;
        if_din : IN STD_LOGIC_VECTOR (31 downto 0);
        if_full_n : OUT STD_LOGIC;
        if_write : IN STD_LOGIC;
        if_dout : OUT STD_LOGIC_VECTOR (31 downto 0);
        if_empty_n : OUT STD_LOGIC;
        if_read : IN STD_LOGIC );
    end component;


    component V_read_Vi_idx_V_dibs IS
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        if_read_ce : IN STD_LOGIC;
        if_write_ce : IN STD_LOGIC;
        if_din : IN STD_LOGIC_VECTOR (26 downto 0);
        if_full_n : OUT STD_LOGIC;
        if_write : IN STD_LOGIC;
        if_dout : OUT STD_LOGIC_VECTOR (26 downto 0);
        if_empty_n : OUT STD_LOGIC;
        if_read : IN STD_LOGIC );
    end component;


    component V_read_Vi_idx_V_djbC IS
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        if_read_ce : IN STD_LOGIC;
        if_write_ce : IN STD_LOGIC;
        if_din : IN STD_LOGIC_VECTOR (26 downto 0);
        if_full_n : OUT STD_LOGIC;
        if_write : IN STD_LOGIC;
        if_dout : OUT STD_LOGIC_VECTOR (26 downto 0);
        if_empty_n : OUT STD_LOGIC;
        if_read : IN STD_LOGIC );
    end component;


    component V_read_Vi_idx_V_dkbM IS
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        if_read_ce : IN STD_LOGIC;
        if_write_ce : IN STD_LOGIC;
        if_din : IN STD_LOGIC_VECTOR (26 downto 0);
        if_full_n : OUT STD_LOGIC;
        if_write : IN STD_LOGIC;
        if_dout : OUT STD_LOGIC_VECTOR (26 downto 0);
        if_empty_n : OUT STD_LOGIC;
        if_read : IN STD_LOGIC );
    end component;


    component V_read_Vi_idx_V_dlbW IS
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        if_read_ce : IN STD_LOGIC;
        if_write_ce : IN STD_LOGIC;
        if_din : IN STD_LOGIC_VECTOR (26 downto 0);
        if_full_n : OUT STD_LOGIC;
        if_write : IN STD_LOGIC;
        if_dout : OUT STD_LOGIC_VECTOR (26 downto 0);
        if_empty_n : OUT STD_LOGIC;
        if_read : IN STD_LOGIC );
    end component;


    component V_read_Vj_idx_V_dmb6 IS
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        if_read_ce : IN STD_LOGIC;
        if_write_ce : IN STD_LOGIC;
        if_din : IN STD_LOGIC_VECTOR (26 downto 0);
        if_full_n : OUT STD_LOGIC;
        if_write : IN STD_LOGIC;
        if_dout : OUT STD_LOGIC_VECTOR (26 downto 0);
        if_empty_n : OUT STD_LOGIC;
        if_read : IN STD_LOGIC );
    end component;


    component V_read_Vj_idx_V_dncg IS
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        if_read_ce : IN STD_LOGIC;
        if_write_ce : IN STD_LOGIC;
        if_din : IN STD_LOGIC_VECTOR (26 downto 0);
        if_full_n : OUT STD_LOGIC;
        if_write : IN STD_LOGIC;
        if_dout : OUT STD_LOGIC_VECTOR (26 downto 0);
        if_empty_n : OUT STD_LOGIC;
        if_read : IN STD_LOGIC );
    end component;


    component V_read_Vj_idx_V_docq IS
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        if_read_ce : IN STD_LOGIC;
        if_write_ce : IN STD_LOGIC;
        if_din : IN STD_LOGIC_VECTOR (26 downto 0);
        if_full_n : OUT STD_LOGIC;
        if_write : IN STD_LOGIC;
        if_dout : OUT STD_LOGIC_VECTOR (26 downto 0);
        if_empty_n : OUT STD_LOGIC;
        if_read : IN STD_LOGIC );
    end component;


    component V_read_Vj_idx_V_dpcA IS
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        if_read_ce : IN STD_LOGIC;
        if_write_ce : IN STD_LOGIC;
        if_din : IN STD_LOGIC_VECTOR (26 downto 0);
        if_full_n : OUT STD_LOGIC;
        if_write : IN STD_LOGIC;
        if_dout : OUT STD_LOGIC_VECTOR (26 downto 0);
        if_empty_n : OUT STD_LOGIC;
        if_read : IN STD_LOGIC );
    end component;


    component start_for_indexGeqcK IS
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        if_read_ce : IN STD_LOGIC;
        if_write_ce : IN STD_LOGIC;
        if_din : IN STD_LOGIC_VECTOR (0 downto 0);
        if_full_n : OUT STD_LOGIC;
        if_write : IN STD_LOGIC;
        if_dout : OUT STD_LOGIC_VECTOR (0 downto 0);
        if_empty_n : OUT STD_LOGIC;
        if_read : IN STD_LOGIC );
    end component;



begin
    voltagesBackup_U : component V_read_voltagesBabkb
    generic map (
        DataWidth => 32,
        AddressRange => 10000,
        AddressWidth => 14)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        i_address0 => readVoltages_U0_voltagesBackup_address0,
        i_ce0 => readVoltages_U0_voltagesBackup_ce0,
        i_we0 => readVoltages_U0_voltagesBackup_we0,
        i_d0 => readVoltages_U0_voltagesBackup_d0,
        i_q0 => voltagesBackup_i_q0,
        i_address1 => readVoltages_U0_voltagesBackup_address1,
        i_ce1 => readVoltages_U0_voltagesBackup_ce1,
        i_we1 => readVoltages_U0_voltagesBackup_we1,
        i_d1 => readVoltages_U0_voltagesBackup_d1,
        i_q1 => voltagesBackup_i_q1,
        t_address0 => writeV2calc_U0_voltagesBackup_address0,
        t_ce0 => writeV2calc_U0_voltagesBackup_ce0,
        t_we0 => ap_const_logic_0,
        t_d0 => ap_const_lv32_0,
        t_q0 => voltagesBackup_t_q0,
        t_address1 => writeV2calc_U0_voltagesBackup_address1,
        t_ce1 => writeV2calc_U0_voltagesBackup_ce1,
        t_we1 => ap_const_logic_0,
        t_d1 => ap_const_lv32_0,
        t_q1 => voltagesBackup_t_q1,
        i_ce => ap_const_logic_1,
        t_ce => ap_const_logic_1,
        i_full_n => voltagesBackup_i_full_n,
        i_write => readVoltages_U0_ap_done,
        t_empty_n => voltagesBackup_t_empty_n,
        t_read => writeV2calc_U0_ap_ready);

    V_read_entry201214_U0 : component V_read_entry201214
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => V_read_entry201214_U0_ap_start,
        start_full_n => start_for_indexGeneration_U0_full_n,
        ap_done => V_read_entry201214_U0_ap_done,
        ap_continue => V_read_entry201214_U0_ap_continue,
        ap_idle => V_read_entry201214_U0_ap_idle,
        ap_ready => V_read_entry201214_U0_ap_ready,
        start_out => V_read_entry201214_U0_start_out,
        start_write => V_read_entry201214_U0_start_write,
        scalar_simConfig_BLOCK_NUMBERS_V_dout => simConfig_BLOCK_NUMBERS_V_dout,
        scalar_simConfig_BLOCK_NUMBERS_V_empty_n => simConfig_BLOCK_NUMBERS_V_empty_n,
        scalar_simConfig_BLOCK_NUMBERS_V_read => V_read_entry201214_U0_scalar_simConfig_BLOCK_NUMBERS_V_read,
        simConfig_BLOCK_NUMBERS_V_out_din => V_read_entry201214_U0_simConfig_BLOCK_NUMBERS_V_out_din,
        simConfig_BLOCK_NUMBERS_V_out_full_n => simConfig_BLOCK_NUMBERS_V_out_full_n,
        simConfig_BLOCK_NUMBERS_V_out_write => V_read_entry201214_U0_simConfig_BLOCK_NUMBERS_V_out_write,
        scalar_simConfig_rowsToSimulate_V_dout => simConfig_rowsToSimulate_V_dout,
        scalar_simConfig_rowsToSimulate_V_empty_n => simConfig_rowsToSimulate_V_empty_n,
        scalar_simConfig_rowsToSimulate_V_read => V_read_entry201214_U0_scalar_simConfig_rowsToSimulate_V_read,
        simConfig_rowsToSimulate_V_out_din => V_read_entry201214_U0_simConfig_rowsToSimulate_V_out_din,
        simConfig_rowsToSimulate_V_out_full_n => simConfig_rowsToSimulate_V_out_full_n,
        simConfig_rowsToSimulate_V_out_write => V_read_entry201214_U0_simConfig_rowsToSimulate_V_out_write,
        simConfig_rowBegin_V_dout => simConfig_rowBegin_V_dout,
        simConfig_rowBegin_V_empty_n => simConfig_rowBegin_V_empty_n,
        simConfig_rowBegin_V_read => V_read_entry201214_U0_simConfig_rowBegin_V_read,
        simConfig_rowEnd_V_dout => simConfig_rowEnd_V_dout,
        simConfig_rowEnd_V_empty_n => simConfig_rowEnd_V_empty_n,
        simConfig_rowEnd_V_read => V_read_entry201214_U0_simConfig_rowEnd_V_read,
        p_read => V_SIZE_read,
        simConfig_rowBegin_V_channel_i_din => V_read_entry201214_U0_simConfig_rowBegin_V_channel_i_din,
        simConfig_rowBegin_V_channel_i_full_n => simConfig_rowBegin_V_3_full_n,
        simConfig_rowBegin_V_channel_i_write => V_read_entry201214_U0_simConfig_rowBegin_V_channel_i_write,
        simConfig_rowEnd_V_channel_i_din => V_read_entry201214_U0_simConfig_rowEnd_V_channel_i_din,
        simConfig_rowEnd_V_channel_i_full_n => simConfig_rowEnd_V_c_full_n,
        simConfig_rowEnd_V_channel_i_write => V_read_entry201214_U0_simConfig_rowEnd_V_channel_i_write,
        simConfig_rowsToSimulate_V_channel_i_din => V_read_entry201214_U0_simConfig_rowsToSimulate_V_channel_i_din,
        simConfig_rowsToSimulate_V_channel_i_full_n => simConfig_rowsToSimu_full_n,
        simConfig_rowsToSimulate_V_channel_i_write => V_read_entry201214_U0_simConfig_rowsToSimulate_V_channel_i_write,
        simConfig_BLOCK_NUMBERS_V_channel_i_din => V_read_entry201214_U0_simConfig_BLOCK_NUMBERS_V_channel_i_din,
        simConfig_BLOCK_NUMBERS_V_channel_i_full_n => simConfig_BLOCK_NUMB_6_full_n,
        simConfig_BLOCK_NUMBERS_V_channel_i_write => V_read_entry201214_U0_simConfig_BLOCK_NUMBERS_V_channel_i_write,
        simConfig_BLOCK_NUMBERS_V_channel1_i_din => V_read_entry201214_U0_simConfig_BLOCK_NUMBERS_V_channel1_i_din,
        simConfig_BLOCK_NUMBERS_V_channel1_i_full_n => simConfig_BLOCK_NUMB_full_n,
        simConfig_BLOCK_NUMBERS_V_channel1_i_write => V_read_entry201214_U0_simConfig_BLOCK_NUMBERS_V_channel1_i_write,
        V_SIZE_channel_i_din => V_read_entry201214_U0_V_SIZE_channel_i_din,
        V_SIZE_channel_i_full_n => V_SIZE_channel_i_full_n,
        V_SIZE_channel_i_write => V_read_entry201214_U0_V_SIZE_channel_i_write);

    readVoltages_U0 : component readVoltages
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => readVoltages_U0_ap_start,
        ap_done => readVoltages_U0_ap_done,
        ap_continue => readVoltages_U0_ap_continue,
        ap_idle => readVoltages_U0_ap_idle,
        ap_ready => readVoltages_U0_ap_ready,
        voltagesBackup_address0 => readVoltages_U0_voltagesBackup_address0,
        voltagesBackup_ce0 => readVoltages_U0_voltagesBackup_ce0,
        voltagesBackup_we0 => readVoltages_U0_voltagesBackup_we0,
        voltagesBackup_d0 => readVoltages_U0_voltagesBackup_d0,
        voltagesBackup_address1 => readVoltages_U0_voltagesBackup_address1,
        voltagesBackup_ce1 => readVoltages_U0_voltagesBackup_ce1,
        voltagesBackup_we1 => readVoltages_U0_voltagesBackup_we1,
        voltagesBackup_d1 => readVoltages_U0_voltagesBackup_d1,
        V_SIZE_dout => V_SIZE_channel_i_dout,
        V_SIZE_empty_n => V_SIZE_channel_i_empty_n,
        V_SIZE_read => readVoltages_U0_V_SIZE_read,
        V_data_V_data_0_dout => V_data_V_data_0_dout,
        V_data_V_data_0_empty_n => V_data_V_data_0_empty_n,
        V_data_V_data_0_read => readVoltages_U0_V_data_V_data_0_read,
        V_data_V_data_1_dout => V_data_V_data_1_dout,
        V_data_V_data_1_empty_n => V_data_V_data_1_empty_n,
        V_data_V_data_1_read => readVoltages_U0_V_data_V_data_1_read,
        V_data_V_data_2_dout => V_data_V_data_2_dout,
        V_data_V_data_2_empty_n => V_data_V_data_2_empty_n,
        V_data_V_data_2_read => readVoltages_U0_V_data_V_data_2_read,
        V_data_V_data_3_dout => V_data_V_data_3_dout,
        V_data_V_data_3_empty_n => V_data_V_data_3_empty_n,
        V_data_V_data_3_read => readVoltages_U0_V_data_V_data_3_read);

    indexGeneration_U0 : component indexGeneration
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => indexGeneration_U0_ap_start,
        ap_done => indexGeneration_U0_ap_done,
        ap_continue => indexGeneration_U0_ap_continue,
        ap_idle => indexGeneration_U0_ap_idle,
        ap_ready => indexGeneration_U0_ap_ready,
        simConfig_rowBegin_V_dout => simConfig_rowBegin_V_3_dout,
        simConfig_rowBegin_V_empty_n => simConfig_rowBegin_V_3_empty_n,
        simConfig_rowBegin_V_read => indexGeneration_U0_simConfig_rowBegin_V_read,
        simConfig_rowEnd_V_dout => simConfig_rowEnd_V_c_dout,
        simConfig_rowEnd_V_empty_n => simConfig_rowEnd_V_c_empty_n,
        simConfig_rowEnd_V_read => indexGeneration_U0_simConfig_rowEnd_V_read,
        simConfig_BLOCK_NUMBERS_V_dout => simConfig_BLOCK_NUMB_dout,
        simConfig_BLOCK_NUMBERS_V_empty_n => simConfig_BLOCK_NUMB_empty_n,
        simConfig_BLOCK_NUMBERS_V_read => indexGeneration_U0_simConfig_BLOCK_NUMBERS_V_read,
        Vi_idx_V_data_V_0_din => indexGeneration_U0_Vi_idx_V_data_V_0_din,
        Vi_idx_V_data_V_0_full_n => Vi_idx_V_data_V_0_full_n,
        Vi_idx_V_data_V_0_write => indexGeneration_U0_Vi_idx_V_data_V_0_write,
        Vi_idx_V_data_V_1_din => indexGeneration_U0_Vi_idx_V_data_V_1_din,
        Vi_idx_V_data_V_1_full_n => Vi_idx_V_data_V_1_full_n,
        Vi_idx_V_data_V_1_write => indexGeneration_U0_Vi_idx_V_data_V_1_write,
        Vi_idx_V_data_V_2_din => indexGeneration_U0_Vi_idx_V_data_V_2_din,
        Vi_idx_V_data_V_2_full_n => Vi_idx_V_data_V_2_full_n,
        Vi_idx_V_data_V_2_write => indexGeneration_U0_Vi_idx_V_data_V_2_write,
        Vi_idx_V_data_V_3_din => indexGeneration_U0_Vi_idx_V_data_V_3_din,
        Vi_idx_V_data_V_3_full_n => Vi_idx_V_data_V_3_full_n,
        Vi_idx_V_data_V_3_write => indexGeneration_U0_Vi_idx_V_data_V_3_write,
        Vj_idx_V_data_V_0_din => indexGeneration_U0_Vj_idx_V_data_V_0_din,
        Vj_idx_V_data_V_0_full_n => Vj_idx_V_data_V_0_full_n,
        Vj_idx_V_data_V_0_write => indexGeneration_U0_Vj_idx_V_data_V_0_write,
        Vj_idx_V_data_V_1_din => indexGeneration_U0_Vj_idx_V_data_V_1_din,
        Vj_idx_V_data_V_1_full_n => Vj_idx_V_data_V_1_full_n,
        Vj_idx_V_data_V_1_write => indexGeneration_U0_Vj_idx_V_data_V_1_write,
        Vj_idx_V_data_V_2_din => indexGeneration_U0_Vj_idx_V_data_V_2_din,
        Vj_idx_V_data_V_2_full_n => Vj_idx_V_data_V_2_full_n,
        Vj_idx_V_data_V_2_write => indexGeneration_U0_Vj_idx_V_data_V_2_write,
        Vj_idx_V_data_V_3_din => indexGeneration_U0_Vj_idx_V_data_V_3_din,
        Vj_idx_V_data_V_3_full_n => Vj_idx_V_data_V_3_full_n,
        Vj_idx_V_data_V_3_write => indexGeneration_U0_Vj_idx_V_data_V_3_write);

    writeV2calc_U0 : component writeV2calc
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => writeV2calc_U0_ap_start,
        ap_done => writeV2calc_U0_ap_done,
        ap_continue => writeV2calc_U0_ap_continue,
        ap_idle => writeV2calc_U0_ap_idle,
        ap_ready => writeV2calc_U0_ap_ready,
        voltagesBackup_address0 => writeV2calc_U0_voltagesBackup_address0,
        voltagesBackup_ce0 => writeV2calc_U0_voltagesBackup_ce0,
        voltagesBackup_q0 => voltagesBackup_t_q0,
        voltagesBackup_address1 => writeV2calc_U0_voltagesBackup_address1,
        voltagesBackup_ce1 => writeV2calc_U0_voltagesBackup_ce1,
        voltagesBackup_q1 => voltagesBackup_t_q1,
        simConfig_rowsToSimu_dout => simConfig_rowsToSimu_dout,
        simConfig_rowsToSimu_empty_n => simConfig_rowsToSimu_empty_n,
        simConfig_rowsToSimu_read => writeV2calc_U0_simConfig_rowsToSimu_read,
        simConfig_BLOCK_NUMBERS_V_dout => simConfig_BLOCK_NUMB_6_dout,
        simConfig_BLOCK_NUMBERS_V_empty_n => simConfig_BLOCK_NUMB_6_empty_n,
        simConfig_BLOCK_NUMBERS_V_read => writeV2calc_U0_simConfig_BLOCK_NUMBERS_V_read,
        Vi_idx_V_data_V_0_dout => Vi_idx_V_data_V_0_dout,
        Vi_idx_V_data_V_0_empty_n => Vi_idx_V_data_V_0_empty_n,
        Vi_idx_V_data_V_0_read => writeV2calc_U0_Vi_idx_V_data_V_0_read,
        Vi_idx_V_data_V_1_dout => Vi_idx_V_data_V_1_dout,
        Vi_idx_V_data_V_1_empty_n => Vi_idx_V_data_V_1_empty_n,
        Vi_idx_V_data_V_1_read => writeV2calc_U0_Vi_idx_V_data_V_1_read,
        Vi_idx_V_data_V_2_dout => Vi_idx_V_data_V_2_dout,
        Vi_idx_V_data_V_2_empty_n => Vi_idx_V_data_V_2_empty_n,
        Vi_idx_V_data_V_2_read => writeV2calc_U0_Vi_idx_V_data_V_2_read,
        Vi_idx_V_data_V_3_dout => Vi_idx_V_data_V_3_dout,
        Vi_idx_V_data_V_3_empty_n => Vi_idx_V_data_V_3_empty_n,
        Vi_idx_V_data_V_3_read => writeV2calc_U0_Vi_idx_V_data_V_3_read,
        fixedData_V_data_din => writeV2calc_U0_fixedData_V_data_din,
        fixedData_V_data_full_n => fixedData_V_data_full_n,
        fixedData_V_data_write => writeV2calc_U0_fixedData_V_data_write,
        fixedData_V_tlast_V_din => writeV2calc_U0_fixedData_V_tlast_V_din,
        fixedData_V_tlast_V_full_n => fixedData_V_tlast_V_full_n,
        fixedData_V_tlast_V_write => writeV2calc_U0_fixedData_V_tlast_V_write,
        Vj_idx_V_data_V_0_dout => Vj_idx_V_data_V_0_dout,
        Vj_idx_V_data_V_0_empty_n => Vj_idx_V_data_V_0_empty_n,
        Vj_idx_V_data_V_0_read => writeV2calc_U0_Vj_idx_V_data_V_0_read,
        Vj_idx_V_data_V_1_dout => Vj_idx_V_data_V_1_dout,
        Vj_idx_V_data_V_1_empty_n => Vj_idx_V_data_V_1_empty_n,
        Vj_idx_V_data_V_1_read => writeV2calc_U0_Vj_idx_V_data_V_1_read,
        Vj_idx_V_data_V_2_dout => Vj_idx_V_data_V_2_dout,
        Vj_idx_V_data_V_2_empty_n => Vj_idx_V_data_V_2_empty_n,
        Vj_idx_V_data_V_2_read => writeV2calc_U0_Vj_idx_V_data_V_2_read,
        Vj_idx_V_data_V_3_dout => Vj_idx_V_data_V_3_dout,
        Vj_idx_V_data_V_3_empty_n => Vj_idx_V_data_V_3_empty_n,
        Vj_idx_V_data_V_3_read => writeV2calc_U0_Vj_idx_V_data_V_3_read,
        processedData_V_data_din => writeV2calc_U0_processedData_V_data_din,
        processedData_V_data_full_n => processedData_V_data_full_n,
        processedData_V_data_write => writeV2calc_U0_processedData_V_data_write,
        processedData_V_data_1_din => writeV2calc_U0_processedData_V_data_1_din,
        processedData_V_data_1_full_n => processedData_V_data_1_full_n,
        processedData_V_data_1_write => writeV2calc_U0_processedData_V_data_1_write,
        processedData_V_data_2_din => writeV2calc_U0_processedData_V_data_2_din,
        processedData_V_data_2_full_n => processedData_V_data_2_full_n,
        processedData_V_data_2_write => writeV2calc_U0_processedData_V_data_2_write,
        processedData_V_data_3_din => writeV2calc_U0_processedData_V_data_3_din,
        processedData_V_data_3_full_n => processedData_V_data_3_full_n,
        processedData_V_data_3_write => writeV2calc_U0_processedData_V_data_3_write);

    simConfig_rowBegin_V_3_U : component V_read_simConfig_cud
    port map (
        clk => ap_clk,
        reset => ap_rst,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => V_read_entry201214_U0_simConfig_rowBegin_V_channel_i_din,
        if_full_n => simConfig_rowBegin_V_3_full_n,
        if_write => V_read_entry201214_U0_simConfig_rowBegin_V_channel_i_write,
        if_dout => simConfig_rowBegin_V_3_dout,
        if_empty_n => simConfig_rowBegin_V_3_empty_n,
        if_read => indexGeneration_U0_simConfig_rowBegin_V_read);

    simConfig_rowEnd_V_c_U : component V_read_simConfig_dEe
    port map (
        clk => ap_clk,
        reset => ap_rst,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => V_read_entry201214_U0_simConfig_rowEnd_V_channel_i_din,
        if_full_n => simConfig_rowEnd_V_c_full_n,
        if_write => V_read_entry201214_U0_simConfig_rowEnd_V_channel_i_write,
        if_dout => simConfig_rowEnd_V_c_dout,
        if_empty_n => simConfig_rowEnd_V_c_empty_n,
        if_read => indexGeneration_U0_simConfig_rowEnd_V_read);

    simConfig_rowsToSimu_U : component V_read_simConfig_eOg
    port map (
        clk => ap_clk,
        reset => ap_rst,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => V_read_entry201214_U0_simConfig_rowsToSimulate_V_channel_i_din,
        if_full_n => simConfig_rowsToSimu_full_n,
        if_write => V_read_entry201214_U0_simConfig_rowsToSimulate_V_channel_i_write,
        if_dout => simConfig_rowsToSimu_dout,
        if_empty_n => simConfig_rowsToSimu_empty_n,
        if_read => writeV2calc_U0_simConfig_rowsToSimu_read);

    simConfig_BLOCK_NUMB_6_U : component V_read_simConfig_fYi
    port map (
        clk => ap_clk,
        reset => ap_rst,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => V_read_entry201214_U0_simConfig_BLOCK_NUMBERS_V_channel_i_din,
        if_full_n => simConfig_BLOCK_NUMB_6_full_n,
        if_write => V_read_entry201214_U0_simConfig_BLOCK_NUMBERS_V_channel_i_write,
        if_dout => simConfig_BLOCK_NUMB_6_dout,
        if_empty_n => simConfig_BLOCK_NUMB_6_empty_n,
        if_read => writeV2calc_U0_simConfig_BLOCK_NUMBERS_V_read);

    simConfig_BLOCK_NUMB_U : component V_read_simConfig_g8j
    port map (
        clk => ap_clk,
        reset => ap_rst,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => V_read_entry201214_U0_simConfig_BLOCK_NUMBERS_V_channel1_i_din,
        if_full_n => simConfig_BLOCK_NUMB_full_n,
        if_write => V_read_entry201214_U0_simConfig_BLOCK_NUMBERS_V_channel1_i_write,
        if_dout => simConfig_BLOCK_NUMB_dout,
        if_empty_n => simConfig_BLOCK_NUMB_empty_n,
        if_read => indexGeneration_U0_simConfig_BLOCK_NUMBERS_V_read);

    V_SIZE_channel_i_U : component V_read_V_SIZE_chahbi
    port map (
        clk => ap_clk,
        reset => ap_rst,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => V_read_entry201214_U0_V_SIZE_channel_i_din,
        if_full_n => V_SIZE_channel_i_full_n,
        if_write => V_read_entry201214_U0_V_SIZE_channel_i_write,
        if_dout => V_SIZE_channel_i_dout,
        if_empty_n => V_SIZE_channel_i_empty_n,
        if_read => readVoltages_U0_V_SIZE_read);

    Vi_idx_V_data_V_0_U : component V_read_Vi_idx_V_dibs
    port map (
        clk => ap_clk,
        reset => ap_rst,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => indexGeneration_U0_Vi_idx_V_data_V_0_din,
        if_full_n => Vi_idx_V_data_V_0_full_n,
        if_write => indexGeneration_U0_Vi_idx_V_data_V_0_write,
        if_dout => Vi_idx_V_data_V_0_dout,
        if_empty_n => Vi_idx_V_data_V_0_empty_n,
        if_read => writeV2calc_U0_Vi_idx_V_data_V_0_read);

    Vi_idx_V_data_V_1_U : component V_read_Vi_idx_V_djbC
    port map (
        clk => ap_clk,
        reset => ap_rst,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => indexGeneration_U0_Vi_idx_V_data_V_1_din,
        if_full_n => Vi_idx_V_data_V_1_full_n,
        if_write => indexGeneration_U0_Vi_idx_V_data_V_1_write,
        if_dout => Vi_idx_V_data_V_1_dout,
        if_empty_n => Vi_idx_V_data_V_1_empty_n,
        if_read => writeV2calc_U0_Vi_idx_V_data_V_1_read);

    Vi_idx_V_data_V_2_U : component V_read_Vi_idx_V_dkbM
    port map (
        clk => ap_clk,
        reset => ap_rst,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => indexGeneration_U0_Vi_idx_V_data_V_2_din,
        if_full_n => Vi_idx_V_data_V_2_full_n,
        if_write => indexGeneration_U0_Vi_idx_V_data_V_2_write,
        if_dout => Vi_idx_V_data_V_2_dout,
        if_empty_n => Vi_idx_V_data_V_2_empty_n,
        if_read => writeV2calc_U0_Vi_idx_V_data_V_2_read);

    Vi_idx_V_data_V_3_U : component V_read_Vi_idx_V_dlbW
    port map (
        clk => ap_clk,
        reset => ap_rst,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => indexGeneration_U0_Vi_idx_V_data_V_3_din,
        if_full_n => Vi_idx_V_data_V_3_full_n,
        if_write => indexGeneration_U0_Vi_idx_V_data_V_3_write,
        if_dout => Vi_idx_V_data_V_3_dout,
        if_empty_n => Vi_idx_V_data_V_3_empty_n,
        if_read => writeV2calc_U0_Vi_idx_V_data_V_3_read);

    Vj_idx_V_data_V_0_U : component V_read_Vj_idx_V_dmb6
    port map (
        clk => ap_clk,
        reset => ap_rst,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => indexGeneration_U0_Vj_idx_V_data_V_0_din,
        if_full_n => Vj_idx_V_data_V_0_full_n,
        if_write => indexGeneration_U0_Vj_idx_V_data_V_0_write,
        if_dout => Vj_idx_V_data_V_0_dout,
        if_empty_n => Vj_idx_V_data_V_0_empty_n,
        if_read => writeV2calc_U0_Vj_idx_V_data_V_0_read);

    Vj_idx_V_data_V_1_U : component V_read_Vj_idx_V_dncg
    port map (
        clk => ap_clk,
        reset => ap_rst,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => indexGeneration_U0_Vj_idx_V_data_V_1_din,
        if_full_n => Vj_idx_V_data_V_1_full_n,
        if_write => indexGeneration_U0_Vj_idx_V_data_V_1_write,
        if_dout => Vj_idx_V_data_V_1_dout,
        if_empty_n => Vj_idx_V_data_V_1_empty_n,
        if_read => writeV2calc_U0_Vj_idx_V_data_V_1_read);

    Vj_idx_V_data_V_2_U : component V_read_Vj_idx_V_docq
    port map (
        clk => ap_clk,
        reset => ap_rst,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => indexGeneration_U0_Vj_idx_V_data_V_2_din,
        if_full_n => Vj_idx_V_data_V_2_full_n,
        if_write => indexGeneration_U0_Vj_idx_V_data_V_2_write,
        if_dout => Vj_idx_V_data_V_2_dout,
        if_empty_n => Vj_idx_V_data_V_2_empty_n,
        if_read => writeV2calc_U0_Vj_idx_V_data_V_2_read);

    Vj_idx_V_data_V_3_U : component V_read_Vj_idx_V_dpcA
    port map (
        clk => ap_clk,
        reset => ap_rst,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => indexGeneration_U0_Vj_idx_V_data_V_3_din,
        if_full_n => Vj_idx_V_data_V_3_full_n,
        if_write => indexGeneration_U0_Vj_idx_V_data_V_3_write,
        if_dout => Vj_idx_V_data_V_3_dout,
        if_empty_n => Vj_idx_V_data_V_3_empty_n,
        if_read => writeV2calc_U0_Vj_idx_V_data_V_3_read);

    start_for_indexGeqcK_U : component start_for_indexGeqcK
    port map (
        clk => ap_clk,
        reset => ap_rst,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => start_for_indexGeneration_U0_din,
        if_full_n => start_for_indexGeneration_U0_full_n,
        if_write => V_read_entry201214_U0_start_write,
        if_dout => start_for_indexGeneration_U0_dout,
        if_empty_n => start_for_indexGeneration_U0_empty_n,
        if_read => indexGeneration_U0_ap_ready);





    ap_reg_V_read_entry201214_U0_ap_done_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_reg_V_read_entry201214_U0_ap_done <= ap_const_logic_0;
            else
                if ((ap_const_logic_1 = ap_hs_done)) then 
                    ap_reg_V_read_entry201214_U0_ap_done <= ap_const_logic_0;
                else 
                    ap_reg_V_read_entry201214_U0_ap_done <= (V_read_entry201214_U0_ap_done or ap_reg_V_read_entry201214_U0_ap_done);
                end if; 
            end if;
        end if;
    end process;


    ap_reg_writeV2calc_U0_ap_done_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_reg_writeV2calc_U0_ap_done <= ap_const_logic_0;
            else
                if ((ap_const_logic_1 = ap_hs_done)) then 
                    ap_reg_writeV2calc_U0_ap_done <= ap_const_logic_0;
                else 
                    ap_reg_writeV2calc_U0_ap_done <= (writeV2calc_U0_ap_done or ap_reg_writeV2calc_U0_ap_done);
                end if; 
            end if;
        end if;
    end process;


    ap_sync_reg_V_read_entry201214_U0_ap_ready_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_sync_reg_V_read_entry201214_U0_ap_ready <= ap_const_logic_0;
            else
                if ((ap_const_logic_1 = (real_start and ap_hs_ready))) then 
                    ap_sync_reg_V_read_entry201214_U0_ap_ready <= ap_const_logic_0;
                else 
                    ap_sync_reg_V_read_entry201214_U0_ap_ready <= ap_sync_V_read_entry201214_U0_ap_ready;
                end if; 
            end if;
        end if;
    end process;


    ap_sync_reg_readVoltages_U0_ap_ready_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_sync_reg_readVoltages_U0_ap_ready <= ap_const_logic_0;
            else
                if ((ap_const_logic_1 = (real_start and ap_hs_ready))) then 
                    ap_sync_reg_readVoltages_U0_ap_ready <= ap_const_logic_0;
                else 
                    ap_sync_reg_readVoltages_U0_ap_ready <= ap_sync_readVoltages_U0_ap_ready;
                end if; 
            end if;
        end if;
    end process;


    real_start_status_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                real_start_status_reg <= ap_const_logic_0;
            else
                if (not((start_full_n = ap_const_logic_0))) then 
                    real_start_status_reg <= ap_const_logic_0;
                elsif (((start_full_n = ap_const_logic_0) and (internal_ap_ready = ap_const_logic_1))) then 
                    real_start_status_reg <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    start_control_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                start_control_reg <= ap_const_logic_0;
            else
                if (((real_start = ap_const_logic_1) and ((internal_ap_ready = ap_const_logic_1) or (ap_const_logic_0 = start_once_reg)))) then 
                    start_control_reg <= ap_const_logic_1;
                elsif (((ap_const_logic_1 = start_control_reg) and (start_full_n = ap_const_logic_1))) then 
                    start_control_reg <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    start_once_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                start_once_reg <= ap_const_logic_0;
            else
                if ((real_start = ap_const_logic_1)) then 
                    start_once_reg <= ap_const_logic_1;
                elsif ((ap_start = ap_const_logic_0)) then 
                    start_once_reg <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    V_read_entry201214_U0_ap_ready_count_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_0 = V_read_entry201214_U0_ap_ready) and (ap_const_logic_1 = ap_hs_ready))) then 
                V_read_entry201214_U0_ap_ready_count <= std_logic_vector(unsigned(V_read_entry201214_U0_ap_ready_count) - unsigned(ap_const_lv2_1));
            elsif (((ap_const_logic_1 = V_read_entry201214_U0_ap_ready) and (ap_const_logic_0 = ap_hs_ready))) then 
                V_read_entry201214_U0_ap_ready_count <= std_logic_vector(unsigned(V_read_entry201214_U0_ap_ready_count) + unsigned(ap_const_lv2_1));
            end if; 
        end if;
    end process;

    readVoltages_U0_ap_ready_count_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_hs_ready) and (ap_const_logic_0 = readVoltages_U0_ap_ready))) then 
                readVoltages_U0_ap_ready_count <= std_logic_vector(unsigned(readVoltages_U0_ap_ready_count) - unsigned(ap_const_lv2_1));
            elsif (((ap_const_logic_0 = ap_hs_ready) and (ap_const_logic_1 = readVoltages_U0_ap_ready))) then 
                readVoltages_U0_ap_ready_count <= std_logic_vector(unsigned(readVoltages_U0_ap_ready_count) + unsigned(ap_const_lv2_1));
            end if; 
        end if;
    end process;
    V_data_V_data_0_read <= readVoltages_U0_V_data_V_data_0_read;
    V_data_V_data_1_read <= readVoltages_U0_V_data_V_data_1_read;
    V_data_V_data_2_read <= readVoltages_U0_V_data_V_data_2_read;
    V_data_V_data_3_read <= readVoltages_U0_V_data_V_data_3_read;
    V_read_entry201214_U0_ap_continue <= ap_continue;
    V_read_entry201214_U0_ap_start <= ap_sync_V_read_entry201214_U0_ap_start;
    ap_channel_done_voltagesBackup <= readVoltages_U0_ap_done;
    ap_done <= ap_hs_done;
    ap_hs_continue <= ap_continue;
    ap_hs_done <= (ap_reg_V_read_entry201214_U0_ap_done and ap_reg_writeV2calc_U0_ap_done);
    ap_hs_ready <= (ap_sync_V_read_entry201214_U0_ap_ready and ap_sync_readVoltages_U0_ap_ready);
    ap_idle <= (V_read_entry201214_U0_ap_idle and readVoltages_U0_ap_idle and indexGeneration_U0_ap_idle and writeV2calc_U0_ap_idle and (voltagesBackup_t_empty_n xor ap_const_logic_1));
    ap_ready <= internal_ap_ready;
    ap_sync_V_read_entry201214_U0_ap_ready <= (V_read_entry201214_U0_ap_ready or ap_sync_reg_V_read_entry201214_U0_ap_ready);
    ap_sync_V_read_entry201214_U0_ap_start <= (real_start and (ap_sync_reg_V_read_entry201214_U0_ap_ready xor ap_const_logic_1));
    ap_sync_readVoltages_U0_ap_ready <= (readVoltages_U0_ap_ready or ap_sync_reg_readVoltages_U0_ap_ready);
    ap_sync_readVoltages_U0_ap_start <= (real_start and (ap_sync_reg_readVoltages_U0_ap_ready xor ap_const_logic_1));
    fixedData_V_data_din <= writeV2calc_U0_fixedData_V_data_din;
    fixedData_V_data_write <= writeV2calc_U0_fixedData_V_data_write;
    fixedData_V_tlast_V_din <= writeV2calc_U0_fixedData_V_tlast_V_din;
    fixedData_V_tlast_V_write <= writeV2calc_U0_fixedData_V_tlast_V_write;
    indexGeneration_U0_ap_continue <= ap_const_logic_1;
    indexGeneration_U0_ap_start <= start_for_indexGeneration_U0_empty_n;
    internal_ap_ready <= ap_hs_ready;
    processedData_V_data_1_din <= writeV2calc_U0_processedData_V_data_1_din;
    processedData_V_data_1_write <= writeV2calc_U0_processedData_V_data_1_write;
    processedData_V_data_2_din <= writeV2calc_U0_processedData_V_data_2_din;
    processedData_V_data_2_write <= writeV2calc_U0_processedData_V_data_2_write;
    processedData_V_data_3_din <= writeV2calc_U0_processedData_V_data_3_din;
    processedData_V_data_3_write <= writeV2calc_U0_processedData_V_data_3_write;
    processedData_V_data_din <= writeV2calc_U0_processedData_V_data_din;
    processedData_V_data_write <= writeV2calc_U0_processedData_V_data_write;
    readVoltages_U0_ap_continue <= voltagesBackup_i_full_n;
    readVoltages_U0_ap_start <= ap_sync_readVoltages_U0_ap_start;
    readVoltages_U0_voltagesBackup_full_n <= voltagesBackup_i_full_n;

    real_start_assign_proc : process(ap_start, real_start_status_reg)
    begin
        if ((real_start_status_reg = ap_const_logic_1)) then 
            real_start <= ap_const_logic_0;
        else 
            real_start <= ap_start;
        end if; 
    end process;

    simConfig_BLOCK_NUMBERS_V_out_din <= V_read_entry201214_U0_simConfig_BLOCK_NUMBERS_V_out_din;
    simConfig_BLOCK_NUMBERS_V_out_write <= V_read_entry201214_U0_simConfig_BLOCK_NUMBERS_V_out_write;
    simConfig_BLOCK_NUMBERS_V_read <= V_read_entry201214_U0_scalar_simConfig_BLOCK_NUMBERS_V_read;
    simConfig_rowBegin_V_read <= V_read_entry201214_U0_simConfig_rowBegin_V_read;
    simConfig_rowEnd_V_read <= V_read_entry201214_U0_simConfig_rowEnd_V_read;
    simConfig_rowsToSimulate_V_out_din <= V_read_entry201214_U0_simConfig_rowsToSimulate_V_out_din;
    simConfig_rowsToSimulate_V_out_write <= V_read_entry201214_U0_simConfig_rowsToSimulate_V_out_write;
    simConfig_rowsToSimulate_V_read <= V_read_entry201214_U0_scalar_simConfig_rowsToSimulate_V_read;
    start_for_indexGeneration_U0_din <= (0=>ap_const_logic_1, others=>'-');
    start_out <= real_start;
    start_write <= (ap_start and start_control_reg);
    writeV2calc_U0_ap_continue <= ap_continue;
    writeV2calc_U0_ap_start <= voltagesBackup_t_empty_n;
end behav;
