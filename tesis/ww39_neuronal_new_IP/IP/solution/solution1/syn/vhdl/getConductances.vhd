-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
-- Version: 2016.4
-- Copyright (C) 1986-2017 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity getConductances is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    input_V_data_TDATA : IN STD_LOGIC_VECTOR (63 downto 0);
    input_V_data_TVALID : IN STD_LOGIC;
    input_V_data_TREADY : OUT STD_LOGIC;
    simConfig_rowsToSimulate_V_read : IN STD_LOGIC_VECTOR (26 downto 0);
    simConfig_BLOCK_NUMBERS_V_read : IN STD_LOGIC_VECTOR (26 downto 0);
    C_data_V_data_0_din : OUT STD_LOGIC_VECTOR (31 downto 0);
    C_data_V_data_0_full_n : IN STD_LOGIC;
    C_data_V_data_0_write : OUT STD_LOGIC;
    C_data_V_data_1_din : OUT STD_LOGIC_VECTOR (31 downto 0);
    C_data_V_data_1_full_n : IN STD_LOGIC;
    C_data_V_data_1_write : OUT STD_LOGIC;
    C_data_V_data_2_din : OUT STD_LOGIC_VECTOR (31 downto 0);
    C_data_V_data_2_full_n : IN STD_LOGIC;
    C_data_V_data_2_write : OUT STD_LOGIC;
    C_data_V_data_3_din : OUT STD_LOGIC_VECTOR (31 downto 0);
    C_data_V_data_3_full_n : IN STD_LOGIC;
    C_data_V_data_3_write : OUT STD_LOGIC );
end;


architecture behav of getConductances is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (3 downto 0) := "0001";
    constant ap_ST_fsm_state2 : STD_LOGIC_VECTOR (3 downto 0) := "0010";
    constant ap_ST_fsm_state3 : STD_LOGIC_VECTOR (3 downto 0) := "0100";
    constant ap_ST_fsm_state4 : STD_LOGIC_VECTOR (3 downto 0) := "1000";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv32_3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000011";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv12_0 : STD_LOGIC_VECTOR (11 downto 0) := "000000000000";
    constant ap_const_lv27_0 : STD_LOGIC_VECTOR (26 downto 0) := "000000000000000000000000000";
    constant ap_const_lv32_20 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100000";
    constant ap_const_lv32_3F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000111111";
    constant ap_const_lv4_0 : STD_LOGIC_VECTOR (3 downto 0) := "0000";
    constant ap_const_lv12_1 : STD_LOGIC_VECTOR (11 downto 0) := "000000000001";
    constant ap_const_lv27_4 : STD_LOGIC_VECTOR (26 downto 0) := "000000000000000000000000100";

    signal ap_CS_fsm : STD_LOGIC_VECTOR (3 downto 0) := "0001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC_VECTOR (0 downto 0);
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal input_V_data_TDATA_blk_n : STD_LOGIC;
    signal ap_CS_fsm_state3 : STD_LOGIC_VECTOR (0 downto 0);
    attribute fsm_encoding of ap_CS_fsm_state3 : signal is "none";
    signal tmp_28_i_fu_169_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_state4 : STD_LOGIC_VECTOR (0 downto 0);
    attribute fsm_encoding of ap_CS_fsm_state4 : signal is "none";
    signal C_data_V_data_0_blk_n : STD_LOGIC;
    signal C_data_V_data_1_blk_n : STD_LOGIC;
    signal C_data_V_data_2_blk_n : STD_LOGIC;
    signal C_data_V_data_3_blk_n : STD_LOGIC;
    signal r_V_fu_142_p3 : STD_LOGIC_VECTOR (30 downto 0);
    signal r_V_reg_211 : STD_LOGIC_VECTOR (30 downto 0);
    signal RowOfBlocks_V_fu_159_p2 : STD_LOGIC_VECTOR (11 downto 0);
    signal RowOfBlocks_V_reg_219 : STD_LOGIC_VECTOR (11 downto 0);
    signal ap_CS_fsm_state2 : STD_LOGIC_VECTOR (0 downto 0);
    attribute fsm_encoding of ap_CS_fsm_state2 : signal is "none";
    signal tmp_fu_174_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_reg_227 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_132_p4 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_12_i_reg_232 : STD_LOGIC_VECTOR (31 downto 0);
    signal i_V_fu_178_p2 : STD_LOGIC_VECTOR (26 downto 0);
    signal i_V_reg_237 : STD_LOGIC_VECTOR (26 downto 0);
    signal p_i_reg_110 : STD_LOGIC_VECTOR (11 downto 0);
    signal p_4_i_reg_121 : STD_LOGIC_VECTOR (26 downto 0);
    signal C_data_V_data_01_status : STD_LOGIC;
    signal tmp_i_fu_154_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal C_data_V_data_01_update : STD_LOGIC;
    signal p_cast_i_fu_150_p1 : STD_LOGIC_VECTOR (26 downto 0);
    signal tmp_27_cast_cast_i_fu_165_p1 : STD_LOGIC_VECTOR (30 downto 0);
    signal tmp_2_fu_192_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_NS_fsm : STD_LOGIC_VECTOR (3 downto 0);


begin




    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    p_4_i_reg_121_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_lv1_1 = ap_CS_fsm_state2) and not((ap_const_lv1_0 = tmp_i_fu_154_p2)))) then 
                p_4_i_reg_121 <= ap_const_lv27_0;
            elsif (((ap_const_lv1_1 = ap_CS_fsm_state4) and not(((input_V_data_TVALID = ap_const_logic_0) or (C_data_V_data_01_status = ap_const_logic_0))))) then 
                p_4_i_reg_121 <= i_V_reg_237;
            end if; 
        end if;
    end process;

    p_i_reg_110_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_lv1_1 = ap_CS_fsm_state3) and (tmp_28_i_fu_169_p2 = ap_const_lv1_0) and not((not((tmp_28_i_fu_169_p2 = ap_const_lv1_0)) and (input_V_data_TVALID = ap_const_logic_0))))) then 
                p_i_reg_110 <= RowOfBlocks_V_reg_219;
            elsif (((ap_CS_fsm_state1 = ap_const_lv1_1) and not((ap_start = ap_const_logic_0)))) then 
                p_i_reg_110 <= ap_const_lv12_0;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_lv1_1 = ap_CS_fsm_state2))) then
                RowOfBlocks_V_reg_219 <= RowOfBlocks_V_fu_159_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_lv1_1 = ap_CS_fsm_state3) and not((tmp_28_i_fu_169_p2 = ap_const_lv1_0)) and not((not((tmp_28_i_fu_169_p2 = ap_const_lv1_0)) and (input_V_data_TVALID = ap_const_logic_0))))) then
                i_V_reg_237 <= i_V_fu_178_p2;
                tmp_12_i_reg_232 <= input_V_data_TDATA(63 downto 32);
                tmp_reg_227 <= tmp_fu_174_p1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_CS_fsm_state1 = ap_const_lv1_1) and not((ap_start = ap_const_logic_0)))) then
                    r_V_reg_211(30 downto 4) <= r_V_fu_142_p3(30 downto 4);
            end if;
        end if;
    end process;
    r_V_reg_211(3 downto 0) <= "0000";

    ap_NS_fsm_assign_proc : process (ap_start, ap_CS_fsm, input_V_data_TVALID, tmp_28_i_fu_169_p2, C_data_V_data_01_status, tmp_i_fu_154_p2)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if (not((ap_start = ap_const_logic_0))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_state2 => 
                if ((ap_const_lv1_0 = tmp_i_fu_154_p2)) then
                    ap_NS_fsm <= ap_ST_fsm_state1;
                else
                    ap_NS_fsm <= ap_ST_fsm_state3;
                end if;
            when ap_ST_fsm_state3 => 
                if (((tmp_28_i_fu_169_p2 = ap_const_lv1_0) and not((not((tmp_28_i_fu_169_p2 = ap_const_lv1_0)) and (input_V_data_TVALID = ap_const_logic_0))))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                elsif ((not((tmp_28_i_fu_169_p2 = ap_const_lv1_0)) and not((not((tmp_28_i_fu_169_p2 = ap_const_lv1_0)) and (input_V_data_TVALID = ap_const_logic_0))))) then
                    ap_NS_fsm <= ap_ST_fsm_state4;
                else
                    ap_NS_fsm <= ap_ST_fsm_state3;
                end if;
            when ap_ST_fsm_state4 => 
                if (not(((input_V_data_TVALID = ap_const_logic_0) or (C_data_V_data_01_status = ap_const_logic_0)))) then
                    ap_NS_fsm <= ap_ST_fsm_state3;
                else
                    ap_NS_fsm <= ap_ST_fsm_state4;
                end if;
            when others =>  
                ap_NS_fsm <= "XXXX";
        end case;
    end process;
    C_data_V_data_01_status <= (C_data_V_data_0_full_n and C_data_V_data_1_full_n and C_data_V_data_2_full_n and C_data_V_data_3_full_n);

    C_data_V_data_01_update_assign_proc : process(input_V_data_TVALID, ap_CS_fsm_state4, C_data_V_data_01_status)
    begin
        if (((ap_const_lv1_1 = ap_CS_fsm_state4) and not(((input_V_data_TVALID = ap_const_logic_0) or (C_data_V_data_01_status = ap_const_logic_0))))) then 
            C_data_V_data_01_update <= ap_const_logic_1;
        else 
            C_data_V_data_01_update <= ap_const_logic_0;
        end if; 
    end process;


    C_data_V_data_0_blk_n_assign_proc : process(C_data_V_data_0_full_n, ap_CS_fsm_state4)
    begin
        if (((ap_const_lv1_1 = ap_CS_fsm_state4))) then 
            C_data_V_data_0_blk_n <= C_data_V_data_0_full_n;
        else 
            C_data_V_data_0_blk_n <= ap_const_logic_1;
        end if; 
    end process;

    C_data_V_data_0_din <= tmp_reg_227;
    C_data_V_data_0_write <= C_data_V_data_01_update;

    C_data_V_data_1_blk_n_assign_proc : process(C_data_V_data_1_full_n, ap_CS_fsm_state4)
    begin
        if (((ap_const_lv1_1 = ap_CS_fsm_state4))) then 
            C_data_V_data_1_blk_n <= C_data_V_data_1_full_n;
        else 
            C_data_V_data_1_blk_n <= ap_const_logic_1;
        end if; 
    end process;

    C_data_V_data_1_din <= tmp_12_i_reg_232;
    C_data_V_data_1_write <= C_data_V_data_01_update;

    C_data_V_data_2_blk_n_assign_proc : process(C_data_V_data_2_full_n, ap_CS_fsm_state4)
    begin
        if (((ap_const_lv1_1 = ap_CS_fsm_state4))) then 
            C_data_V_data_2_blk_n <= C_data_V_data_2_full_n;
        else 
            C_data_V_data_2_blk_n <= ap_const_logic_1;
        end if; 
    end process;

    C_data_V_data_2_din <= tmp_2_fu_192_p1;
    C_data_V_data_2_write <= C_data_V_data_01_update;

    C_data_V_data_3_blk_n_assign_proc : process(C_data_V_data_3_full_n, ap_CS_fsm_state4)
    begin
        if (((ap_const_lv1_1 = ap_CS_fsm_state4))) then 
            C_data_V_data_3_blk_n <= C_data_V_data_3_full_n;
        else 
            C_data_V_data_3_blk_n <= ap_const_logic_1;
        end if; 
    end process;

    C_data_V_data_3_din <= grp_fu_132_p4;
    C_data_V_data_3_write <= C_data_V_data_01_update;
    RowOfBlocks_V_fu_159_p2 <= std_logic_vector(unsigned(p_i_reg_110) + unsigned(ap_const_lv12_1));
    ap_CS_fsm_state1 <= ap_CS_fsm(0 downto 0);
    ap_CS_fsm_state2 <= ap_CS_fsm(1 downto 1);
    ap_CS_fsm_state3 <= ap_CS_fsm(2 downto 2);
    ap_CS_fsm_state4 <= ap_CS_fsm(3 downto 3);

    ap_done_assign_proc : process(ap_start, ap_CS_fsm_state1, ap_CS_fsm_state2, tmp_i_fu_154_p2)
    begin
        if ((((ap_const_logic_0 = ap_start) and (ap_CS_fsm_state1 = ap_const_lv1_1)) or ((ap_const_lv1_1 = ap_CS_fsm_state2) and (ap_const_lv1_0 = tmp_i_fu_154_p2)))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_const_logic_0 = ap_start) and (ap_CS_fsm_state1 = ap_const_lv1_1))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_ready_assign_proc : process(ap_CS_fsm_state2, tmp_i_fu_154_p2)
    begin
        if (((ap_const_lv1_1 = ap_CS_fsm_state2) and (ap_const_lv1_0 = tmp_i_fu_154_p2))) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;

    grp_fu_132_p4 <= input_V_data_TDATA(63 downto 32);
    i_V_fu_178_p2 <= std_logic_vector(unsigned(ap_const_lv27_4) + unsigned(p_4_i_reg_121));

    input_V_data_TDATA_blk_n_assign_proc : process(input_V_data_TVALID, ap_CS_fsm_state3, tmp_28_i_fu_169_p2, ap_CS_fsm_state4)
    begin
        if ((((ap_const_lv1_1 = ap_CS_fsm_state3) and not((tmp_28_i_fu_169_p2 = ap_const_lv1_0))) or ((ap_const_lv1_1 = ap_CS_fsm_state4)))) then 
            input_V_data_TDATA_blk_n <= input_V_data_TVALID;
        else 
            input_V_data_TDATA_blk_n <= ap_const_logic_1;
        end if; 
    end process;


    input_V_data_TREADY_assign_proc : process(input_V_data_TVALID, ap_CS_fsm_state3, tmp_28_i_fu_169_p2, ap_CS_fsm_state4, C_data_V_data_01_status)
    begin
        if ((((ap_const_lv1_1 = ap_CS_fsm_state3) and not((tmp_28_i_fu_169_p2 = ap_const_lv1_0)) and not((not((tmp_28_i_fu_169_p2 = ap_const_lv1_0)) and (input_V_data_TVALID = ap_const_logic_0)))) or ((ap_const_lv1_1 = ap_CS_fsm_state4) and not(((input_V_data_TVALID = ap_const_logic_0) or (C_data_V_data_01_status = ap_const_logic_0)))))) then 
            input_V_data_TREADY <= ap_const_logic_1;
        else 
            input_V_data_TREADY <= ap_const_logic_0;
        end if; 
    end process;

    p_cast_i_fu_150_p1 <= std_logic_vector(resize(unsigned(p_i_reg_110),27));
    r_V_fu_142_p3 <= (simConfig_BLOCK_NUMBERS_V_read & ap_const_lv4_0);
        tmp_27_cast_cast_i_fu_165_p1 <= std_logic_vector(resize(signed(p_4_i_reg_121),31));

    tmp_28_i_fu_169_p2 <= "1" when (signed(tmp_27_cast_cast_i_fu_165_p1) < signed(r_V_reg_211)) else "0";
    tmp_2_fu_192_p1 <= input_V_data_TDATA(32 - 1 downto 0);
    tmp_fu_174_p1 <= input_V_data_TDATA(32 - 1 downto 0);
    tmp_i_fu_154_p2 <= "1" when (signed(p_cast_i_fu_150_p1) < signed(simConfig_rowsToSimulate_V_read)) else "0";
end behav;
