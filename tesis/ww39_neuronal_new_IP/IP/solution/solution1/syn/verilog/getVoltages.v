// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2016.4
// Copyright (C) 1986-2017 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module getVoltages (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        input_V_data_TDATA,
        input_V_data_TVALID,
        input_V_data_TREADY,
        V_SIZE,
        V_data_V_data_0_din,
        V_data_V_data_0_full_n,
        V_data_V_data_0_write,
        V_data_V_data_1_din,
        V_data_V_data_1_full_n,
        V_data_V_data_1_write,
        V_data_V_data_2_din,
        V_data_V_data_2_full_n,
        V_data_V_data_2_write,
        V_data_V_data_3_din,
        V_data_V_data_3_full_n,
        V_data_V_data_3_write
);

parameter    ap_ST_fsm_state1 = 3'b1;
parameter    ap_ST_fsm_state2 = 3'b10;
parameter    ap_ST_fsm_state3 = 3'b100;
parameter    ap_const_lv32_0 = 32'b00000000000000000000000000000000;
parameter    ap_const_lv32_1 = 32'b1;
parameter    ap_const_lv32_2 = 32'b10;
parameter    ap_const_lv27_0 = 27'b000000000000000000000000000;
parameter    ap_const_lv32_20 = 32'b100000;
parameter    ap_const_lv32_3F = 32'b111111;
parameter    ap_const_lv27_4 = 27'b100;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
input  [63:0] input_V_data_TDATA;
input   input_V_data_TVALID;
output   input_V_data_TREADY;
input  [31:0] V_SIZE;
output  [31:0] V_data_V_data_0_din;
input   V_data_V_data_0_full_n;
output   V_data_V_data_0_write;
output  [31:0] V_data_V_data_1_din;
input   V_data_V_data_1_full_n;
output   V_data_V_data_1_write;
output  [31:0] V_data_V_data_2_din;
input   V_data_V_data_2_full_n;
output   V_data_V_data_2_write;
output  [31:0] V_data_V_data_3_din;
input   V_data_V_data_3_full_n;
output   V_data_V_data_3_write;

reg ap_done;
reg ap_idle;
reg ap_ready;
reg input_V_data_TREADY;

(* fsm_encoding = "none" *) reg   [2:0] ap_CS_fsm;
wire   [0:0] ap_CS_fsm_state1;
reg    input_V_data_TDATA_blk_n;
wire   [0:0] ap_CS_fsm_state2;
wire   [0:0] tmp_22_i_fu_113_p2;
wire   [0:0] ap_CS_fsm_state3;
reg    V_data_V_data_0_blk_n;
reg    V_data_V_data_1_blk_n;
reg    V_data_V_data_2_blk_n;
reg    V_data_V_data_3_blk_n;
wire   [31:0] tmp_fu_118_p1;
reg   [31:0] tmp_reg_158;
wire   [31:0] grp_fu_99_p4;
reg   [31:0] tmp_4_i_reg_163;
wire   [26:0] i_V_fu_122_p2;
reg   [26:0] i_V_reg_168;
reg   [26:0] p_i_reg_88;
wire    V_data_V_data_01_status;
reg    V_data_V_data_01_update;
wire  signed [31:0] tmp_i_fu_109_p1;
wire   [31:0] tmp_1_fu_136_p1;
reg   [2:0] ap_NS_fsm;

// power-on initialization
initial begin
#0 ap_CS_fsm = 3'b1;
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (((ap_CS_fsm_state1 == 1'b1) & ~(ap_start == 1'b0))) begin
        p_i_reg_88 <= ap_const_lv27_0;
    end else if (((1'b1 == ap_CS_fsm_state3) & ~((input_V_data_TVALID == 1'b0) | (V_data_V_data_01_status == 1'b0)))) begin
        p_i_reg_88 <= i_V_reg_168;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state2) & ~(tmp_22_i_fu_113_p2 == 1'b0) & ~(~(tmp_22_i_fu_113_p2 == 1'b0) & (input_V_data_TVALID == 1'b0)))) begin
        i_V_reg_168 <= i_V_fu_122_p2;
        tmp_4_i_reg_163 <= {{input_V_data_TDATA[ap_const_lv32_3F : ap_const_lv32_20]}};
        tmp_reg_158 <= tmp_fu_118_p1;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state3) & ~((input_V_data_TVALID == 1'b0) | (V_data_V_data_01_status == 1'b0)))) begin
        V_data_V_data_01_update = 1'b1;
    end else begin
        V_data_V_data_01_update = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        V_data_V_data_0_blk_n = V_data_V_data_0_full_n;
    end else begin
        V_data_V_data_0_blk_n = 1'b1;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        V_data_V_data_1_blk_n = V_data_V_data_1_full_n;
    end else begin
        V_data_V_data_1_blk_n = 1'b1;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        V_data_V_data_2_blk_n = V_data_V_data_2_full_n;
    end else begin
        V_data_V_data_2_blk_n = 1'b1;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        V_data_V_data_3_blk_n = V_data_V_data_3_full_n;
    end else begin
        V_data_V_data_3_blk_n = 1'b1;
    end
end

always @ (*) begin
    if ((((1'b0 == ap_start) & (ap_CS_fsm_state1 == 1'b1)) | ((1'b1 == ap_CS_fsm_state2) & (tmp_22_i_fu_113_p2 == 1'b0) & ~(~(tmp_22_i_fu_113_p2 == 1'b0) & (input_V_data_TVALID == 1'b0))))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_start) & (ap_CS_fsm_state1 == 1'b1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state2) & (tmp_22_i_fu_113_p2 == 1'b0) & ~(~(tmp_22_i_fu_113_p2 == 1'b0) & (input_V_data_TVALID == 1'b0)))) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if ((((1'b1 == ap_CS_fsm_state2) & ~(tmp_22_i_fu_113_p2 == 1'b0)) | (1'b1 == ap_CS_fsm_state3))) begin
        input_V_data_TDATA_blk_n = input_V_data_TVALID;
    end else begin
        input_V_data_TDATA_blk_n = 1'b1;
    end
end

always @ (*) begin
    if ((((1'b1 == ap_CS_fsm_state2) & ~(tmp_22_i_fu_113_p2 == 1'b0) & ~(~(tmp_22_i_fu_113_p2 == 1'b0) & (input_V_data_TVALID == 1'b0))) | ((1'b1 == ap_CS_fsm_state3) & ~((input_V_data_TVALID == 1'b0) | (V_data_V_data_01_status == 1'b0))))) begin
        input_V_data_TREADY = 1'b1;
    end else begin
        input_V_data_TREADY = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if (~(ap_start == 1'b0)) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_state2 : begin
            if (((tmp_22_i_fu_113_p2 == 1'b0) & ~(~(tmp_22_i_fu_113_p2 == 1'b0) & (input_V_data_TVALID == 1'b0)))) begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end else if ((~(tmp_22_i_fu_113_p2 == 1'b0) & ~(~(tmp_22_i_fu_113_p2 == 1'b0) & (input_V_data_TVALID == 1'b0)))) begin
                ap_NS_fsm = ap_ST_fsm_state3;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end
        end
        ap_ST_fsm_state3 : begin
            if (~((input_V_data_TVALID == 1'b0) | (V_data_V_data_01_status == 1'b0))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state3;
            end
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign V_data_V_data_01_status = (V_data_V_data_0_full_n & V_data_V_data_1_full_n & V_data_V_data_2_full_n & V_data_V_data_3_full_n);

assign V_data_V_data_0_din = tmp_reg_158;

assign V_data_V_data_0_write = V_data_V_data_01_update;

assign V_data_V_data_1_din = tmp_4_i_reg_163;

assign V_data_V_data_1_write = V_data_V_data_01_update;

assign V_data_V_data_2_din = tmp_1_fu_136_p1;

assign V_data_V_data_2_write = V_data_V_data_01_update;

assign V_data_V_data_3_din = grp_fu_99_p4;

assign V_data_V_data_3_write = V_data_V_data_01_update;

assign ap_CS_fsm_state1 = ap_CS_fsm[ap_const_lv32_0];

assign ap_CS_fsm_state2 = ap_CS_fsm[ap_const_lv32_1];

assign ap_CS_fsm_state3 = ap_CS_fsm[ap_const_lv32_2];

assign grp_fu_99_p4 = {{input_V_data_TDATA[ap_const_lv32_3F : ap_const_lv32_20]}};

assign i_V_fu_122_p2 = (ap_const_lv27_4 + p_i_reg_88);

assign tmp_1_fu_136_p1 = input_V_data_TDATA[31:0];

assign tmp_22_i_fu_113_p2 = (($signed(tmp_i_fu_109_p1) < $signed(V_SIZE)) ? 1'b1 : 1'b0);

assign tmp_fu_118_p1 = input_V_data_TDATA[31:0];

assign tmp_i_fu_109_p1 = $signed(p_i_reg_88);

endmodule //getVoltages
