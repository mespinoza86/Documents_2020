// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2016.4
// Copyright (C) 1986-2017 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

#include "getTotalCurrent.h"
#include "AESL_pkg.h"

using namespace std;

namespace ap_rtl {

const sc_logic getTotalCurrent::ap_const_logic_1 = sc_dt::Log_1;
const sc_logic getTotalCurrent::ap_const_logic_0 = sc_dt::Log_0;
const sc_lv<22> getTotalCurrent::ap_ST_fsm_state1 = "1";
const sc_lv<22> getTotalCurrent::ap_ST_fsm_state2 = "10";
const sc_lv<22> getTotalCurrent::ap_ST_fsm_state3 = "100";
const sc_lv<22> getTotalCurrent::ap_ST_fsm_state4 = "1000";
const sc_lv<22> getTotalCurrent::ap_ST_fsm_state5 = "10000";
const sc_lv<22> getTotalCurrent::ap_ST_fsm_state6 = "100000";
const sc_lv<22> getTotalCurrent::ap_ST_fsm_state7 = "1000000";
const sc_lv<22> getTotalCurrent::ap_ST_fsm_state8 = "10000000";
const sc_lv<22> getTotalCurrent::ap_ST_fsm_state9 = "100000000";
const sc_lv<22> getTotalCurrent::ap_ST_fsm_state10 = "1000000000";
const sc_lv<22> getTotalCurrent::ap_ST_fsm_state11 = "10000000000";
const sc_lv<22> getTotalCurrent::ap_ST_fsm_state12 = "100000000000";
const sc_lv<22> getTotalCurrent::ap_ST_fsm_state13 = "1000000000000";
const sc_lv<22> getTotalCurrent::ap_ST_fsm_state14 = "10000000000000";
const sc_lv<22> getTotalCurrent::ap_ST_fsm_state15 = "100000000000000";
const sc_lv<22> getTotalCurrent::ap_ST_fsm_state16 = "1000000000000000";
const sc_lv<22> getTotalCurrent::ap_ST_fsm_state17 = "10000000000000000";
const sc_lv<22> getTotalCurrent::ap_ST_fsm_state18 = "100000000000000000";
const sc_lv<22> getTotalCurrent::ap_ST_fsm_state19 = "1000000000000000000";
const sc_lv<22> getTotalCurrent::ap_ST_fsm_state20 = "10000000000000000000";
const sc_lv<22> getTotalCurrent::ap_ST_fsm_state21 = "100000000000000000000";
const sc_lv<22> getTotalCurrent::ap_ST_fsm_state22 = "1000000000000000000000";
const sc_lv<32> getTotalCurrent::ap_const_lv32_0 = "00000000000000000000000000000000";
const sc_lv<1> getTotalCurrent::ap_const_lv1_1 = "1";
const sc_lv<32> getTotalCurrent::ap_const_lv32_15 = "10101";
const sc_lv<32> getTotalCurrent::ap_const_lv32_1 = "1";
const sc_lv<32> getTotalCurrent::ap_const_lv32_2 = "10";
const sc_lv<32> getTotalCurrent::ap_const_lv32_B = "1011";
const sc_lv<32> getTotalCurrent::ap_const_lv32_13 = "10011";
const sc_lv<32> getTotalCurrent::ap_const_lv32_14 = "10100";
const sc_lv<32> getTotalCurrent::ap_const_lv32_C = "1100";
const sc_lv<64> getTotalCurrent::ap_const_lv64_3FE999999999999A = "11111111101001100110011001100110011001100110011001100110011010";
const sc_lv<32> getTotalCurrent::ap_const_lv32_3 = "11";
const sc_lv<64> getTotalCurrent::ap_const_lv64_3FC999999999999A = "11111111001001100110011001100110011001100110011001100110011010";
const sc_lv<3> getTotalCurrent::ap_const_lv3_3 = "11";
const sc_lv<28> getTotalCurrent::ap_const_lv28_FFFFFFF = "1111111111111111111111111111";

getTotalCurrent::getTotalCurrent(sc_module_name name) : sc_module(name), mVcdFile(0) {
    GapJunctionIP_fptxdS_U188 = new GapJunctionIP_fptxdS<1,2,64,32>("GapJunctionIP_fptxdS_U188");
    GapJunctionIP_fptxdS_U188->clk(ap_clk);
    GapJunctionIP_fptxdS_U188->reset(ap_rst);
    GapJunctionIP_fptxdS_U188->din0(tmp_4_reg_200);
    GapJunctionIP_fptxdS_U188->ce(grp_fu_94_ce);
    GapJunctionIP_fptxdS_U188->dout(grp_fu_94_p1);
    GapJunctionIP_fpeyd2_U189 = new GapJunctionIP_fpeyd2<1,1,32,64>("GapJunctionIP_fpeyd2_U189");
    GapJunctionIP_fpeyd2_U189->din0(F_temp_data_load_reg_170);
    GapJunctionIP_fpeyd2_U189->dout(tmp_s_fu_98_p1);
    GapJunctionIP_fpeyd2_U190 = new GapJunctionIP_fpeyd2<1,1,32,64>("GapJunctionIP_fpeyd2_U190");
    GapJunctionIP_fpeyd2_U190->din0(V_temp_data_load_reg_175);
    GapJunctionIP_fpeyd2_U190->dout(tmp_2_fu_101_p1);
    GapJunctionIP_dadzec_U191 = new GapJunctionIP_dadzec<1,8,64,64,64>("GapJunctionIP_dadzec_U191");
    GapJunctionIP_dadzec_U191->clk(ap_clk);
    GapJunctionIP_dadzec_U191->reset(ap_rst);
    GapJunctionIP_dadzec_U191->din0(tmp_1_reg_190);
    GapJunctionIP_dadzec_U191->din1(tmp_3_reg_195);
    GapJunctionIP_dadzec_U191->ce(ap_var_for_const0);
    GapJunctionIP_dadzec_U191->dout(grp_fu_104_p2);
    GapJunctionIP_dmuAem_U192 = new GapJunctionIP_dmuAem<1,9,64,64,64>("GapJunctionIP_dmuAem_U192");
    GapJunctionIP_dmuAem_U192->clk(ap_clk);
    GapJunctionIP_dmuAem_U192->reset(ap_rst);
    GapJunctionIP_dmuAem_U192->din0(tmp_s_reg_180);
    GapJunctionIP_dmuAem_U192->din1(ap_var_for_const1);
    GapJunctionIP_dmuAem_U192->ce(ap_var_for_const0);
    GapJunctionIP_dmuAem_U192->dout(grp_fu_108_p2);
    GapJunctionIP_dmuAem_U193 = new GapJunctionIP_dmuAem<1,9,64,64,64>("GapJunctionIP_dmuAem_U193");
    GapJunctionIP_dmuAem_U193->clk(ap_clk);
    GapJunctionIP_dmuAem_U193->reset(ap_rst);
    GapJunctionIP_dmuAem_U193->din0(tmp_2_reg_185);
    GapJunctionIP_dmuAem_U193->din1(ap_var_for_const2);
    GapJunctionIP_dmuAem_U193->ce(ap_var_for_const0);
    GapJunctionIP_dmuAem_U193->dout(grp_fu_113_p2);

    SC_METHOD(thread_ap_clk_no_reset_);
    dont_initialize();
    sensitive << ( ap_clk.pos() );

    SC_METHOD(thread_F_temp_data_address0);
    sensitive << ( ap_CS_fsm_state1 );
    sensitive << ( tmp_fu_118_p1 );

    SC_METHOD(thread_F_temp_data_ce0);
    sensitive << ( ap_start );
    sensitive << ( ap_CS_fsm_state1 );

    SC_METHOD(thread_V_temp_data_address0);
    sensitive << ( ap_CS_fsm_state1 );
    sensitive << ( tmp_fu_118_p1 );

    SC_METHOD(thread_V_temp_data_ce0);
    sensitive << ( ap_start );
    sensitive << ( ap_CS_fsm_state1 );

    SC_METHOD(thread_ap_CS_fsm_state1);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state12);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state13);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state2);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state20);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state21);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state22);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state3);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state4);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_done);
    sensitive << ( ap_start );
    sensitive << ( ap_CS_fsm_state1 );
    sensitive << ( ap_CS_fsm_state22 );
    sensitive << ( ap_sig_ioackin_output_r_TREADY );

    SC_METHOD(thread_ap_idle);
    sensitive << ( ap_start );
    sensitive << ( ap_CS_fsm_state1 );

    SC_METHOD(thread_ap_ready);
    sensitive << ( ap_CS_fsm_state22 );
    sensitive << ( ap_sig_ioackin_output_r_TREADY );

    SC_METHOD(thread_ap_sig_ioackin_output_r_TREADY);
    sensitive << ( output_r_TREADY );
    sensitive << ( ap_reg_ioackin_output_r_TREADY );

    SC_METHOD(thread_grp_fu_94_ce);
    sensitive << ( ap_CS_fsm_state22 );
    sensitive << ( ap_CS_fsm_state21 );
    sensitive << ( ap_sig_ioackin_output_r_TREADY );

    SC_METHOD(thread_lhs_V_i_cast_fu_130_p1);
    sensitive << ( simConfig_rowsToSimulate_V_read );

    SC_METHOD(thread_output_r_TDATA);
    sensitive << ( ap_CS_fsm_state22 );
    sensitive << ( grp_fu_94_p1 );

    SC_METHOD(thread_output_r_TDATA_blk_n);
    sensitive << ( output_r_TREADY );
    sensitive << ( ap_CS_fsm_state22 );

    SC_METHOD(thread_output_r_TLAST);
    sensitive << ( ap_CS_fsm_state22 );
    sensitive << ( tmp_i_reg_165 );
    sensitive << ( tmp_10_i_reg_205 );

    SC_METHOD(thread_output_r_TVALID);
    sensitive << ( ap_CS_fsm_state22 );
    sensitive << ( ap_reg_ioackin_output_r_TREADY );

    SC_METHOD(thread_r_V_fu_134_p2);
    sensitive << ( lhs_V_i_cast_fu_130_p1 );

    SC_METHOD(thread_tmp_10_i_fu_144_p2);
    sensitive << ( ap_CS_fsm_state21 );
    sensitive << ( tmp_i_cast_fu_140_p1 );
    sensitive << ( r_V_fu_134_p2 );

    SC_METHOD(thread_tmp_fu_118_p1);
    sensitive << ( row_V );

    SC_METHOD(thread_tmp_i_cast_fu_140_p1);
    sensitive << ( RowOfBlocks_V_read );

    SC_METHOD(thread_tmp_i_fu_124_p2);
    sensitive << ( ap_start );
    sensitive << ( ap_CS_fsm_state1 );
    sensitive << ( row_V );

    SC_METHOD(thread_ap_NS_fsm);
    sensitive << ( ap_start );
    sensitive << ( ap_CS_fsm );
    sensitive << ( ap_sig_ioackin_output_r_TREADY );

    SC_THREAD(thread_ap_var_for_const0);

    SC_THREAD(thread_ap_var_for_const1);

    SC_THREAD(thread_ap_var_for_const2);

    ap_CS_fsm = "0000000000000000000001";
    ap_reg_ioackin_output_r_TREADY = SC_LOGIC_0;
    static int apTFileNum = 0;
    stringstream apTFilenSS;
    apTFilenSS << "getTotalCurrent_sc_trace_" << apTFileNum ++;
    string apTFn = apTFilenSS.str();
    mVcdFile = sc_create_vcd_trace_file(apTFn.c_str());
    mVcdFile->set_time_unit(1, SC_PS);
    if (1) {
#ifdef __HLS_TRACE_LEVEL_PORT_HIER__
    sc_trace(mVcdFile, ap_clk, "(port)ap_clk");
    sc_trace(mVcdFile, ap_rst, "(port)ap_rst");
    sc_trace(mVcdFile, ap_start, "(port)ap_start");
    sc_trace(mVcdFile, ap_done, "(port)ap_done");
    sc_trace(mVcdFile, ap_idle, "(port)ap_idle");
    sc_trace(mVcdFile, ap_ready, "(port)ap_ready");
    sc_trace(mVcdFile, row_V, "(port)row_V");
    sc_trace(mVcdFile, output_r_TDATA, "(port)output_r_TDATA");
    sc_trace(mVcdFile, output_r_TVALID, "(port)output_r_TVALID");
    sc_trace(mVcdFile, output_r_TREADY, "(port)output_r_TREADY");
    sc_trace(mVcdFile, output_r_TLAST, "(port)output_r_TLAST");
    sc_trace(mVcdFile, RowOfBlocks_V_read, "(port)RowOfBlocks_V_read");
    sc_trace(mVcdFile, simConfig_rowsToSimulate_V_read, "(port)simConfig_rowsToSimulate_V_read");
    sc_trace(mVcdFile, F_temp_data_address0, "(port)F_temp_data_address0");
    sc_trace(mVcdFile, F_temp_data_ce0, "(port)F_temp_data_ce0");
    sc_trace(mVcdFile, F_temp_data_q0, "(port)F_temp_data_q0");
    sc_trace(mVcdFile, V_temp_data_address0, "(port)V_temp_data_address0");
    sc_trace(mVcdFile, V_temp_data_ce0, "(port)V_temp_data_ce0");
    sc_trace(mVcdFile, V_temp_data_q0, "(port)V_temp_data_q0");
#endif
#ifdef __HLS_TRACE_LEVEL_INT__
    sc_trace(mVcdFile, ap_CS_fsm, "ap_CS_fsm");
    sc_trace(mVcdFile, ap_CS_fsm_state1, "ap_CS_fsm_state1");
    sc_trace(mVcdFile, output_r_TDATA_blk_n, "output_r_TDATA_blk_n");
    sc_trace(mVcdFile, ap_CS_fsm_state22, "ap_CS_fsm_state22");
    sc_trace(mVcdFile, tmp_i_fu_124_p2, "tmp_i_fu_124_p2");
    sc_trace(mVcdFile, tmp_i_reg_165, "tmp_i_reg_165");
    sc_trace(mVcdFile, F_temp_data_load_reg_170, "F_temp_data_load_reg_170");
    sc_trace(mVcdFile, ap_CS_fsm_state2, "ap_CS_fsm_state2");
    sc_trace(mVcdFile, V_temp_data_load_reg_175, "V_temp_data_load_reg_175");
    sc_trace(mVcdFile, tmp_s_fu_98_p1, "tmp_s_fu_98_p1");
    sc_trace(mVcdFile, tmp_s_reg_180, "tmp_s_reg_180");
    sc_trace(mVcdFile, ap_CS_fsm_state3, "ap_CS_fsm_state3");
    sc_trace(mVcdFile, tmp_2_fu_101_p1, "tmp_2_fu_101_p1");
    sc_trace(mVcdFile, tmp_2_reg_185, "tmp_2_reg_185");
    sc_trace(mVcdFile, grp_fu_108_p2, "grp_fu_108_p2");
    sc_trace(mVcdFile, tmp_1_reg_190, "tmp_1_reg_190");
    sc_trace(mVcdFile, ap_CS_fsm_state12, "ap_CS_fsm_state12");
    sc_trace(mVcdFile, grp_fu_113_p2, "grp_fu_113_p2");
    sc_trace(mVcdFile, tmp_3_reg_195, "tmp_3_reg_195");
    sc_trace(mVcdFile, grp_fu_104_p2, "grp_fu_104_p2");
    sc_trace(mVcdFile, tmp_4_reg_200, "tmp_4_reg_200");
    sc_trace(mVcdFile, ap_CS_fsm_state20, "ap_CS_fsm_state20");
    sc_trace(mVcdFile, tmp_10_i_fu_144_p2, "tmp_10_i_fu_144_p2");
    sc_trace(mVcdFile, tmp_10_i_reg_205, "tmp_10_i_reg_205");
    sc_trace(mVcdFile, ap_CS_fsm_state21, "ap_CS_fsm_state21");
    sc_trace(mVcdFile, tmp_fu_118_p1, "tmp_fu_118_p1");
    sc_trace(mVcdFile, grp_fu_94_p1, "grp_fu_94_p1");
    sc_trace(mVcdFile, ap_reg_ioackin_output_r_TREADY, "ap_reg_ioackin_output_r_TREADY");
    sc_trace(mVcdFile, ap_sig_ioackin_output_r_TREADY, "ap_sig_ioackin_output_r_TREADY");
    sc_trace(mVcdFile, ap_CS_fsm_state13, "ap_CS_fsm_state13");
    sc_trace(mVcdFile, ap_CS_fsm_state4, "ap_CS_fsm_state4");
    sc_trace(mVcdFile, lhs_V_i_cast_fu_130_p1, "lhs_V_i_cast_fu_130_p1");
    sc_trace(mVcdFile, tmp_i_cast_fu_140_p1, "tmp_i_cast_fu_140_p1");
    sc_trace(mVcdFile, r_V_fu_134_p2, "r_V_fu_134_p2");
    sc_trace(mVcdFile, grp_fu_94_ce, "grp_fu_94_ce");
    sc_trace(mVcdFile, ap_NS_fsm, "ap_NS_fsm");
#endif

    }
}

getTotalCurrent::~getTotalCurrent() {
    if (mVcdFile) 
        sc_close_vcd_trace_file(mVcdFile);

    delete GapJunctionIP_fptxdS_U188;
    delete GapJunctionIP_fpeyd2_U189;
    delete GapJunctionIP_fpeyd2_U190;
    delete GapJunctionIP_dadzec_U191;
    delete GapJunctionIP_dmuAem_U192;
    delete GapJunctionIP_dmuAem_U193;
}

void getTotalCurrent::thread_ap_var_for_const0() {
    ap_var_for_const0 = ap_const_logic_1;
}

void getTotalCurrent::thread_ap_var_for_const1() {
    ap_var_for_const1 = ap_const_lv64_3FE999999999999A;
}

void getTotalCurrent::thread_ap_var_for_const2() {
    ap_var_for_const2 = ap_const_lv64_3FC999999999999A;
}

void getTotalCurrent::thread_ap_clk_no_reset_() {
    if ( ap_rst.read() == ap_const_logic_1) {
        ap_CS_fsm = ap_ST_fsm_state1;
    } else {
        ap_CS_fsm = ap_NS_fsm.read();
    }
    if ( ap_rst.read() == ap_const_logic_1) {
        ap_reg_ioackin_output_r_TREADY = ap_const_logic_0;
    } else {
        if (((esl_seteq<1,1,1>(ap_const_lv1_1, ap_CS_fsm_state22.read()) && 
              !esl_seteq<1,1,1>(ap_const_logic_0, ap_sig_ioackin_output_r_TREADY.read())))) {
            ap_reg_ioackin_output_r_TREADY = ap_const_logic_0;
        } else if (((esl_seteq<1,1,1>(ap_const_lv1_1, ap_CS_fsm_state22.read()) && 
                     esl_seteq<1,1,1>(ap_const_logic_1, output_r_TREADY.read())))) {
            ap_reg_ioackin_output_r_TREADY = ap_const_logic_1;
        }
    }
    if ((esl_seteq<1,1,1>(ap_const_lv1_1, ap_CS_fsm_state2.read()))) {
        F_temp_data_load_reg_170 = F_temp_data_q0.read();
        V_temp_data_load_reg_175 = V_temp_data_q0.read();
    }
    if ((esl_seteq<1,1,1>(ap_const_lv1_1, ap_CS_fsm_state21.read()))) {
        tmp_10_i_reg_205 = tmp_10_i_fu_144_p2.read();
    }
    if ((esl_seteq<1,1,1>(ap_const_lv1_1, ap_CS_fsm_state12.read()))) {
        tmp_1_reg_190 = grp_fu_108_p2.read();
        tmp_3_reg_195 = grp_fu_113_p2.read();
    }
    if ((esl_seteq<1,1,1>(ap_const_lv1_1, ap_CS_fsm_state3.read()))) {
        tmp_2_reg_185 = tmp_2_fu_101_p1.read();
        tmp_s_reg_180 = tmp_s_fu_98_p1.read();
    }
    if ((esl_seteq<1,1,1>(ap_const_lv1_1, ap_CS_fsm_state20.read()))) {
        tmp_4_reg_200 = grp_fu_104_p2.read();
    }
    if ((esl_seteq<1,1,1>(ap_CS_fsm_state1.read(), ap_const_lv1_1) && !esl_seteq<1,1,1>(ap_start.read(), ap_const_logic_0))) {
        tmp_i_reg_165 = tmp_i_fu_124_p2.read();
    }
}

void getTotalCurrent::thread_F_temp_data_address0() {
    F_temp_data_address0 =  (sc_lv<2>) (tmp_fu_118_p1.read());
}

void getTotalCurrent::thread_F_temp_data_ce0() {
    if ((esl_seteq<1,1,1>(ap_CS_fsm_state1.read(), ap_const_lv1_1) && 
         !esl_seteq<1,1,1>(ap_start.read(), ap_const_logic_0))) {
        F_temp_data_ce0 = ap_const_logic_1;
    } else {
        F_temp_data_ce0 = ap_const_logic_0;
    }
}

void getTotalCurrent::thread_V_temp_data_address0() {
    V_temp_data_address0 =  (sc_lv<2>) (tmp_fu_118_p1.read());
}

void getTotalCurrent::thread_V_temp_data_ce0() {
    if ((esl_seteq<1,1,1>(ap_CS_fsm_state1.read(), ap_const_lv1_1) && 
         !esl_seteq<1,1,1>(ap_start.read(), ap_const_logic_0))) {
        V_temp_data_ce0 = ap_const_logic_1;
    } else {
        V_temp_data_ce0 = ap_const_logic_0;
    }
}

void getTotalCurrent::thread_ap_CS_fsm_state1() {
    ap_CS_fsm_state1 = ap_CS_fsm.read().range(0, 0);
}

void getTotalCurrent::thread_ap_CS_fsm_state12() {
    ap_CS_fsm_state12 = ap_CS_fsm.read().range(11, 11);
}

void getTotalCurrent::thread_ap_CS_fsm_state13() {
    ap_CS_fsm_state13 = ap_CS_fsm.read().range(12, 12);
}

void getTotalCurrent::thread_ap_CS_fsm_state2() {
    ap_CS_fsm_state2 = ap_CS_fsm.read().range(1, 1);
}

void getTotalCurrent::thread_ap_CS_fsm_state20() {
    ap_CS_fsm_state20 = ap_CS_fsm.read().range(19, 19);
}

void getTotalCurrent::thread_ap_CS_fsm_state21() {
    ap_CS_fsm_state21 = ap_CS_fsm.read().range(20, 20);
}

void getTotalCurrent::thread_ap_CS_fsm_state22() {
    ap_CS_fsm_state22 = ap_CS_fsm.read().range(21, 21);
}

void getTotalCurrent::thread_ap_CS_fsm_state3() {
    ap_CS_fsm_state3 = ap_CS_fsm.read().range(2, 2);
}

void getTotalCurrent::thread_ap_CS_fsm_state4() {
    ap_CS_fsm_state4 = ap_CS_fsm.read().range(3, 3);
}

void getTotalCurrent::thread_ap_done() {
    if (((esl_seteq<1,1,1>(ap_const_logic_0, ap_start.read()) && 
          esl_seteq<1,1,1>(ap_CS_fsm_state1.read(), ap_const_lv1_1)) || 
         (esl_seteq<1,1,1>(ap_const_lv1_1, ap_CS_fsm_state22.read()) && 
          !esl_seteq<1,1,1>(ap_const_logic_0, ap_sig_ioackin_output_r_TREADY.read())))) {
        ap_done = ap_const_logic_1;
    } else {
        ap_done = ap_const_logic_0;
    }
}

void getTotalCurrent::thread_ap_idle() {
    if ((esl_seteq<1,1,1>(ap_const_logic_0, ap_start.read()) && 
         esl_seteq<1,1,1>(ap_CS_fsm_state1.read(), ap_const_lv1_1))) {
        ap_idle = ap_const_logic_1;
    } else {
        ap_idle = ap_const_logic_0;
    }
}

void getTotalCurrent::thread_ap_ready() {
    if ((esl_seteq<1,1,1>(ap_const_lv1_1, ap_CS_fsm_state22.read()) && 
         !esl_seteq<1,1,1>(ap_const_logic_0, ap_sig_ioackin_output_r_TREADY.read()))) {
        ap_ready = ap_const_logic_1;
    } else {
        ap_ready = ap_const_logic_0;
    }
}

void getTotalCurrent::thread_ap_sig_ioackin_output_r_TREADY() {
    if (esl_seteq<1,1,1>(ap_const_logic_0, ap_reg_ioackin_output_r_TREADY.read())) {
        ap_sig_ioackin_output_r_TREADY = output_r_TREADY.read();
    } else {
        ap_sig_ioackin_output_r_TREADY = ap_const_logic_1;
    }
}

void getTotalCurrent::thread_grp_fu_94_ce() {
    if ((esl_seteq<1,1,1>(ap_const_lv1_1, ap_CS_fsm_state21.read()) || 
         (esl_seteq<1,1,1>(ap_const_lv1_1, ap_CS_fsm_state22.read()) && 
          !esl_seteq<1,1,1>(ap_const_logic_0, ap_sig_ioackin_output_r_TREADY.read())))) {
        grp_fu_94_ce = ap_const_logic_1;
    } else {
        grp_fu_94_ce = ap_const_logic_0;
    }
}

void getTotalCurrent::thread_lhs_V_i_cast_fu_130_p1() {
    lhs_V_i_cast_fu_130_p1 = esl_sext<28,27>(simConfig_rowsToSimulate_V_read.read());
}

void getTotalCurrent::thread_output_r_TDATA() {
    output_r_TDATA = grp_fu_94_p1.read();
}

void getTotalCurrent::thread_output_r_TDATA_blk_n() {
    if ((esl_seteq<1,1,1>(ap_const_lv1_1, ap_CS_fsm_state22.read()))) {
        output_r_TDATA_blk_n = output_r_TREADY.read();
    } else {
        output_r_TDATA_blk_n = ap_const_logic_1;
    }
}

void getTotalCurrent::thread_output_r_TLAST() {
    output_r_TLAST = (tmp_i_reg_165.read() & tmp_10_i_reg_205.read());
}

void getTotalCurrent::thread_output_r_TVALID() {
    if (((esl_seteq<1,1,1>(ap_const_lv1_1, ap_CS_fsm_state22.read()) && 
          esl_seteq<1,1,1>(ap_const_logic_0, ap_reg_ioackin_output_r_TREADY.read())))) {
        output_r_TVALID = ap_const_logic_1;
    } else {
        output_r_TVALID = ap_const_logic_0;
    }
}

void getTotalCurrent::thread_r_V_fu_134_p2() {
    r_V_fu_134_p2 = (!lhs_V_i_cast_fu_130_p1.read().is_01() || !ap_const_lv28_FFFFFFF.is_01())? sc_lv<28>(): (sc_bigint<28>(lhs_V_i_cast_fu_130_p1.read()) + sc_bigint<28>(ap_const_lv28_FFFFFFF));
}

void getTotalCurrent::thread_tmp_10_i_fu_144_p2() {
    tmp_10_i_fu_144_p2 = (!tmp_i_cast_fu_140_p1.read().is_01() || !r_V_fu_134_p2.read().is_01())? sc_lv<1>(): sc_lv<1>(tmp_i_cast_fu_140_p1.read() == r_V_fu_134_p2.read());
}

void getTotalCurrent::thread_tmp_fu_118_p1() {
    tmp_fu_118_p1 = esl_zext<64,3>(row_V.read());
}

void getTotalCurrent::thread_tmp_i_cast_fu_140_p1() {
    tmp_i_cast_fu_140_p1 = esl_zext<28,26>(RowOfBlocks_V_read.read());
}

void getTotalCurrent::thread_tmp_i_fu_124_p2() {
    tmp_i_fu_124_p2 = (!row_V.read().is_01() || !ap_const_lv3_3.is_01())? sc_lv<1>(): sc_lv<1>(row_V.read() == ap_const_lv3_3);
}

void getTotalCurrent::thread_ap_NS_fsm() {
    switch (ap_CS_fsm.read().to_uint64()) {
        case 1 : 
            if (!esl_seteq<1,1,1>(ap_start.read(), ap_const_logic_0)) {
                ap_NS_fsm = ap_ST_fsm_state2;
            } else {
                ap_NS_fsm = ap_ST_fsm_state1;
            }
            break;
        case 2 : 
            ap_NS_fsm = ap_ST_fsm_state3;
            break;
        case 4 : 
            ap_NS_fsm = ap_ST_fsm_state4;
            break;
        case 8 : 
            ap_NS_fsm = ap_ST_fsm_state5;
            break;
        case 16 : 
            ap_NS_fsm = ap_ST_fsm_state6;
            break;
        case 32 : 
            ap_NS_fsm = ap_ST_fsm_state7;
            break;
        case 64 : 
            ap_NS_fsm = ap_ST_fsm_state8;
            break;
        case 128 : 
            ap_NS_fsm = ap_ST_fsm_state9;
            break;
        case 256 : 
            ap_NS_fsm = ap_ST_fsm_state10;
            break;
        case 512 : 
            ap_NS_fsm = ap_ST_fsm_state11;
            break;
        case 1024 : 
            ap_NS_fsm = ap_ST_fsm_state12;
            break;
        case 2048 : 
            ap_NS_fsm = ap_ST_fsm_state13;
            break;
        case 4096 : 
            ap_NS_fsm = ap_ST_fsm_state14;
            break;
        case 8192 : 
            ap_NS_fsm = ap_ST_fsm_state15;
            break;
        case 16384 : 
            ap_NS_fsm = ap_ST_fsm_state16;
            break;
        case 32768 : 
            ap_NS_fsm = ap_ST_fsm_state17;
            break;
        case 65536 : 
            ap_NS_fsm = ap_ST_fsm_state18;
            break;
        case 131072 : 
            ap_NS_fsm = ap_ST_fsm_state19;
            break;
        case 262144 : 
            ap_NS_fsm = ap_ST_fsm_state20;
            break;
        case 524288 : 
            ap_NS_fsm = ap_ST_fsm_state21;
            break;
        case 1048576 : 
            ap_NS_fsm = ap_ST_fsm_state22;
            break;
        case 2097152 : 
            if (!esl_seteq<1,1,1>(ap_const_logic_0, ap_sig_ioackin_output_r_TREADY.read())) {
                ap_NS_fsm = ap_ST_fsm_state1;
            } else {
                ap_NS_fsm = ap_ST_fsm_state22;
            }
            break;
        default : 
            ap_NS_fsm = "XXXXXXXXXXXXXXXXXXXXXX";
            break;
    }
}

}

