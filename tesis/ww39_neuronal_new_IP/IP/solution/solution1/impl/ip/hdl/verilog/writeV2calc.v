// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2016.4
// Copyright (C) 1986-2017 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module writeV2calc (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_continue,
        ap_idle,
        ap_ready,
        voltagesBackup_address0,
        voltagesBackup_ce0,
        voltagesBackup_q0,
        voltagesBackup_address1,
        voltagesBackup_ce1,
        voltagesBackup_q1,
        simConfig_rowsToSimu_dout,
        simConfig_rowsToSimu_empty_n,
        simConfig_rowsToSimu_read,
        simConfig_BLOCK_NUMBERS_V_dout,
        simConfig_BLOCK_NUMBERS_V_empty_n,
        simConfig_BLOCK_NUMBERS_V_read,
        Vi_idx_V_data_V_0_dout,
        Vi_idx_V_data_V_0_empty_n,
        Vi_idx_V_data_V_0_read,
        Vi_idx_V_data_V_1_dout,
        Vi_idx_V_data_V_1_empty_n,
        Vi_idx_V_data_V_1_read,
        Vi_idx_V_data_V_2_dout,
        Vi_idx_V_data_V_2_empty_n,
        Vi_idx_V_data_V_2_read,
        Vi_idx_V_data_V_3_dout,
        Vi_idx_V_data_V_3_empty_n,
        Vi_idx_V_data_V_3_read,
        fixedData_V_data_din,
        fixedData_V_data_full_n,
        fixedData_V_data_write,
        fixedData_V_tlast_V_din,
        fixedData_V_tlast_V_full_n,
        fixedData_V_tlast_V_write,
        Vj_idx_V_data_V_0_dout,
        Vj_idx_V_data_V_0_empty_n,
        Vj_idx_V_data_V_0_read,
        Vj_idx_V_data_V_1_dout,
        Vj_idx_V_data_V_1_empty_n,
        Vj_idx_V_data_V_1_read,
        Vj_idx_V_data_V_2_dout,
        Vj_idx_V_data_V_2_empty_n,
        Vj_idx_V_data_V_2_read,
        Vj_idx_V_data_V_3_dout,
        Vj_idx_V_data_V_3_empty_n,
        Vj_idx_V_data_V_3_read,
        processedData_V_data_din,
        processedData_V_data_full_n,
        processedData_V_data_write,
        processedData_V_data_1_din,
        processedData_V_data_1_full_n,
        processedData_V_data_1_write,
        processedData_V_data_2_din,
        processedData_V_data_2_full_n,
        processedData_V_data_2_write,
        processedData_V_data_3_din,
        processedData_V_data_3_full_n,
        processedData_V_data_3_write
);

parameter    ap_ST_fsm_state1 = 9'b1;
parameter    ap_ST_fsm_state2 = 9'b10;
parameter    ap_ST_fsm_state3 = 9'b100;
parameter    ap_ST_fsm_state4 = 9'b1000;
parameter    ap_ST_fsm_pp0_stage0 = 9'b10000;
parameter    ap_ST_fsm_pp0_stage1 = 9'b100000;
parameter    ap_ST_fsm_pp0_stage2 = 9'b1000000;
parameter    ap_ST_fsm_pp0_stage3 = 9'b10000000;
parameter    ap_ST_fsm_state12 = 9'b100000000;
parameter    ap_const_lv32_0 = 32'b00000000000000000000000000000000;
parameter    ap_const_lv32_1 = 32'b1;
parameter    ap_const_lv32_7 = 32'b111;
parameter    ap_const_lv32_4 = 32'b100;
parameter    ap_const_lv32_5 = 32'b101;
parameter    ap_const_lv32_6 = 32'b110;
parameter    ap_const_lv32_2 = 32'b10;
parameter    ap_const_lv32_3 = 32'b11;
parameter    ap_const_lv12_0 = 12'b000000000000;
parameter    ap_const_lv32_8 = 32'b1000;
parameter    ap_const_lv26_0 = 26'b00000000000000000000000000;
parameter    ap_const_lv12_1 = 12'b1;
parameter    ap_const_lv26_1 = 26'b1;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
input   ap_continue;
output   ap_idle;
output   ap_ready;
output  [13:0] voltagesBackup_address0;
output   voltagesBackup_ce0;
input  [31:0] voltagesBackup_q0;
output  [13:0] voltagesBackup_address1;
output   voltagesBackup_ce1;
input  [31:0] voltagesBackup_q1;
input  [26:0] simConfig_rowsToSimu_dout;
input   simConfig_rowsToSimu_empty_n;
output   simConfig_rowsToSimu_read;
input  [26:0] simConfig_BLOCK_NUMBERS_V_dout;
input   simConfig_BLOCK_NUMBERS_V_empty_n;
output   simConfig_BLOCK_NUMBERS_V_read;
input  [26:0] Vi_idx_V_data_V_0_dout;
input   Vi_idx_V_data_V_0_empty_n;
output   Vi_idx_V_data_V_0_read;
input  [26:0] Vi_idx_V_data_V_1_dout;
input   Vi_idx_V_data_V_1_empty_n;
output   Vi_idx_V_data_V_1_read;
input  [26:0] Vi_idx_V_data_V_2_dout;
input   Vi_idx_V_data_V_2_empty_n;
output   Vi_idx_V_data_V_2_read;
input  [26:0] Vi_idx_V_data_V_3_dout;
input   Vi_idx_V_data_V_3_empty_n;
output   Vi_idx_V_data_V_3_read;
output  [31:0] fixedData_V_data_din;
input   fixedData_V_data_full_n;
output   fixedData_V_data_write;
output  [0:0] fixedData_V_tlast_V_din;
input   fixedData_V_tlast_V_full_n;
output   fixedData_V_tlast_V_write;
input  [26:0] Vj_idx_V_data_V_0_dout;
input   Vj_idx_V_data_V_0_empty_n;
output   Vj_idx_V_data_V_0_read;
input  [26:0] Vj_idx_V_data_V_1_dout;
input   Vj_idx_V_data_V_1_empty_n;
output   Vj_idx_V_data_V_1_read;
input  [26:0] Vj_idx_V_data_V_2_dout;
input   Vj_idx_V_data_V_2_empty_n;
output   Vj_idx_V_data_V_2_read;
input  [26:0] Vj_idx_V_data_V_3_dout;
input   Vj_idx_V_data_V_3_empty_n;
output   Vj_idx_V_data_V_3_read;
output  [31:0] processedData_V_data_din;
input   processedData_V_data_full_n;
output   processedData_V_data_write;
output  [31:0] processedData_V_data_1_din;
input   processedData_V_data_1_full_n;
output   processedData_V_data_1_write;
output  [31:0] processedData_V_data_2_din;
input   processedData_V_data_2_full_n;
output   processedData_V_data_2_write;
output  [31:0] processedData_V_data_3_din;
input   processedData_V_data_3_full_n;
output   processedData_V_data_3_write;

reg ap_done;
reg ap_idle;
reg ap_ready;
reg[13:0] voltagesBackup_address0;
reg voltagesBackup_ce0;
reg[13:0] voltagesBackup_address1;
reg voltagesBackup_ce1;
reg simConfig_rowsToSimu_read;
reg simConfig_BLOCK_NUMBERS_V_read;
reg[31:0] fixedData_V_data_din;
reg[31:0] processedData_V_data_2_din;
reg[31:0] processedData_V_data_3_din;

reg    ap_done_reg;
(* fsm_encoding = "none" *) reg   [8:0] ap_CS_fsm;
wire   [0:0] ap_CS_fsm_state1;
reg    simConfig_rowsToSimu_blk_n;
reg    simConfig_BLOCK_NUMBERS_V_blk_n;
reg    Vi_idx_V_data_V_0_blk_n;
wire   [0:0] ap_CS_fsm_state2;
wire   [0:0] tmp_3_i_i_fu_250_p2;
reg    Vi_idx_V_data_V_1_blk_n;
reg    Vi_idx_V_data_V_2_blk_n;
reg    Vi_idx_V_data_V_3_blk_n;
reg    fixedData_V_data_blk_n;
wire   [0:0] ap_CS_fsm_pp0_stage3;
reg    ap_enable_reg_pp0_iter0;
reg   [0:0] tmp_9_i_i_reg_412;
wire   [0:0] ap_CS_fsm_pp0_stage0;
reg    ap_enable_reg_pp0_iter1;
wire   [0:0] ap_CS_fsm_pp0_stage1;
reg   [0:0] ap_pipeline_reg_pp0_iter1_tmp_9_i_i_reg_412;
wire   [0:0] ap_CS_fsm_pp0_stage2;
reg    fixedData_V_tlast_V_blk_n;
reg    Vj_idx_V_data_V_0_blk_n;
reg    Vj_idx_V_data_V_1_blk_n;
reg    Vj_idx_V_data_V_2_blk_n;
reg    Vj_idx_V_data_V_3_blk_n;
reg    processedData_V_data_blk_n;
reg    processedData_V_data_1_blk_n;
reg    processedData_V_data_2_blk_n;
reg    processedData_V_data_3_blk_n;
reg   [25:0] p_1_i_i_reg_235;
reg   [26:0] simConfig_BLOCK_NUMB_reg_344;
reg    ap_condition_190;
reg   [26:0] simConfig_rowsToSimu_1_reg_349;
wire   [11:0] i_V_fu_255_p2;
reg   [11:0] i_V_reg_357;
wire    Vi_idx_V_data_V_00_status;
reg   [26:0] tmp_data_2_V_reg_362;
reg   [26:0] tmp_data_3_V_reg_367;
reg   [31:0] tmp_data_reg_382;
wire   [0:0] ap_CS_fsm_state3;
reg   [31:0] tmp_data_1_reg_387;
reg   [31:0] tmp_data_2_reg_402;
wire   [0:0] ap_CS_fsm_state4;
reg   [31:0] tmp_data_3_reg_407;
wire   [0:0] tmp_9_i_i_fu_299_p2;
wire    fixedData_V_data1_status;
wire    processedData_V_data1_status;
reg    ap_condition_241;
wire   [25:0] j_V_fu_304_p2;
reg   [25:0] j_V_reg_416;
reg   [26:0] tmp_data_2_V_1_reg_421;
wire    Vj_idx_V_data_V_00_status;
reg    ap_condition_261;
reg   [26:0] tmp_data_3_V_1_reg_426;
reg   [31:0] tmp_data_0_reg_441;
reg   [31:0] tmp_data_1_12_reg_446;
reg   [31:0] tmp_data_2_13_reg_461;
reg   [31:0] tmp_data_3_14_reg_466;
reg   [11:0] p_i_i_reg_224;
wire   [0:0] ap_CS_fsm_state12;
reg   [25:0] p_1_i_i_phi_fu_239_p4;
wire   [63:0] tmp_5_i_i_fu_277_p1;
wire   [63:0] tmp_6_i_i_fu_282_p1;
wire   [63:0] tmp_7_i_i_fu_287_p1;
wire   [63:0] tmp_8_i_i_fu_291_p1;
wire   [63:0] tmp_13_i_i_fu_326_p1;
wire   [63:0] tmp_13_1_i_i_fu_331_p1;
wire   [63:0] tmp_13_2_i_i_fu_336_p1;
wire   [63:0] tmp_13_3_i_i_fu_340_p1;
reg    Vi_idx_V_data_V_00_update;
reg    Vj_idx_V_data_V_00_update;
reg    fixedData_V_data1_update;
reg    processedData_V_data1_update;
wire   [26:0] p_i_i_cast_fu_246_p1;
wire   [26:0] p_1_i_i_cast_fu_295_p1;
reg   [8:0] ap_NS_fsm;

// power-on initialization
initial begin
#0 ap_done_reg = 1'b0;
#0 ap_CS_fsm = 9'b1;
#0 ap_enable_reg_pp0_iter0 = 1'b0;
#0 ap_enable_reg_pp0_iter1 = 1'b0;
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_done_reg <= 1'b0;
    end else begin
        if ((1'b1 == ap_continue)) begin
            ap_done_reg <= 1'b0;
        end else if (((1'b1 == ap_CS_fsm_state2) & (tmp_3_i_i_fu_250_p2 == 1'b0) & ~(~(tmp_3_i_i_fu_250_p2 == 1'b0) & (Vi_idx_V_data_V_00_status == 1'b0)))) begin
            ap_done_reg <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter0 <= 1'b0;
    end else begin
        if (((1'b1 == ap_CS_fsm_pp0_stage0) & ~((1'b1 == ap_enable_reg_pp0_iter1) & (ap_condition_241 == 1'b1)) & (1'b0 == tmp_9_i_i_fu_299_p2))) begin
            ap_enable_reg_pp0_iter0 <= 1'b0;
        end else if ((1'b1 == ap_CS_fsm_state4)) begin
            ap_enable_reg_pp0_iter0 <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter1 <= 1'b0;
    end else begin
        if (((1'b1 == ap_CS_fsm_pp0_stage3) & ~(1'b0 == tmp_9_i_i_reg_412) & ~((1'b1 == ap_enable_reg_pp0_iter0) & (ap_condition_241 == 1'b1)))) begin
            ap_enable_reg_pp0_iter1 <= 1'b1;
        end else if (((1'b1 == ap_CS_fsm_state4) | ((1'b1 == ap_CS_fsm_pp0_stage3) & (1'b0 == tmp_9_i_i_reg_412) & ~((1'b1 == ap_enable_reg_pp0_iter0) & (ap_condition_241 == 1'b1))))) begin
            ap_enable_reg_pp0_iter1 <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state4)) begin
        p_1_i_i_reg_235 <= ap_const_lv26_0;
    end else if ((~(1'b0 == tmp_9_i_i_reg_412) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b1 == ap_enable_reg_pp0_iter1) & ~((1'b1 == ap_enable_reg_pp0_iter1) & (ap_condition_241 == 1'b1)))) begin
        p_1_i_i_reg_235 <= j_V_reg_416;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state12)) begin
        p_i_i_reg_224 <= i_V_reg_357;
    end else if (((ap_CS_fsm_state1 == 1'b1) & ~(ap_condition_190 == 1'b1))) begin
        p_i_i_reg_224 <= ap_const_lv12_0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & ~((1'b1 == ap_enable_reg_pp0_iter1) & (ap_condition_241 == 1'b1)))) begin
        ap_pipeline_reg_pp0_iter1_tmp_9_i_i_reg_412 <= tmp_9_i_i_reg_412;
        tmp_9_i_i_reg_412 <= tmp_9_i_i_fu_299_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state2) & ~(~(tmp_3_i_i_fu_250_p2 == 1'b0) & (Vi_idx_V_data_V_00_status == 1'b0)))) begin
        i_V_reg_357 <= i_V_fu_255_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_enable_reg_pp0_iter0) & (1'b1 == ap_CS_fsm_pp0_stage0) & ~((1'b1 == ap_enable_reg_pp0_iter1) & (ap_condition_241 == 1'b1)))) begin
        j_V_reg_416 <= j_V_fu_304_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((ap_CS_fsm_state1 == 1'b1) & ~(ap_condition_190 == 1'b1))) begin
        simConfig_BLOCK_NUMB_reg_344 <= simConfig_BLOCK_NUMBERS_V_dout;
        simConfig_rowsToSimu_1_reg_349 <= simConfig_rowsToSimu_dout;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_enable_reg_pp0_iter0) & ~(1'b0 == tmp_9_i_i_reg_412) & (1'b1 == ap_CS_fsm_pp0_stage2) & ~((1'b1 == ap_enable_reg_pp0_iter1) & (ap_condition_261 == 1'b1)))) begin
        tmp_data_0_reg_441 <= voltagesBackup_q0;
        tmp_data_1_12_reg_446 <= voltagesBackup_q1;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        tmp_data_1_reg_387 <= voltagesBackup_q1;
        tmp_data_reg_382 <= voltagesBackup_q0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage3) & (1'b1 == ap_enable_reg_pp0_iter0) & ~(1'b0 == tmp_9_i_i_reg_412) & ~((1'b1 == ap_enable_reg_pp0_iter0) & (ap_condition_241 == 1'b1)))) begin
        tmp_data_2_13_reg_461 <= voltagesBackup_q0;
        tmp_data_3_14_reg_466 <= voltagesBackup_q1;
    end
end

always @ (posedge ap_clk) begin
    if ((~(1'b0 == tmp_9_i_i_reg_412) & (1'b1 == ap_CS_fsm_pp0_stage1) & ~(((1'b1 == ap_enable_reg_pp0_iter0) & ~(1'b0 == tmp_9_i_i_reg_412) & (Vj_idx_V_data_V_00_status == 1'b0)) | ((1'b1 == ap_enable_reg_pp0_iter1) & (ap_condition_261 == 1'b1))))) begin
        tmp_data_2_V_1_reg_421 <= Vj_idx_V_data_V_2_dout;
        tmp_data_3_V_1_reg_426 <= Vj_idx_V_data_V_3_dout;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state2) & ~(tmp_3_i_i_fu_250_p2 == 1'b0) & ~(~(tmp_3_i_i_fu_250_p2 == 1'b0) & (Vi_idx_V_data_V_00_status == 1'b0)))) begin
        tmp_data_2_V_reg_362 <= Vi_idx_V_data_V_2_dout;
        tmp_data_3_V_reg_367 <= Vi_idx_V_data_V_3_dout;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state4)) begin
        tmp_data_2_reg_402 <= voltagesBackup_q0;
        tmp_data_3_reg_407 <= voltagesBackup_q1;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state2) & ~(tmp_3_i_i_fu_250_p2 == 1'b0) & ~(~(tmp_3_i_i_fu_250_p2 == 1'b0) & (Vi_idx_V_data_V_00_status == 1'b0)))) begin
        Vi_idx_V_data_V_00_update = 1'b1;
    end else begin
        Vi_idx_V_data_V_00_update = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state2) & ~(tmp_3_i_i_fu_250_p2 == 1'b0))) begin
        Vi_idx_V_data_V_0_blk_n = Vi_idx_V_data_V_0_empty_n;
    end else begin
        Vi_idx_V_data_V_0_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state2) & ~(tmp_3_i_i_fu_250_p2 == 1'b0))) begin
        Vi_idx_V_data_V_1_blk_n = Vi_idx_V_data_V_1_empty_n;
    end else begin
        Vi_idx_V_data_V_1_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state2) & ~(tmp_3_i_i_fu_250_p2 == 1'b0))) begin
        Vi_idx_V_data_V_2_blk_n = Vi_idx_V_data_V_2_empty_n;
    end else begin
        Vi_idx_V_data_V_2_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state2) & ~(tmp_3_i_i_fu_250_p2 == 1'b0))) begin
        Vi_idx_V_data_V_3_blk_n = Vi_idx_V_data_V_3_empty_n;
    end else begin
        Vi_idx_V_data_V_3_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((1'b1 == ap_enable_reg_pp0_iter0) & ~(1'b0 == tmp_9_i_i_reg_412) & (1'b1 == ap_CS_fsm_pp0_stage1) & ~(((1'b1 == ap_enable_reg_pp0_iter0) & ~(1'b0 == tmp_9_i_i_reg_412) & (Vj_idx_V_data_V_00_status == 1'b0)) | ((1'b1 == ap_enable_reg_pp0_iter1) & (ap_condition_261 == 1'b1))))) begin
        Vj_idx_V_data_V_00_update = 1'b1;
    end else begin
        Vj_idx_V_data_V_00_update = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_enable_reg_pp0_iter0) & ~(1'b0 == tmp_9_i_i_reg_412) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
        Vj_idx_V_data_V_0_blk_n = Vj_idx_V_data_V_0_empty_n;
    end else begin
        Vj_idx_V_data_V_0_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((1'b1 == ap_enable_reg_pp0_iter0) & ~(1'b0 == tmp_9_i_i_reg_412) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
        Vj_idx_V_data_V_1_blk_n = Vj_idx_V_data_V_1_empty_n;
    end else begin
        Vj_idx_V_data_V_1_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((1'b1 == ap_enable_reg_pp0_iter0) & ~(1'b0 == tmp_9_i_i_reg_412) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
        Vj_idx_V_data_V_2_blk_n = Vj_idx_V_data_V_2_empty_n;
    end else begin
        Vj_idx_V_data_V_2_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((1'b1 == ap_enable_reg_pp0_iter0) & ~(1'b0 == tmp_9_i_i_reg_412) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
        Vj_idx_V_data_V_3_blk_n = Vj_idx_V_data_V_3_empty_n;
    end else begin
        Vj_idx_V_data_V_3_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((1'b1 == ap_done_reg) | ((1'b1 == ap_CS_fsm_state2) & (tmp_3_i_i_fu_250_p2 == 1'b0) & ~(~(tmp_3_i_i_fu_250_p2 == 1'b0) & (Vi_idx_V_data_V_00_status == 1'b0))))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_start) & (ap_CS_fsm_state1 == 1'b1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state2) & (tmp_3_i_i_fu_250_p2 == 1'b0) & ~(~(tmp_3_i_i_fu_250_p2 == 1'b0) & (Vi_idx_V_data_V_00_status == 1'b0)))) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if ((((1'b1 == ap_CS_fsm_pp0_stage3) & (1'b1 == ap_enable_reg_pp0_iter0) & ~(1'b0 == tmp_9_i_i_reg_412) & ~((1'b1 == ap_enable_reg_pp0_iter0) & (ap_condition_241 == 1'b1))) | (~(1'b0 == tmp_9_i_i_reg_412) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b1 == ap_enable_reg_pp0_iter1) & ~((1'b1 == ap_enable_reg_pp0_iter1) & (ap_condition_241 == 1'b1))) | ((1'b1 == ap_enable_reg_pp0_iter1) & (1'b1 == ap_CS_fsm_pp0_stage1) & ~(1'b0 == ap_pipeline_reg_pp0_iter1_tmp_9_i_i_reg_412) & ~(((1'b1 == ap_enable_reg_pp0_iter0) & ~(1'b0 == tmp_9_i_i_reg_412) & (Vj_idx_V_data_V_00_status == 1'b0)) | ((1'b1 == ap_enable_reg_pp0_iter1) & (ap_condition_261 == 1'b1)))) | ((1'b1 == ap_enable_reg_pp0_iter1) & ~(1'b0 == ap_pipeline_reg_pp0_iter1_tmp_9_i_i_reg_412) & (1'b1 == ap_CS_fsm_pp0_stage2) & ~((1'b1 == ap_enable_reg_pp0_iter1) & (ap_condition_261 == 1'b1))))) begin
        fixedData_V_data1_update = 1'b1;
    end else begin
        fixedData_V_data1_update = 1'b0;
    end
end

always @ (*) begin
    if ((((1'b1 == ap_CS_fsm_pp0_stage3) & (1'b1 == ap_enable_reg_pp0_iter0) & ~(1'b0 == tmp_9_i_i_reg_412)) | (~(1'b0 == tmp_9_i_i_reg_412) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b1 == ap_enable_reg_pp0_iter1)) | ((1'b1 == ap_enable_reg_pp0_iter1) & (1'b1 == ap_CS_fsm_pp0_stage1) & ~(1'b0 == ap_pipeline_reg_pp0_iter1_tmp_9_i_i_reg_412)) | ((1'b1 == ap_enable_reg_pp0_iter1) & ~(1'b0 == ap_pipeline_reg_pp0_iter1_tmp_9_i_i_reg_412) & (1'b1 == ap_CS_fsm_pp0_stage2)))) begin
        fixedData_V_data_blk_n = fixedData_V_data_full_n;
    end else begin
        fixedData_V_data_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((1'b1 == ap_enable_reg_pp0_iter1) & ~(1'b0 == ap_pipeline_reg_pp0_iter1_tmp_9_i_i_reg_412) & (1'b1 == ap_CS_fsm_pp0_stage2) & ~((1'b1 == ap_enable_reg_pp0_iter1) & (ap_condition_261 == 1'b1)))) begin
        fixedData_V_data_din = tmp_data_3_reg_407;
    end else if (((1'b1 == ap_enable_reg_pp0_iter1) & (1'b1 == ap_CS_fsm_pp0_stage1) & ~(1'b0 == ap_pipeline_reg_pp0_iter1_tmp_9_i_i_reg_412) & ~(((1'b1 == ap_enable_reg_pp0_iter0) & ~(1'b0 == tmp_9_i_i_reg_412) & (Vj_idx_V_data_V_00_status == 1'b0)) | ((1'b1 == ap_enable_reg_pp0_iter1) & (ap_condition_261 == 1'b1))))) begin
        fixedData_V_data_din = tmp_data_2_reg_402;
    end else if ((~(1'b0 == tmp_9_i_i_reg_412) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b1 == ap_enable_reg_pp0_iter1) & ~((1'b1 == ap_enable_reg_pp0_iter1) & (ap_condition_241 == 1'b1)))) begin
        fixedData_V_data_din = tmp_data_1_reg_387;
    end else if (((1'b1 == ap_CS_fsm_pp0_stage3) & (1'b1 == ap_enable_reg_pp0_iter0) & ~(1'b0 == tmp_9_i_i_reg_412) & ~((1'b1 == ap_enable_reg_pp0_iter0) & (ap_condition_241 == 1'b1)))) begin
        fixedData_V_data_din = tmp_data_reg_382;
    end else begin
        fixedData_V_data_din = 'bx;
    end
end

always @ (*) begin
    if ((((1'b1 == ap_CS_fsm_pp0_stage3) & (1'b1 == ap_enable_reg_pp0_iter0) & ~(1'b0 == tmp_9_i_i_reg_412)) | (~(1'b0 == tmp_9_i_i_reg_412) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b1 == ap_enable_reg_pp0_iter1)) | ((1'b1 == ap_enable_reg_pp0_iter1) & (1'b1 == ap_CS_fsm_pp0_stage1) & ~(1'b0 == ap_pipeline_reg_pp0_iter1_tmp_9_i_i_reg_412)) | ((1'b1 == ap_enable_reg_pp0_iter1) & ~(1'b0 == ap_pipeline_reg_pp0_iter1_tmp_9_i_i_reg_412) & (1'b1 == ap_CS_fsm_pp0_stage2)))) begin
        fixedData_V_tlast_V_blk_n = fixedData_V_tlast_V_full_n;
    end else begin
        fixedData_V_tlast_V_blk_n = 1'b1;
    end
end

always @ (*) begin
    if ((~(1'b0 == tmp_9_i_i_reg_412) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b1 == ap_enable_reg_pp0_iter1))) begin
        p_1_i_i_phi_fu_239_p4 = j_V_reg_416;
    end else begin
        p_1_i_i_phi_fu_239_p4 = p_1_i_i_reg_235;
    end
end

always @ (*) begin
    if ((((1'b1 == ap_CS_fsm_pp0_stage3) & (1'b1 == ap_enable_reg_pp0_iter0) & ~(1'b0 == tmp_9_i_i_reg_412) & ~((1'b1 == ap_enable_reg_pp0_iter0) & (ap_condition_241 == 1'b1))) | (~(1'b0 == tmp_9_i_i_reg_412) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b1 == ap_enable_reg_pp0_iter1) & ~((1'b1 == ap_enable_reg_pp0_iter1) & (ap_condition_241 == 1'b1))) | ((1'b1 == ap_enable_reg_pp0_iter1) & (1'b1 == ap_CS_fsm_pp0_stage1) & ~(1'b0 == ap_pipeline_reg_pp0_iter1_tmp_9_i_i_reg_412) & ~(((1'b1 == ap_enable_reg_pp0_iter0) & ~(1'b0 == tmp_9_i_i_reg_412) & (Vj_idx_V_data_V_00_status == 1'b0)) | ((1'b1 == ap_enable_reg_pp0_iter1) & (ap_condition_261 == 1'b1)))) | ((1'b1 == ap_enable_reg_pp0_iter1) & ~(1'b0 == ap_pipeline_reg_pp0_iter1_tmp_9_i_i_reg_412) & (1'b1 == ap_CS_fsm_pp0_stage2) & ~((1'b1 == ap_enable_reg_pp0_iter1) & (ap_condition_261 == 1'b1))))) begin
        processedData_V_data1_update = 1'b1;
    end else begin
        processedData_V_data1_update = 1'b0;
    end
end

always @ (*) begin
    if ((((1'b1 == ap_CS_fsm_pp0_stage3) & (1'b1 == ap_enable_reg_pp0_iter0) & ~(1'b0 == tmp_9_i_i_reg_412)) | (~(1'b0 == tmp_9_i_i_reg_412) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b1 == ap_enable_reg_pp0_iter1)) | ((1'b1 == ap_enable_reg_pp0_iter1) & (1'b1 == ap_CS_fsm_pp0_stage1) & ~(1'b0 == ap_pipeline_reg_pp0_iter1_tmp_9_i_i_reg_412)) | ((1'b1 == ap_enable_reg_pp0_iter1) & ~(1'b0 == ap_pipeline_reg_pp0_iter1_tmp_9_i_i_reg_412) & (1'b1 == ap_CS_fsm_pp0_stage2)))) begin
        processedData_V_data_1_blk_n = processedData_V_data_1_full_n;
    end else begin
        processedData_V_data_1_blk_n = 1'b1;
    end
end

always @ (*) begin
    if ((((1'b1 == ap_CS_fsm_pp0_stage3) & (1'b1 == ap_enable_reg_pp0_iter0) & ~(1'b0 == tmp_9_i_i_reg_412)) | (~(1'b0 == tmp_9_i_i_reg_412) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b1 == ap_enable_reg_pp0_iter1)) | ((1'b1 == ap_enable_reg_pp0_iter1) & (1'b1 == ap_CS_fsm_pp0_stage1) & ~(1'b0 == ap_pipeline_reg_pp0_iter1_tmp_9_i_i_reg_412)) | ((1'b1 == ap_enable_reg_pp0_iter1) & ~(1'b0 == ap_pipeline_reg_pp0_iter1_tmp_9_i_i_reg_412) & (1'b1 == ap_CS_fsm_pp0_stage2)))) begin
        processedData_V_data_2_blk_n = processedData_V_data_2_full_n;
    end else begin
        processedData_V_data_2_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((~(1'b0 == tmp_9_i_i_reg_412) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b1 == ap_enable_reg_pp0_iter1) & ~((1'b1 == ap_enable_reg_pp0_iter1) & (ap_condition_241 == 1'b1))) | ((1'b1 == ap_enable_reg_pp0_iter1) & (1'b1 == ap_CS_fsm_pp0_stage1) & ~(1'b0 == ap_pipeline_reg_pp0_iter1_tmp_9_i_i_reg_412) & ~(((1'b1 == ap_enable_reg_pp0_iter0) & ~(1'b0 == tmp_9_i_i_reg_412) & (Vj_idx_V_data_V_00_status == 1'b0)) | ((1'b1 == ap_enable_reg_pp0_iter1) & (ap_condition_261 == 1'b1)))) | ((1'b1 == ap_enable_reg_pp0_iter1) & ~(1'b0 == ap_pipeline_reg_pp0_iter1_tmp_9_i_i_reg_412) & (1'b1 == ap_CS_fsm_pp0_stage2) & ~((1'b1 == ap_enable_reg_pp0_iter1) & (ap_condition_261 == 1'b1))))) begin
        processedData_V_data_2_din = tmp_data_2_13_reg_461;
    end else if (((1'b1 == ap_CS_fsm_pp0_stage3) & (1'b1 == ap_enable_reg_pp0_iter0) & ~(1'b0 == tmp_9_i_i_reg_412) & ~((1'b1 == ap_enable_reg_pp0_iter0) & (ap_condition_241 == 1'b1)))) begin
        processedData_V_data_2_din = voltagesBackup_q0;
    end else begin
        processedData_V_data_2_din = 'bx;
    end
end

always @ (*) begin
    if ((((1'b1 == ap_CS_fsm_pp0_stage3) & (1'b1 == ap_enable_reg_pp0_iter0) & ~(1'b0 == tmp_9_i_i_reg_412)) | (~(1'b0 == tmp_9_i_i_reg_412) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b1 == ap_enable_reg_pp0_iter1)) | ((1'b1 == ap_enable_reg_pp0_iter1) & (1'b1 == ap_CS_fsm_pp0_stage1) & ~(1'b0 == ap_pipeline_reg_pp0_iter1_tmp_9_i_i_reg_412)) | ((1'b1 == ap_enable_reg_pp0_iter1) & ~(1'b0 == ap_pipeline_reg_pp0_iter1_tmp_9_i_i_reg_412) & (1'b1 == ap_CS_fsm_pp0_stage2)))) begin
        processedData_V_data_3_blk_n = processedData_V_data_3_full_n;
    end else begin
        processedData_V_data_3_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((~(1'b0 == tmp_9_i_i_reg_412) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b1 == ap_enable_reg_pp0_iter1) & ~((1'b1 == ap_enable_reg_pp0_iter1) & (ap_condition_241 == 1'b1))) | ((1'b1 == ap_enable_reg_pp0_iter1) & (1'b1 == ap_CS_fsm_pp0_stage1) & ~(1'b0 == ap_pipeline_reg_pp0_iter1_tmp_9_i_i_reg_412) & ~(((1'b1 == ap_enable_reg_pp0_iter0) & ~(1'b0 == tmp_9_i_i_reg_412) & (Vj_idx_V_data_V_00_status == 1'b0)) | ((1'b1 == ap_enable_reg_pp0_iter1) & (ap_condition_261 == 1'b1)))) | ((1'b1 == ap_enable_reg_pp0_iter1) & ~(1'b0 == ap_pipeline_reg_pp0_iter1_tmp_9_i_i_reg_412) & (1'b1 == ap_CS_fsm_pp0_stage2) & ~((1'b1 == ap_enable_reg_pp0_iter1) & (ap_condition_261 == 1'b1))))) begin
        processedData_V_data_3_din = tmp_data_3_14_reg_466;
    end else if (((1'b1 == ap_CS_fsm_pp0_stage3) & (1'b1 == ap_enable_reg_pp0_iter0) & ~(1'b0 == tmp_9_i_i_reg_412) & ~((1'b1 == ap_enable_reg_pp0_iter0) & (ap_condition_241 == 1'b1)))) begin
        processedData_V_data_3_din = voltagesBackup_q1;
    end else begin
        processedData_V_data_3_din = 'bx;
    end
end

always @ (*) begin
    if ((((1'b1 == ap_CS_fsm_pp0_stage3) & (1'b1 == ap_enable_reg_pp0_iter0) & ~(1'b0 == tmp_9_i_i_reg_412)) | (~(1'b0 == tmp_9_i_i_reg_412) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b1 == ap_enable_reg_pp0_iter1)) | ((1'b1 == ap_enable_reg_pp0_iter1) & (1'b1 == ap_CS_fsm_pp0_stage1) & ~(1'b0 == ap_pipeline_reg_pp0_iter1_tmp_9_i_i_reg_412)) | ((1'b1 == ap_enable_reg_pp0_iter1) & ~(1'b0 == ap_pipeline_reg_pp0_iter1_tmp_9_i_i_reg_412) & (1'b1 == ap_CS_fsm_pp0_stage2)))) begin
        processedData_V_data_blk_n = processedData_V_data_full_n;
    end else begin
        processedData_V_data_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((ap_CS_fsm_state1 == 1'b1) & ~((ap_start == 1'b0) | (ap_done_reg == 1'b1)))) begin
        simConfig_BLOCK_NUMBERS_V_blk_n = simConfig_BLOCK_NUMBERS_V_empty_n;
    end else begin
        simConfig_BLOCK_NUMBERS_V_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((ap_CS_fsm_state1 == 1'b1) & ~(ap_condition_190 == 1'b1))) begin
        simConfig_BLOCK_NUMBERS_V_read = 1'b1;
    end else begin
        simConfig_BLOCK_NUMBERS_V_read = 1'b0;
    end
end

always @ (*) begin
    if (((ap_CS_fsm_state1 == 1'b1) & ~((ap_start == 1'b0) | (ap_done_reg == 1'b1)))) begin
        simConfig_rowsToSimu_blk_n = simConfig_rowsToSimu_empty_n;
    end else begin
        simConfig_rowsToSimu_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((ap_CS_fsm_state1 == 1'b1) & ~(ap_condition_190 == 1'b1))) begin
        simConfig_rowsToSimu_read = 1'b1;
    end else begin
        simConfig_rowsToSimu_read = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_enable_reg_pp0_iter0) & (1'b1 == ap_CS_fsm_pp0_stage2))) begin
        voltagesBackup_address0 = tmp_13_2_i_i_fu_336_p1;
    end else if (((1'b1 == ap_enable_reg_pp0_iter0) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
        voltagesBackup_address0 = tmp_13_i_i_fu_326_p1;
    end else if ((1'b1 == ap_CS_fsm_state3)) begin
        voltagesBackup_address0 = tmp_7_i_i_fu_287_p1;
    end else if ((1'b1 == ap_CS_fsm_state2)) begin
        voltagesBackup_address0 = tmp_5_i_i_fu_277_p1;
    end else begin
        voltagesBackup_address0 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_enable_reg_pp0_iter0) & (1'b1 == ap_CS_fsm_pp0_stage2))) begin
        voltagesBackup_address1 = tmp_13_3_i_i_fu_340_p1;
    end else if (((1'b1 == ap_enable_reg_pp0_iter0) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
        voltagesBackup_address1 = tmp_13_1_i_i_fu_331_p1;
    end else if ((1'b1 == ap_CS_fsm_state3)) begin
        voltagesBackup_address1 = tmp_8_i_i_fu_291_p1;
    end else if ((1'b1 == ap_CS_fsm_state2)) begin
        voltagesBackup_address1 = tmp_6_i_i_fu_282_p1;
    end else begin
        voltagesBackup_address1 = 'bx;
    end
end

always @ (*) begin
    if ((((1'b1 == ap_CS_fsm_state2) & ~(~(tmp_3_i_i_fu_250_p2 == 1'b0) & (Vi_idx_V_data_V_00_status == 1'b0))) | (1'b1 == ap_CS_fsm_state3) | ((1'b1 == ap_enable_reg_pp0_iter0) & (1'b1 == ap_CS_fsm_pp0_stage2) & ~((1'b1 == ap_enable_reg_pp0_iter1) & (ap_condition_261 == 1'b1))) | ((1'b1 == ap_enable_reg_pp0_iter0) & (1'b1 == ap_CS_fsm_pp0_stage1) & ~(((1'b1 == ap_enable_reg_pp0_iter0) & ~(1'b0 == tmp_9_i_i_reg_412) & (Vj_idx_V_data_V_00_status == 1'b0)) | ((1'b1 == ap_enable_reg_pp0_iter1) & (ap_condition_261 == 1'b1)))))) begin
        voltagesBackup_ce0 = 1'b1;
    end else begin
        voltagesBackup_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((((1'b1 == ap_CS_fsm_state2) & ~(~(tmp_3_i_i_fu_250_p2 == 1'b0) & (Vi_idx_V_data_V_00_status == 1'b0))) | (1'b1 == ap_CS_fsm_state3) | ((1'b1 == ap_enable_reg_pp0_iter0) & (1'b1 == ap_CS_fsm_pp0_stage2) & ~((1'b1 == ap_enable_reg_pp0_iter1) & (ap_condition_261 == 1'b1))) | ((1'b1 == ap_enable_reg_pp0_iter0) & (1'b1 == ap_CS_fsm_pp0_stage1) & ~(((1'b1 == ap_enable_reg_pp0_iter0) & ~(1'b0 == tmp_9_i_i_reg_412) & (Vj_idx_V_data_V_00_status == 1'b0)) | ((1'b1 == ap_enable_reg_pp0_iter1) & (ap_condition_261 == 1'b1)))))) begin
        voltagesBackup_ce1 = 1'b1;
    end else begin
        voltagesBackup_ce1 = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if (~(ap_condition_190 == 1'b1)) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_state2 : begin
            if (((tmp_3_i_i_fu_250_p2 == 1'b0) & ~(~(tmp_3_i_i_fu_250_p2 == 1'b0) & (Vi_idx_V_data_V_00_status == 1'b0)))) begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end else if ((~(tmp_3_i_i_fu_250_p2 == 1'b0) & ~(~(tmp_3_i_i_fu_250_p2 == 1'b0) & (Vi_idx_V_data_V_00_status == 1'b0)))) begin
                ap_NS_fsm = ap_ST_fsm_state3;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end
        end
        ap_ST_fsm_state3 : begin
            ap_NS_fsm = ap_ST_fsm_state4;
        end
        ap_ST_fsm_state4 : begin
            ap_NS_fsm = ap_ST_fsm_pp0_stage0;
        end
        ap_ST_fsm_pp0_stage0 : begin
            if ((~((1'b1 == ap_enable_reg_pp0_iter1) & (ap_condition_241 == 1'b1)) & ~((1'b1 == ap_enable_reg_pp0_iter0) & ~((1'b1 == ap_enable_reg_pp0_iter1) & (ap_condition_241 == 1'b1)) & (1'b0 == tmp_9_i_i_fu_299_p2) & ~(1'b1 == ap_enable_reg_pp0_iter1)))) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage1;
            end else if (((1'b1 == ap_enable_reg_pp0_iter0) & ~((1'b1 == ap_enable_reg_pp0_iter1) & (ap_condition_241 == 1'b1)) & (1'b0 == tmp_9_i_i_fu_299_p2) & ~(1'b1 == ap_enable_reg_pp0_iter1))) begin
                ap_NS_fsm = ap_ST_fsm_state12;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end
        end
        ap_ST_fsm_pp0_stage1 : begin
            if (~(((1'b1 == ap_enable_reg_pp0_iter0) & ~(1'b0 == tmp_9_i_i_reg_412) & (Vj_idx_V_data_V_00_status == 1'b0)) | ((1'b1 == ap_enable_reg_pp0_iter1) & (ap_condition_261 == 1'b1)))) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage1;
            end
        end
        ap_ST_fsm_pp0_stage2 : begin
            if ((~((1'b1 == ap_enable_reg_pp0_iter1) & (ap_condition_261 == 1'b1)) & ~((1'b1 == ap_enable_reg_pp0_iter1) & (1'b1 == ap_CS_fsm_pp0_stage2) & ~((1'b1 == ap_enable_reg_pp0_iter1) & (ap_condition_261 == 1'b1)) & ~(1'b1 == ap_enable_reg_pp0_iter0)))) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage3;
            end else if (((1'b1 == ap_enable_reg_pp0_iter1) & (1'b1 == ap_CS_fsm_pp0_stage2) & ~((1'b1 == ap_enable_reg_pp0_iter1) & (ap_condition_261 == 1'b1)) & ~(1'b1 == ap_enable_reg_pp0_iter0))) begin
                ap_NS_fsm = ap_ST_fsm_state12;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage2;
            end
        end
        ap_ST_fsm_pp0_stage3 : begin
            if (~((1'b1 == ap_enable_reg_pp0_iter0) & (ap_condition_241 == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage3;
            end
        end
        ap_ST_fsm_state12 : begin
            ap_NS_fsm = ap_ST_fsm_state2;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign Vi_idx_V_data_V_00_status = (Vi_idx_V_data_V_0_empty_n & Vi_idx_V_data_V_1_empty_n & Vi_idx_V_data_V_2_empty_n & Vi_idx_V_data_V_3_empty_n);

assign Vi_idx_V_data_V_0_read = Vi_idx_V_data_V_00_update;

assign Vi_idx_V_data_V_1_read = Vi_idx_V_data_V_00_update;

assign Vi_idx_V_data_V_2_read = Vi_idx_V_data_V_00_update;

assign Vi_idx_V_data_V_3_read = Vi_idx_V_data_V_00_update;

assign Vj_idx_V_data_V_00_status = (Vj_idx_V_data_V_0_empty_n & Vj_idx_V_data_V_1_empty_n & Vj_idx_V_data_V_2_empty_n & Vj_idx_V_data_V_3_empty_n);

assign Vj_idx_V_data_V_0_read = Vj_idx_V_data_V_00_update;

assign Vj_idx_V_data_V_1_read = Vj_idx_V_data_V_00_update;

assign Vj_idx_V_data_V_2_read = Vj_idx_V_data_V_00_update;

assign Vj_idx_V_data_V_3_read = Vj_idx_V_data_V_00_update;

assign ap_CS_fsm_pp0_stage0 = ap_CS_fsm[ap_const_lv32_4];

assign ap_CS_fsm_pp0_stage1 = ap_CS_fsm[ap_const_lv32_5];

assign ap_CS_fsm_pp0_stage2 = ap_CS_fsm[ap_const_lv32_6];

assign ap_CS_fsm_pp0_stage3 = ap_CS_fsm[ap_const_lv32_7];

assign ap_CS_fsm_state1 = ap_CS_fsm[ap_const_lv32_0];

assign ap_CS_fsm_state12 = ap_CS_fsm[ap_const_lv32_8];

assign ap_CS_fsm_state2 = ap_CS_fsm[ap_const_lv32_1];

assign ap_CS_fsm_state3 = ap_CS_fsm[ap_const_lv32_2];

assign ap_CS_fsm_state4 = ap_CS_fsm[ap_const_lv32_3];

always @ (*) begin
    ap_condition_190 = ((ap_start == 1'b0) | (ap_done_reg == 1'b1) | (simConfig_BLOCK_NUMBERS_V_empty_n == 1'b0) | (simConfig_rowsToSimu_empty_n == 1'b0));
end

always @ (*) begin
    ap_condition_241 = ((~(1'b0 == tmp_9_i_i_reg_412) & (fixedData_V_data1_status == 1'b0)) | (~(1'b0 == tmp_9_i_i_reg_412) & (processedData_V_data1_status == 1'b0)));
end

always @ (*) begin
    ap_condition_261 = ((~(1'b0 == ap_pipeline_reg_pp0_iter1_tmp_9_i_i_reg_412) & (fixedData_V_data1_status == 1'b0)) | (~(1'b0 == ap_pipeline_reg_pp0_iter1_tmp_9_i_i_reg_412) & (processedData_V_data1_status == 1'b0)));
end

assign fixedData_V_data1_status = (fixedData_V_data_full_n & fixedData_V_tlast_V_full_n);

assign fixedData_V_data_write = fixedData_V_data1_update;

assign fixedData_V_tlast_V_din = 1'b0;

assign fixedData_V_tlast_V_write = fixedData_V_data1_update;

assign i_V_fu_255_p2 = (p_i_i_reg_224 + ap_const_lv12_1);

assign j_V_fu_304_p2 = (p_1_i_i_phi_fu_239_p4 + ap_const_lv26_1);

assign p_1_i_i_cast_fu_295_p1 = p_1_i_i_phi_fu_239_p4;

assign p_i_i_cast_fu_246_p1 = p_i_i_reg_224;

assign processedData_V_data1_status = (processedData_V_data_full_n & processedData_V_data_1_full_n & processedData_V_data_2_full_n & processedData_V_data_3_full_n);

assign processedData_V_data_1_din = tmp_data_1_12_reg_446;

assign processedData_V_data_1_write = processedData_V_data1_update;

assign processedData_V_data_2_write = processedData_V_data1_update;

assign processedData_V_data_3_write = processedData_V_data1_update;

assign processedData_V_data_din = tmp_data_0_reg_441;

assign processedData_V_data_write = processedData_V_data1_update;

assign tmp_13_1_i_i_fu_331_p1 = Vj_idx_V_data_V_1_dout;

assign tmp_13_2_i_i_fu_336_p1 = tmp_data_2_V_1_reg_421;

assign tmp_13_3_i_i_fu_340_p1 = tmp_data_3_V_1_reg_426;

assign tmp_13_i_i_fu_326_p1 = Vj_idx_V_data_V_0_dout;

assign tmp_3_i_i_fu_250_p2 = (($signed(p_i_i_cast_fu_246_p1) < $signed(simConfig_rowsToSimu_1_reg_349)) ? 1'b1 : 1'b0);

assign tmp_5_i_i_fu_277_p1 = Vi_idx_V_data_V_0_dout;

assign tmp_6_i_i_fu_282_p1 = Vi_idx_V_data_V_1_dout;

assign tmp_7_i_i_fu_287_p1 = tmp_data_2_V_reg_362;

assign tmp_8_i_i_fu_291_p1 = tmp_data_3_V_reg_367;

assign tmp_9_i_i_fu_299_p2 = (($signed(p_1_i_i_cast_fu_295_p1) < $signed(simConfig_BLOCK_NUMB_reg_344)) ? 1'b1 : 1'b0);

endmodule //writeV2calc
