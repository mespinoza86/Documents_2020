-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
-- Version: 2016.4
-- Copyright (C) 1986-2017 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity readVoltages is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_continue : IN STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    voltagesBackup_address0 : OUT STD_LOGIC_VECTOR (13 downto 0);
    voltagesBackup_ce0 : OUT STD_LOGIC;
    voltagesBackup_we0 : OUT STD_LOGIC;
    voltagesBackup_d0 : OUT STD_LOGIC_VECTOR (31 downto 0);
    voltagesBackup_address1 : OUT STD_LOGIC_VECTOR (13 downto 0);
    voltagesBackup_ce1 : OUT STD_LOGIC;
    voltagesBackup_we1 : OUT STD_LOGIC;
    voltagesBackup_d1 : OUT STD_LOGIC_VECTOR (31 downto 0);
    V_SIZE_dout : IN STD_LOGIC_VECTOR (31 downto 0);
    V_SIZE_empty_n : IN STD_LOGIC;
    V_SIZE_read : OUT STD_LOGIC;
    V_data_V_data_0_dout : IN STD_LOGIC_VECTOR (31 downto 0);
    V_data_V_data_0_empty_n : IN STD_LOGIC;
    V_data_V_data_0_read : OUT STD_LOGIC;
    V_data_V_data_1_dout : IN STD_LOGIC_VECTOR (31 downto 0);
    V_data_V_data_1_empty_n : IN STD_LOGIC;
    V_data_V_data_1_read : OUT STD_LOGIC;
    V_data_V_data_2_dout : IN STD_LOGIC_VECTOR (31 downto 0);
    V_data_V_data_2_empty_n : IN STD_LOGIC;
    V_data_V_data_2_read : OUT STD_LOGIC;
    V_data_V_data_3_dout : IN STD_LOGIC_VECTOR (31 downto 0);
    V_data_V_data_3_empty_n : IN STD_LOGIC;
    V_data_V_data_3_read : OUT STD_LOGIC );
end;


architecture behav of readVoltages is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (2 downto 0) := "001";
    constant ap_ST_fsm_state2 : STD_LOGIC_VECTOR (2 downto 0) := "010";
    constant ap_ST_fsm_state3 : STD_LOGIC_VECTOR (2 downto 0) := "100";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_boolean_1 : BOOLEAN := true;
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv27_0 : STD_LOGIC_VECTOR (26 downto 0) := "000000000000000000000000000";
    constant ap_const_lv28_1 : STD_LOGIC_VECTOR (27 downto 0) := "0000000000000000000000000001";
    constant ap_const_lv27_2 : STD_LOGIC_VECTOR (26 downto 0) := "000000000000000000000000010";
    constant ap_const_lv27_3 : STD_LOGIC_VECTOR (26 downto 0) := "000000000000000000000000011";
    constant ap_const_lv27_4 : STD_LOGIC_VECTOR (26 downto 0) := "000000000000000000000000100";

    signal ap_done_reg : STD_LOGIC := '0';
    signal ap_CS_fsm : STD_LOGIC_VECTOR (2 downto 0) := "001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC_VECTOR (0 downto 0);
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal V_SIZE_blk_n : STD_LOGIC;
    signal V_data_V_data_0_blk_n : STD_LOGIC;
    signal ap_CS_fsm_state2 : STD_LOGIC_VECTOR (0 downto 0);
    attribute fsm_encoding of ap_CS_fsm_state2 : signal is "none";
    signal tmp_11_i_i_fu_135_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal V_data_V_data_1_blk_n : STD_LOGIC;
    signal V_data_V_data_2_blk_n : STD_LOGIC;
    signal V_data_V_data_3_blk_n : STD_LOGIC;
    signal V_SIZE_read_reg_206 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_condition_84 : BOOLEAN;
    signal tmp_data_2_reg_214 : STD_LOGIC_VECTOR (31 downto 0);
    signal V_data_V_data_00_status : STD_LOGIC;
    signal tmp_data_3_reg_219 : STD_LOGIC_VECTOR (31 downto 0);
    signal i_V_fu_200_p2 : STD_LOGIC_VECTOR (26 downto 0);
    signal ap_CS_fsm_state3 : STD_LOGIC_VECTOR (0 downto 0);
    attribute fsm_encoding of ap_CS_fsm_state3 : signal is "none";
    signal p_i_i_reg_119 : STD_LOGIC_VECTOR (26 downto 0);
    signal tmp_19_i_i_fu_162_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_19_1_i_i_fu_173_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_19_2_i_i_fu_184_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_19_3_i_i_fu_195_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal V_data_V_data_00_update : STD_LOGIC;
    signal tmp_i_i_fu_131_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal lhs_V_fu_158_p1 : STD_LOGIC_VECTOR (27 downto 0);
    signal r_V_i_i_fu_167_p2 : STD_LOGIC_VECTOR (27 downto 0);
    signal r_V_1_i_i_fu_178_p2 : STD_LOGIC_VECTOR (26 downto 0);
    signal r_V_2_i_i_fu_189_p2 : STD_LOGIC_VECTOR (26 downto 0);
    signal ap_NS_fsm : STD_LOGIC_VECTOR (2 downto 0);


begin




    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    ap_done_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_done_reg <= ap_const_logic_0;
            else
                if ((ap_const_logic_1 = ap_continue)) then 
                    ap_done_reg <= ap_const_logic_0;
                elsif (((ap_const_lv1_1 = ap_CS_fsm_state2) and (tmp_11_i_i_fu_135_p2 = ap_const_lv1_0) and not((not((tmp_11_i_i_fu_135_p2 = ap_const_lv1_0)) and (V_data_V_data_00_status = ap_const_logic_0))))) then 
                    ap_done_reg <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    p_i_i_reg_119_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_lv1_1 = ap_CS_fsm_state3))) then 
                p_i_i_reg_119 <= i_V_fu_200_p2;
            elsif (((ap_CS_fsm_state1 = ap_const_lv1_1) and not((ap_condition_84 = ap_const_boolean_1)))) then 
                p_i_i_reg_119 <= ap_const_lv27_0;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_CS_fsm_state1 = ap_const_lv1_1) and not((ap_condition_84 = ap_const_boolean_1)))) then
                V_SIZE_read_reg_206 <= V_SIZE_dout;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_lv1_1 = ap_CS_fsm_state2) and not((tmp_11_i_i_fu_135_p2 = ap_const_lv1_0)) and not((not((tmp_11_i_i_fu_135_p2 = ap_const_lv1_0)) and (V_data_V_data_00_status = ap_const_logic_0))))) then
                tmp_data_2_reg_214 <= V_data_V_data_2_dout;
                tmp_data_3_reg_219 <= V_data_V_data_3_dout;
            end if;
        end if;
    end process;

    ap_NS_fsm_assign_proc : process (ap_CS_fsm, tmp_11_i_i_fu_135_p2, ap_condition_84, V_data_V_data_00_status)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if (not((ap_condition_84 = ap_const_boolean_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_state2 => 
                if (((tmp_11_i_i_fu_135_p2 = ap_const_lv1_0) and not((not((tmp_11_i_i_fu_135_p2 = ap_const_lv1_0)) and (V_data_V_data_00_status = ap_const_logic_0))))) then
                    ap_NS_fsm <= ap_ST_fsm_state1;
                elsif ((not((tmp_11_i_i_fu_135_p2 = ap_const_lv1_0)) and not((not((tmp_11_i_i_fu_135_p2 = ap_const_lv1_0)) and (V_data_V_data_00_status = ap_const_logic_0))))) then
                    ap_NS_fsm <= ap_ST_fsm_state3;
                else
                    ap_NS_fsm <= ap_ST_fsm_state2;
                end if;
            when ap_ST_fsm_state3 => 
                ap_NS_fsm <= ap_ST_fsm_state2;
            when others =>  
                ap_NS_fsm <= "XXX";
        end case;
    end process;

    V_SIZE_blk_n_assign_proc : process(ap_start, ap_done_reg, ap_CS_fsm_state1, V_SIZE_empty_n)
    begin
        if (((ap_CS_fsm_state1 = ap_const_lv1_1) and not(((ap_start = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1))))) then 
            V_SIZE_blk_n <= V_SIZE_empty_n;
        else 
            V_SIZE_blk_n <= ap_const_logic_1;
        end if; 
    end process;


    V_SIZE_read_assign_proc : process(ap_CS_fsm_state1, ap_condition_84)
    begin
        if (((ap_CS_fsm_state1 = ap_const_lv1_1) and not((ap_condition_84 = ap_const_boolean_1)))) then 
            V_SIZE_read <= ap_const_logic_1;
        else 
            V_SIZE_read <= ap_const_logic_0;
        end if; 
    end process;

    V_data_V_data_00_status <= (V_data_V_data_0_empty_n and V_data_V_data_1_empty_n and V_data_V_data_2_empty_n and V_data_V_data_3_empty_n);

    V_data_V_data_00_update_assign_proc : process(ap_CS_fsm_state2, tmp_11_i_i_fu_135_p2, V_data_V_data_00_status)
    begin
        if (((ap_const_lv1_1 = ap_CS_fsm_state2) and not((tmp_11_i_i_fu_135_p2 = ap_const_lv1_0)) and not((not((tmp_11_i_i_fu_135_p2 = ap_const_lv1_0)) and (V_data_V_data_00_status = ap_const_logic_0))))) then 
            V_data_V_data_00_update <= ap_const_logic_1;
        else 
            V_data_V_data_00_update <= ap_const_logic_0;
        end if; 
    end process;


    V_data_V_data_0_blk_n_assign_proc : process(V_data_V_data_0_empty_n, ap_CS_fsm_state2, tmp_11_i_i_fu_135_p2)
    begin
        if (((ap_const_lv1_1 = ap_CS_fsm_state2) and not((tmp_11_i_i_fu_135_p2 = ap_const_lv1_0)))) then 
            V_data_V_data_0_blk_n <= V_data_V_data_0_empty_n;
        else 
            V_data_V_data_0_blk_n <= ap_const_logic_1;
        end if; 
    end process;

    V_data_V_data_0_read <= V_data_V_data_00_update;

    V_data_V_data_1_blk_n_assign_proc : process(V_data_V_data_1_empty_n, ap_CS_fsm_state2, tmp_11_i_i_fu_135_p2)
    begin
        if (((ap_const_lv1_1 = ap_CS_fsm_state2) and not((tmp_11_i_i_fu_135_p2 = ap_const_lv1_0)))) then 
            V_data_V_data_1_blk_n <= V_data_V_data_1_empty_n;
        else 
            V_data_V_data_1_blk_n <= ap_const_logic_1;
        end if; 
    end process;

    V_data_V_data_1_read <= V_data_V_data_00_update;

    V_data_V_data_2_blk_n_assign_proc : process(V_data_V_data_2_empty_n, ap_CS_fsm_state2, tmp_11_i_i_fu_135_p2)
    begin
        if (((ap_const_lv1_1 = ap_CS_fsm_state2) and not((tmp_11_i_i_fu_135_p2 = ap_const_lv1_0)))) then 
            V_data_V_data_2_blk_n <= V_data_V_data_2_empty_n;
        else 
            V_data_V_data_2_blk_n <= ap_const_logic_1;
        end if; 
    end process;

    V_data_V_data_2_read <= V_data_V_data_00_update;

    V_data_V_data_3_blk_n_assign_proc : process(V_data_V_data_3_empty_n, ap_CS_fsm_state2, tmp_11_i_i_fu_135_p2)
    begin
        if (((ap_const_lv1_1 = ap_CS_fsm_state2) and not((tmp_11_i_i_fu_135_p2 = ap_const_lv1_0)))) then 
            V_data_V_data_3_blk_n <= V_data_V_data_3_empty_n;
        else 
            V_data_V_data_3_blk_n <= ap_const_logic_1;
        end if; 
    end process;

    V_data_V_data_3_read <= V_data_V_data_00_update;
    ap_CS_fsm_state1 <= ap_CS_fsm(0 downto 0);
    ap_CS_fsm_state2 <= ap_CS_fsm(1 downto 1);
    ap_CS_fsm_state3 <= ap_CS_fsm(2 downto 2);

    ap_condition_84_assign_proc : process(ap_start, ap_done_reg, V_SIZE_empty_n)
    begin
                ap_condition_84 <= ((ap_start = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1) or (V_SIZE_empty_n = ap_const_logic_0));
    end process;


    ap_done_assign_proc : process(ap_done_reg, ap_CS_fsm_state2, tmp_11_i_i_fu_135_p2, V_data_V_data_00_status)
    begin
        if (((ap_const_logic_1 = ap_done_reg) or ((ap_const_lv1_1 = ap_CS_fsm_state2) and (tmp_11_i_i_fu_135_p2 = ap_const_lv1_0) and not((not((tmp_11_i_i_fu_135_p2 = ap_const_lv1_0)) and (V_data_V_data_00_status = ap_const_logic_0)))))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_const_logic_0 = ap_start) and (ap_CS_fsm_state1 = ap_const_lv1_1))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_ready_assign_proc : process(ap_CS_fsm_state2, tmp_11_i_i_fu_135_p2, V_data_V_data_00_status)
    begin
        if (((ap_const_lv1_1 = ap_CS_fsm_state2) and (tmp_11_i_i_fu_135_p2 = ap_const_lv1_0) and not((not((tmp_11_i_i_fu_135_p2 = ap_const_lv1_0)) and (V_data_V_data_00_status = ap_const_logic_0))))) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;

    i_V_fu_200_p2 <= std_logic_vector(unsigned(p_i_i_reg_119) + unsigned(ap_const_lv27_4));
        lhs_V_fu_158_p1 <= std_logic_vector(resize(signed(p_i_i_reg_119),28));

    r_V_1_i_i_fu_178_p2 <= (p_i_i_reg_119 or ap_const_lv27_2);
    r_V_2_i_i_fu_189_p2 <= (p_i_i_reg_119 or ap_const_lv27_3);
    r_V_i_i_fu_167_p2 <= (lhs_V_fu_158_p1 or ap_const_lv28_1);
    tmp_11_i_i_fu_135_p2 <= "1" when (signed(tmp_i_i_fu_131_p1) < signed(V_SIZE_read_reg_206)) else "0";
        tmp_19_1_i_i_fu_173_p1 <= std_logic_vector(resize(signed(r_V_i_i_fu_167_p2),64));

        tmp_19_2_i_i_fu_184_p1 <= std_logic_vector(resize(signed(r_V_1_i_i_fu_178_p2),64));

        tmp_19_3_i_i_fu_195_p1 <= std_logic_vector(resize(signed(r_V_2_i_i_fu_189_p2),64));

        tmp_19_i_i_fu_162_p1 <= std_logic_vector(resize(signed(p_i_i_reg_119),64));

        tmp_i_i_fu_131_p1 <= std_logic_vector(resize(signed(p_i_i_reg_119),32));


    voltagesBackup_address0_assign_proc : process(ap_CS_fsm_state2, ap_CS_fsm_state3, tmp_19_i_i_fu_162_p1, tmp_19_2_i_i_fu_184_p1)
    begin
        if (((ap_const_lv1_1 = ap_CS_fsm_state3))) then 
            voltagesBackup_address0 <= tmp_19_2_i_i_fu_184_p1(14 - 1 downto 0);
        elsif (((ap_const_lv1_1 = ap_CS_fsm_state2))) then 
            voltagesBackup_address0 <= tmp_19_i_i_fu_162_p1(14 - 1 downto 0);
        else 
            voltagesBackup_address0 <= "XXXXXXXXXXXXXX";
        end if; 
    end process;


    voltagesBackup_address1_assign_proc : process(ap_CS_fsm_state2, ap_CS_fsm_state3, tmp_19_1_i_i_fu_173_p1, tmp_19_3_i_i_fu_195_p1)
    begin
        if (((ap_const_lv1_1 = ap_CS_fsm_state3))) then 
            voltagesBackup_address1 <= tmp_19_3_i_i_fu_195_p1(14 - 1 downto 0);
        elsif (((ap_const_lv1_1 = ap_CS_fsm_state2))) then 
            voltagesBackup_address1 <= tmp_19_1_i_i_fu_173_p1(14 - 1 downto 0);
        else 
            voltagesBackup_address1 <= "XXXXXXXXXXXXXX";
        end if; 
    end process;


    voltagesBackup_ce0_assign_proc : process(ap_CS_fsm_state2, tmp_11_i_i_fu_135_p2, V_data_V_data_00_status, ap_CS_fsm_state3)
    begin
        if ((((ap_const_lv1_1 = ap_CS_fsm_state2) and not((not((tmp_11_i_i_fu_135_p2 = ap_const_lv1_0)) and (V_data_V_data_00_status = ap_const_logic_0)))) or ((ap_const_lv1_1 = ap_CS_fsm_state3)))) then 
            voltagesBackup_ce0 <= ap_const_logic_1;
        else 
            voltagesBackup_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    voltagesBackup_ce1_assign_proc : process(ap_CS_fsm_state2, tmp_11_i_i_fu_135_p2, V_data_V_data_00_status, ap_CS_fsm_state3)
    begin
        if ((((ap_const_lv1_1 = ap_CS_fsm_state2) and not((not((tmp_11_i_i_fu_135_p2 = ap_const_lv1_0)) and (V_data_V_data_00_status = ap_const_logic_0)))) or ((ap_const_lv1_1 = ap_CS_fsm_state3)))) then 
            voltagesBackup_ce1 <= ap_const_logic_1;
        else 
            voltagesBackup_ce1 <= ap_const_logic_0;
        end if; 
    end process;


    voltagesBackup_d0_assign_proc : process(V_data_V_data_0_dout, ap_CS_fsm_state2, tmp_data_2_reg_214, ap_CS_fsm_state3)
    begin
        if (((ap_const_lv1_1 = ap_CS_fsm_state3))) then 
            voltagesBackup_d0 <= tmp_data_2_reg_214;
        elsif (((ap_const_lv1_1 = ap_CS_fsm_state2))) then 
            voltagesBackup_d0 <= V_data_V_data_0_dout;
        else 
            voltagesBackup_d0 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    voltagesBackup_d1_assign_proc : process(V_data_V_data_1_dout, ap_CS_fsm_state2, tmp_data_3_reg_219, ap_CS_fsm_state3)
    begin
        if (((ap_const_lv1_1 = ap_CS_fsm_state3))) then 
            voltagesBackup_d1 <= tmp_data_3_reg_219;
        elsif (((ap_const_lv1_1 = ap_CS_fsm_state2))) then 
            voltagesBackup_d1 <= V_data_V_data_1_dout;
        else 
            voltagesBackup_d1 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    voltagesBackup_we0_assign_proc : process(ap_CS_fsm_state2, tmp_11_i_i_fu_135_p2, V_data_V_data_00_status, ap_CS_fsm_state3)
    begin
        if ((((ap_const_lv1_1 = ap_CS_fsm_state2) and not((tmp_11_i_i_fu_135_p2 = ap_const_lv1_0)) and not((not((tmp_11_i_i_fu_135_p2 = ap_const_lv1_0)) and (V_data_V_data_00_status = ap_const_logic_0)))) or ((ap_const_lv1_1 = ap_CS_fsm_state3)))) then 
            voltagesBackup_we0 <= ap_const_logic_1;
        else 
            voltagesBackup_we0 <= ap_const_logic_0;
        end if; 
    end process;


    voltagesBackup_we1_assign_proc : process(ap_CS_fsm_state2, tmp_11_i_i_fu_135_p2, V_data_V_data_00_status, ap_CS_fsm_state3)
    begin
        if ((((ap_const_lv1_1 = ap_CS_fsm_state2) and not((tmp_11_i_i_fu_135_p2 = ap_const_lv1_0)) and not((not((tmp_11_i_i_fu_135_p2 = ap_const_lv1_0)) and (V_data_V_data_00_status = ap_const_logic_0)))) or ((ap_const_lv1_1 = ap_CS_fsm_state3)))) then 
            voltagesBackup_we1 <= ap_const_logic_1;
        else 
            voltagesBackup_we1 <= ap_const_logic_0;
        end if; 
    end process;

end behav;
