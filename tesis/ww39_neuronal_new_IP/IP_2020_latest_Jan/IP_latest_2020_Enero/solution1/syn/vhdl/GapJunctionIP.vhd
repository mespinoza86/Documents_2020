-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
-- Version: 2018.3
-- Copyright (C) 1986-2018 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity GapJunctionIP is
generic (
    C_S_AXI_AXILITES_ADDR_WIDTH : INTEGER := 6;
    C_S_AXI_AXILITES_DATA_WIDTH : INTEGER := 32 );
port (
    ap_clk : IN STD_LOGIC;
    ap_rst_n : IN STD_LOGIC;
    input_V_data_TDATA : IN STD_LOGIC_VECTOR (63 downto 0);
    input_V_data_TVALID : IN STD_LOGIC;
    input_V_data_TREADY : OUT STD_LOGIC;
    output_r_TDATA : OUT STD_LOGIC_VECTOR (31 downto 0);
    output_r_TVALID : OUT STD_LOGIC;
    output_r_TREADY : IN STD_LOGIC;
    output_r_TLAST : OUT STD_LOGIC_VECTOR (0 downto 0);
    s_axi_AXILiteS_AWVALID : IN STD_LOGIC;
    s_axi_AXILiteS_AWREADY : OUT STD_LOGIC;
    s_axi_AXILiteS_AWADDR : IN STD_LOGIC_VECTOR (C_S_AXI_AXILITES_ADDR_WIDTH-1 downto 0);
    s_axi_AXILiteS_WVALID : IN STD_LOGIC;
    s_axi_AXILiteS_WREADY : OUT STD_LOGIC;
    s_axi_AXILiteS_WDATA : IN STD_LOGIC_VECTOR (C_S_AXI_AXILITES_DATA_WIDTH-1 downto 0);
    s_axi_AXILiteS_WSTRB : IN STD_LOGIC_VECTOR (C_S_AXI_AXILITES_DATA_WIDTH/8-1 downto 0);
    s_axi_AXILiteS_ARVALID : IN STD_LOGIC;
    s_axi_AXILiteS_ARREADY : OUT STD_LOGIC;
    s_axi_AXILiteS_ARADDR : IN STD_LOGIC_VECTOR (C_S_AXI_AXILITES_ADDR_WIDTH-1 downto 0);
    s_axi_AXILiteS_RVALID : OUT STD_LOGIC;
    s_axi_AXILiteS_RREADY : IN STD_LOGIC;
    s_axi_AXILiteS_RDATA : OUT STD_LOGIC_VECTOR (C_S_AXI_AXILITES_DATA_WIDTH-1 downto 0);
    s_axi_AXILiteS_RRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
    s_axi_AXILiteS_BVALID : OUT STD_LOGIC;
    s_axi_AXILiteS_BREADY : IN STD_LOGIC;
    s_axi_AXILiteS_BRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
    interrupt : OUT STD_LOGIC );
end;


architecture behav of GapJunctionIP is 
    attribute CORE_GENERATION_INFO : STRING;
    attribute CORE_GENERATION_INFO of behav : architecture is
    "GapJunctionIP,hls_ip_2018_3,{HLS_INPUT_TYPE=cxx,HLS_INPUT_FLOAT=0,HLS_INPUT_FIXED=0,HLS_INPUT_PART=xc7z020clg484-1,HLS_INPUT_CLOCK=10.000000,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=6.000000,HLS_SYN_LAT=-1,HLS_SYN_TPT=none,HLS_SYN_MEM=110,HLS_SYN_DSP=88,HLS_SYN_FF=16818,HLS_SYN_LUT=19583,HLS_VERSION=2018_3}";
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (4 downto 0) := "00001";
    constant ap_ST_fsm_state2 : STD_LOGIC_VECTOR (4 downto 0) := "00010";
    constant ap_ST_fsm_state3 : STD_LOGIC_VECTOR (4 downto 0) := "00100";
    constant ap_ST_fsm_state4 : STD_LOGIC_VECTOR (4 downto 0) := "01000";
    constant ap_ST_fsm_state5 : STD_LOGIC_VECTOR (4 downto 0) := "10000";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv2_0 : STD_LOGIC_VECTOR (1 downto 0) := "00";
    constant ap_const_lv2_2 : STD_LOGIC_VECTOR (1 downto 0) := "10";
    constant ap_const_lv2_3 : STD_LOGIC_VECTOR (1 downto 0) := "11";
    constant ap_const_lv2_1 : STD_LOGIC_VECTOR (1 downto 0) := "01";
    constant C_S_AXI_DATA_WIDTH : INTEGER range 63 downto 0 := 20;
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv32_3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000011";
    constant ap_const_boolean_0 : BOOLEAN := false;
    constant ap_const_lv32_1F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011111";
    constant ap_const_lv32_1C : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011100";
    constant ap_const_lv27_0 : STD_LOGIC_VECTOR (26 downto 0) := "000000000000000000000000000";
    constant ap_const_lv32_4 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000100";
    constant ap_const_boolean_1 : BOOLEAN := true;

    signal ap_rst_n_inv : STD_LOGIC;
    signal ap_start : STD_LOGIC;
    signal ap_done : STD_LOGIC;
    signal ap_idle : STD_LOGIC;
    signal ap_CS_fsm : STD_LOGIC_VECTOR (4 downto 0) := "00001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal ap_ready : STD_LOGIC;
    signal input_V_data_0_data_out : STD_LOGIC_VECTOR (63 downto 0);
    signal input_V_data_0_vld_in : STD_LOGIC;
    signal input_V_data_0_vld_out : STD_LOGIC;
    signal input_V_data_0_ack_in : STD_LOGIC;
    signal input_V_data_0_ack_out : STD_LOGIC;
    signal input_V_data_0_payload_A : STD_LOGIC_VECTOR (63 downto 0);
    signal input_V_data_0_payload_B : STD_LOGIC_VECTOR (63 downto 0);
    signal input_V_data_0_sel_rd : STD_LOGIC := '0';
    signal input_V_data_0_sel_wr : STD_LOGIC := '0';
    signal input_V_data_0_sel : STD_LOGIC;
    signal input_V_data_0_load_A : STD_LOGIC;
    signal input_V_data_0_load_B : STD_LOGIC;
    signal input_V_data_0_state : STD_LOGIC_VECTOR (1 downto 0) := "00";
    signal input_V_data_0_state_cmp_full : STD_LOGIC;
    signal output_V_data_1_data_out : STD_LOGIC_VECTOR (31 downto 0);
    signal output_V_data_1_vld_in : STD_LOGIC;
    signal output_V_data_1_vld_out : STD_LOGIC;
    signal output_V_data_1_ack_in : STD_LOGIC;
    signal output_V_data_1_ack_out : STD_LOGIC;
    signal output_V_data_1_payload_A : STD_LOGIC_VECTOR (31 downto 0);
    signal output_V_data_1_payload_B : STD_LOGIC_VECTOR (31 downto 0);
    signal output_V_data_1_sel_rd : STD_LOGIC := '0';
    signal output_V_data_1_sel_wr : STD_LOGIC := '0';
    signal output_V_data_1_sel : STD_LOGIC;
    signal output_V_data_1_load_A : STD_LOGIC;
    signal output_V_data_1_load_B : STD_LOGIC;
    signal output_V_data_1_state : STD_LOGIC_VECTOR (1 downto 0) := "00";
    signal output_V_data_1_state_cmp_full : STD_LOGIC;
    signal output_V_tlast_V_1_data_out : STD_LOGIC_VECTOR (0 downto 0);
    signal output_V_tlast_V_1_vld_in : STD_LOGIC;
    signal output_V_tlast_V_1_vld_out : STD_LOGIC;
    signal output_V_tlast_V_1_ack_in : STD_LOGIC;
    signal output_V_tlast_V_1_ack_out : STD_LOGIC;
    signal output_V_tlast_V_1_payload_A : STD_LOGIC_VECTOR (0 downto 0);
    signal output_V_tlast_V_1_payload_B : STD_LOGIC_VECTOR (0 downto 0);
    signal output_V_tlast_V_1_sel_rd : STD_LOGIC := '0';
    signal output_V_tlast_V_1_sel_wr : STD_LOGIC := '0';
    signal output_V_tlast_V_1_sel : STD_LOGIC;
    signal output_V_tlast_V_1_load_A : STD_LOGIC;
    signal output_V_tlast_V_1_load_B : STD_LOGIC;
    signal output_V_tlast_V_1_state : STD_LOGIC_VECTOR (1 downto 0) := "00";
    signal output_V_tlast_V_1_state_cmp_full : STD_LOGIC;
    signal size : STD_LOGIC_VECTOR (31 downto 0);
    signal size_0_data_reg : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    signal size_0_vld_reg : STD_LOGIC := '0';
    signal size_0_ack_out : STD_LOGIC;
    signal FirstRow : STD_LOGIC_VECTOR (31 downto 0);
    signal FirstRow_0_data_reg : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    signal FirstRow_0_vld_reg : STD_LOGIC := '0';
    signal FirstRow_0_ack_out : STD_LOGIC;
    signal LastRow : STD_LOGIC_VECTOR (31 downto 0);
    signal LastRow_0_data_reg : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    signal LastRow_0_vld_reg : STD_LOGIC := '0';
    signal LastRow_0_ack_out : STD_LOGIC;
    signal size_read_reg_345 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state2 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state2 : signal is "none";
    signal simConfig_rowBegin_V_fu_239_p1 : STD_LOGIC_VECTOR (26 downto 0);
    signal simConfig_rowBegin_V_reg_351 : STD_LOGIC_VECTOR (26 downto 0);
    signal simConfig_rowEnd_V_fu_243_p1 : STD_LOGIC_VECTOR (26 downto 0);
    signal simConfig_rowEnd_V_reg_356 : STD_LOGIC_VECTOR (26 downto 0);
    signal tmp_s_fu_247_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_s_reg_361 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_10_reg_366 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_6_reg_371 : STD_LOGIC_VECTOR (26 downto 0);
    signal tmp_11_reg_376 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_9_reg_381 : STD_LOGIC_VECTOR (26 downto 0);
    signal simConfig_rowsToSimu_fu_310_p3 : STD_LOGIC_VECTOR (26 downto 0);
    signal simConfig_rowsToSimu_reg_386 : STD_LOGIC_VECTOR (26 downto 0);
    signal ap_CS_fsm_state3 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state3 : signal is "none";
    signal simConfig_BLOCK_NUMB_fu_338_p3 : STD_LOGIC_VECTOR (26 downto 0);
    signal simConfig_BLOCK_NUMB_reg_391 : STD_LOGIC_VECTOR (26 downto 0);
    signal grp_execute_fu_148_output_r_TDATA : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_execute_fu_148_output_r_TLAST : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_execute_fu_148_ap_start : STD_LOGIC;
    signal grp_execute_fu_148_input_V_data_TVALID : STD_LOGIC;
    signal grp_execute_fu_148_input_V_data_TREADY : STD_LOGIC;
    signal grp_execute_fu_148_output_r_TVALID : STD_LOGIC;
    signal grp_execute_fu_148_output_r_TREADY : STD_LOGIC;
    signal grp_execute_fu_148_ap_done : STD_LOGIC;
    signal grp_execute_fu_148_ap_ready : STD_LOGIC;
    signal grp_execute_fu_148_ap_idle : STD_LOGIC;
    signal grp_execute_fu_148_ap_continue : STD_LOGIC;
    signal grp_execute_fu_148_ap_start_reg : STD_LOGIC := '0';
    signal ap_CS_fsm_state4 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state4 : signal is "none";
    signal ap_sync_grp_execute_fu_148_ap_ready : STD_LOGIC;
    signal ap_sync_grp_execute_fu_148_ap_done : STD_LOGIC;
    signal ap_block_state4_on_subcall_done : BOOLEAN;
    signal ap_sync_reg_grp_execute_fu_148_ap_ready : STD_LOGIC := '0';
    signal ap_sync_reg_grp_execute_fu_148_ap_done : STD_LOGIC := '0';
    signal p_neg6_fu_289_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_fu_294_p4 : STD_LOGIC_VECTOR (26 downto 0);
    signal tmp_5_fu_304_p2 : STD_LOGIC_VECTOR (26 downto 0);
    signal p_neg_fu_317_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_7_fu_322_p4 : STD_LOGIC_VECTOR (26 downto 0);
    signal tmp_8_fu_332_p2 : STD_LOGIC_VECTOR (26 downto 0);
    signal ap_CS_fsm_state5 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state5 : signal is "none";
    signal ap_block_state5 : BOOLEAN;
    signal ap_NS_fsm : STD_LOGIC_VECTOR (4 downto 0);

    component execute IS
    port (
        input_V_data_TDATA : IN STD_LOGIC_VECTOR (63 downto 0);
        output_r_TDATA : OUT STD_LOGIC_VECTOR (31 downto 0);
        output_r_TLAST : OUT STD_LOGIC_VECTOR (0 downto 0);
        simConfig_rowBegin_V_2 : IN STD_LOGIC_VECTOR (26 downto 0);
        simConfig_rowEnd_V_r : IN STD_LOGIC_VECTOR (26 downto 0);
        simConfig_rowsToSimu : IN STD_LOGIC_VECTOR (26 downto 0);
        simConfig_BLOCK_NUMB : IN STD_LOGIC_VECTOR (26 downto 0);
        size : IN STD_LOGIC_VECTOR (31 downto 0);
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        simConfig_rowBegin_V_2_ap_vld : IN STD_LOGIC;
        simConfig_rowEnd_V_r_ap_vld : IN STD_LOGIC;
        simConfig_rowsToSimu_ap_vld : IN STD_LOGIC;
        simConfig_BLOCK_NUMB_ap_vld : IN STD_LOGIC;
        size_ap_vld : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        input_V_data_TVALID : IN STD_LOGIC;
        input_V_data_TREADY : OUT STD_LOGIC;
        output_r_TVALID : OUT STD_LOGIC;
        output_r_TREADY : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_continue : IN STD_LOGIC );
    end component;


    component GapJunctionIP_AXILiteS_s_axi IS
    generic (
        C_S_AXI_ADDR_WIDTH : INTEGER;
        C_S_AXI_DATA_WIDTH : INTEGER );
    port (
        AWVALID : IN STD_LOGIC;
        AWREADY : OUT STD_LOGIC;
        AWADDR : IN STD_LOGIC_VECTOR (C_S_AXI_ADDR_WIDTH-1 downto 0);
        WVALID : IN STD_LOGIC;
        WREADY : OUT STD_LOGIC;
        WDATA : IN STD_LOGIC_VECTOR (C_S_AXI_DATA_WIDTH-1 downto 0);
        WSTRB : IN STD_LOGIC_VECTOR (C_S_AXI_DATA_WIDTH/8-1 downto 0);
        ARVALID : IN STD_LOGIC;
        ARREADY : OUT STD_LOGIC;
        ARADDR : IN STD_LOGIC_VECTOR (C_S_AXI_ADDR_WIDTH-1 downto 0);
        RVALID : OUT STD_LOGIC;
        RREADY : IN STD_LOGIC;
        RDATA : OUT STD_LOGIC_VECTOR (C_S_AXI_DATA_WIDTH-1 downto 0);
        RRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
        BVALID : OUT STD_LOGIC;
        BREADY : IN STD_LOGIC;
        BRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
        ACLK : IN STD_LOGIC;
        ARESET : IN STD_LOGIC;
        ACLK_EN : IN STD_LOGIC;
        ap_start : OUT STD_LOGIC;
        interrupt : OUT STD_LOGIC;
        ap_ready : IN STD_LOGIC;
        ap_done : IN STD_LOGIC;
        ap_idle : IN STD_LOGIC;
        size : OUT STD_LOGIC_VECTOR (31 downto 0);
        FirstRow : OUT STD_LOGIC_VECTOR (31 downto 0);
        LastRow : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;



begin
    GapJunctionIP_AXILiteS_s_axi_U : component GapJunctionIP_AXILiteS_s_axi
    generic map (
        C_S_AXI_ADDR_WIDTH => C_S_AXI_AXILITES_ADDR_WIDTH,
        C_S_AXI_DATA_WIDTH => C_S_AXI_AXILITES_DATA_WIDTH)
    port map (
        AWVALID => s_axi_AXILiteS_AWVALID,
        AWREADY => s_axi_AXILiteS_AWREADY,
        AWADDR => s_axi_AXILiteS_AWADDR,
        WVALID => s_axi_AXILiteS_WVALID,
        WREADY => s_axi_AXILiteS_WREADY,
        WDATA => s_axi_AXILiteS_WDATA,
        WSTRB => s_axi_AXILiteS_WSTRB,
        ARVALID => s_axi_AXILiteS_ARVALID,
        ARREADY => s_axi_AXILiteS_ARREADY,
        ARADDR => s_axi_AXILiteS_ARADDR,
        RVALID => s_axi_AXILiteS_RVALID,
        RREADY => s_axi_AXILiteS_RREADY,
        RDATA => s_axi_AXILiteS_RDATA,
        RRESP => s_axi_AXILiteS_RRESP,
        BVALID => s_axi_AXILiteS_BVALID,
        BREADY => s_axi_AXILiteS_BREADY,
        BRESP => s_axi_AXILiteS_BRESP,
        ACLK => ap_clk,
        ARESET => ap_rst_n_inv,
        ACLK_EN => ap_const_logic_1,
        ap_start => ap_start,
        interrupt => interrupt,
        ap_ready => ap_ready,
        ap_done => ap_done,
        ap_idle => ap_idle,
        size => size,
        FirstRow => FirstRow,
        LastRow => LastRow);

    grp_execute_fu_148 : component execute
    port map (
        input_V_data_TDATA => input_V_data_0_data_out,
        output_r_TDATA => grp_execute_fu_148_output_r_TDATA,
        output_r_TLAST => grp_execute_fu_148_output_r_TLAST,
        simConfig_rowBegin_V_2 => simConfig_rowBegin_V_reg_351,
        simConfig_rowEnd_V_r => simConfig_rowEnd_V_reg_356,
        simConfig_rowsToSimu => simConfig_rowsToSimu_reg_386,
        simConfig_BLOCK_NUMB => simConfig_BLOCK_NUMB_reg_391,
        size => size_read_reg_345,
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        simConfig_rowBegin_V_2_ap_vld => ap_const_logic_1,
        simConfig_rowEnd_V_r_ap_vld => ap_const_logic_1,
        simConfig_rowsToSimu_ap_vld => ap_const_logic_1,
        simConfig_BLOCK_NUMB_ap_vld => ap_const_logic_1,
        size_ap_vld => ap_const_logic_1,
        ap_start => grp_execute_fu_148_ap_start,
        input_V_data_TVALID => grp_execute_fu_148_input_V_data_TVALID,
        input_V_data_TREADY => grp_execute_fu_148_input_V_data_TREADY,
        output_r_TVALID => grp_execute_fu_148_output_r_TVALID,
        output_r_TREADY => grp_execute_fu_148_output_r_TREADY,
        ap_done => grp_execute_fu_148_ap_done,
        ap_ready => grp_execute_fu_148_ap_ready,
        ap_idle => grp_execute_fu_148_ap_idle,
        ap_continue => grp_execute_fu_148_ap_continue);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    ap_sync_reg_grp_execute_fu_148_ap_done_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_sync_reg_grp_execute_fu_148_ap_done <= ap_const_logic_0;
            else
                if (((ap_const_boolean_0 = ap_block_state4_on_subcall_done) and (ap_const_logic_1 = ap_CS_fsm_state4))) then 
                    ap_sync_reg_grp_execute_fu_148_ap_done <= ap_const_logic_0;
                elsif ((grp_execute_fu_148_ap_done = ap_const_logic_1)) then 
                    ap_sync_reg_grp_execute_fu_148_ap_done <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_sync_reg_grp_execute_fu_148_ap_ready_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_sync_reg_grp_execute_fu_148_ap_ready <= ap_const_logic_0;
            else
                if (((ap_const_boolean_0 = ap_block_state4_on_subcall_done) and (ap_const_logic_1 = ap_CS_fsm_state4))) then 
                    ap_sync_reg_grp_execute_fu_148_ap_ready <= ap_const_logic_0;
                elsif ((grp_execute_fu_148_ap_ready = ap_const_logic_1)) then 
                    ap_sync_reg_grp_execute_fu_148_ap_ready <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    grp_execute_fu_148_ap_start_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                grp_execute_fu_148_ap_start_reg <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = ap_CS_fsm_state3) or ((ap_sync_grp_execute_fu_148_ap_ready = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state4)))) then 
                    grp_execute_fu_148_ap_start_reg <= ap_const_logic_1;
                elsif ((grp_execute_fu_148_ap_ready = ap_const_logic_1)) then 
                    grp_execute_fu_148_ap_start_reg <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    input_V_data_0_sel_rd_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                input_V_data_0_sel_rd <= ap_const_logic_0;
            else
                if (((input_V_data_0_ack_out = ap_const_logic_1) and (input_V_data_0_vld_out = ap_const_logic_1))) then 
                                        input_V_data_0_sel_rd <= not(input_V_data_0_sel_rd);
                end if; 
            end if;
        end if;
    end process;


    input_V_data_0_sel_wr_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                input_V_data_0_sel_wr <= ap_const_logic_0;
            else
                if (((input_V_data_0_ack_in = ap_const_logic_1) and (input_V_data_0_vld_in = ap_const_logic_1))) then 
                                        input_V_data_0_sel_wr <= not(input_V_data_0_sel_wr);
                end if; 
            end if;
        end if;
    end process;


    input_V_data_0_state_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                input_V_data_0_state <= ap_const_lv2_0;
            else
                if ((((input_V_data_0_state = ap_const_lv2_2) and (input_V_data_0_vld_in = ap_const_logic_0)) or ((input_V_data_0_state = ap_const_lv2_3) and (input_V_data_0_vld_in = ap_const_logic_0) and (input_V_data_0_ack_out = ap_const_logic_1)))) then 
                    input_V_data_0_state <= ap_const_lv2_2;
                elsif ((((input_V_data_0_state = ap_const_lv2_1) and (input_V_data_0_ack_out = ap_const_logic_0)) or ((input_V_data_0_state = ap_const_lv2_3) and (input_V_data_0_ack_out = ap_const_logic_0) and (input_V_data_0_vld_in = ap_const_logic_1)))) then 
                    input_V_data_0_state <= ap_const_lv2_1;
                elsif (((not(((input_V_data_0_vld_in = ap_const_logic_0) and (input_V_data_0_ack_out = ap_const_logic_1))) and not(((input_V_data_0_ack_out = ap_const_logic_0) and (input_V_data_0_vld_in = ap_const_logic_1))) and (input_V_data_0_state = ap_const_lv2_3)) or ((input_V_data_0_state = ap_const_lv2_1) and (input_V_data_0_ack_out = ap_const_logic_1)) or ((input_V_data_0_state = ap_const_lv2_2) and (input_V_data_0_vld_in = ap_const_logic_1)))) then 
                    input_V_data_0_state <= ap_const_lv2_3;
                else 
                    input_V_data_0_state <= ap_const_lv2_2;
                end if; 
            end if;
        end if;
    end process;


    output_V_data_1_sel_rd_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                output_V_data_1_sel_rd <= ap_const_logic_0;
            else
                if (((output_V_data_1_ack_out = ap_const_logic_1) and (output_V_data_1_vld_out = ap_const_logic_1))) then 
                                        output_V_data_1_sel_rd <= not(output_V_data_1_sel_rd);
                end if; 
            end if;
        end if;
    end process;


    output_V_data_1_sel_wr_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                output_V_data_1_sel_wr <= ap_const_logic_0;
            else
                if (((output_V_data_1_ack_in = ap_const_logic_1) and (output_V_data_1_vld_in = ap_const_logic_1))) then 
                                        output_V_data_1_sel_wr <= not(output_V_data_1_sel_wr);
                end if; 
            end if;
        end if;
    end process;


    output_V_data_1_state_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                output_V_data_1_state <= ap_const_lv2_0;
            else
                if ((((output_V_data_1_state = ap_const_lv2_2) and (output_V_data_1_vld_in = ap_const_logic_0)) or ((output_V_data_1_state = ap_const_lv2_3) and (output_V_data_1_vld_in = ap_const_logic_0) and (output_V_data_1_ack_out = ap_const_logic_1)))) then 
                    output_V_data_1_state <= ap_const_lv2_2;
                elsif ((((output_V_data_1_state = ap_const_lv2_1) and (output_V_data_1_ack_out = ap_const_logic_0)) or ((output_V_data_1_state = ap_const_lv2_3) and (output_V_data_1_ack_out = ap_const_logic_0) and (output_V_data_1_vld_in = ap_const_logic_1)))) then 
                    output_V_data_1_state <= ap_const_lv2_1;
                elsif (((not(((output_V_data_1_vld_in = ap_const_logic_0) and (output_V_data_1_ack_out = ap_const_logic_1))) and not(((output_V_data_1_ack_out = ap_const_logic_0) and (output_V_data_1_vld_in = ap_const_logic_1))) and (output_V_data_1_state = ap_const_lv2_3)) or ((output_V_data_1_state = ap_const_lv2_1) and (output_V_data_1_ack_out = ap_const_logic_1)) or ((output_V_data_1_state = ap_const_lv2_2) and (output_V_data_1_vld_in = ap_const_logic_1)))) then 
                    output_V_data_1_state <= ap_const_lv2_3;
                else 
                    output_V_data_1_state <= ap_const_lv2_2;
                end if; 
            end if;
        end if;
    end process;


    output_V_tlast_V_1_sel_rd_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                output_V_tlast_V_1_sel_rd <= ap_const_logic_0;
            else
                if (((output_V_tlast_V_1_ack_out = ap_const_logic_1) and (output_V_tlast_V_1_vld_out = ap_const_logic_1))) then 
                                        output_V_tlast_V_1_sel_rd <= not(output_V_tlast_V_1_sel_rd);
                end if; 
            end if;
        end if;
    end process;


    output_V_tlast_V_1_sel_wr_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                output_V_tlast_V_1_sel_wr <= ap_const_logic_0;
            else
                if (((output_V_tlast_V_1_ack_in = ap_const_logic_1) and (output_V_tlast_V_1_vld_in = ap_const_logic_1))) then 
                                        output_V_tlast_V_1_sel_wr <= not(output_V_tlast_V_1_sel_wr);
                end if; 
            end if;
        end if;
    end process;


    output_V_tlast_V_1_state_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                output_V_tlast_V_1_state <= ap_const_lv2_0;
            else
                if ((((output_V_tlast_V_1_state = ap_const_lv2_2) and (output_V_tlast_V_1_vld_in = ap_const_logic_0)) or ((output_V_tlast_V_1_state = ap_const_lv2_3) and (output_V_tlast_V_1_vld_in = ap_const_logic_0) and (output_V_tlast_V_1_ack_out = ap_const_logic_1)))) then 
                    output_V_tlast_V_1_state <= ap_const_lv2_2;
                elsif ((((output_V_tlast_V_1_state = ap_const_lv2_1) and (output_V_tlast_V_1_ack_out = ap_const_logic_0)) or ((output_V_tlast_V_1_state = ap_const_lv2_3) and (output_V_tlast_V_1_ack_out = ap_const_logic_0) and (output_V_tlast_V_1_vld_in = ap_const_logic_1)))) then 
                    output_V_tlast_V_1_state <= ap_const_lv2_1;
                elsif (((not(((output_V_tlast_V_1_vld_in = ap_const_logic_0) and (output_V_tlast_V_1_ack_out = ap_const_logic_1))) and not(((output_V_tlast_V_1_ack_out = ap_const_logic_0) and (output_V_tlast_V_1_vld_in = ap_const_logic_1))) and (output_V_tlast_V_1_state = ap_const_lv2_3)) or ((output_V_tlast_V_1_state = ap_const_lv2_1) and (output_V_tlast_V_1_ack_out = ap_const_logic_1)) or ((output_V_tlast_V_1_state = ap_const_lv2_2) and (output_V_tlast_V_1_vld_in = ap_const_logic_1)))) then 
                    output_V_tlast_V_1_state <= ap_const_lv2_3;
                else 
                    output_V_tlast_V_1_state <= ap_const_lv2_2;
                end if; 
            end if;
        end if;
    end process;


    FirstRow_0_vld_reg_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
        end if;
    end process;

    LastRow_0_vld_reg_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
        end if;
    end process;

    size_0_vld_reg_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((not(((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) and (ap_const_logic_0 = FirstRow_0_vld_reg) and (ap_const_logic_1 = ap_const_logic_1)) or (not(((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) and (ap_const_logic_1 = FirstRow_0_ack_out) and (ap_const_logic_1 = ap_const_logic_1) and (ap_const_logic_1 = FirstRow_0_vld_reg)))) then
                FirstRow_0_data_reg <= FirstRow;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((not(((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) and (ap_const_logic_0 = LastRow_0_vld_reg) and (ap_const_logic_1 = ap_const_logic_1)) or (not(((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) and (ap_const_logic_1 = LastRow_0_ack_out) and (ap_const_logic_1 = ap_const_logic_1) and (ap_const_logic_1 = LastRow_0_vld_reg)))) then
                LastRow_0_data_reg <= LastRow;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((input_V_data_0_load_A = ap_const_logic_1)) then
                input_V_data_0_payload_A <= input_V_data_TDATA;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((input_V_data_0_load_B = ap_const_logic_1)) then
                input_V_data_0_payload_B <= input_V_data_TDATA;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((output_V_data_1_load_A = ap_const_logic_1)) then
                output_V_data_1_payload_A <= grp_execute_fu_148_output_r_TDATA;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((output_V_data_1_load_B = ap_const_logic_1)) then
                output_V_data_1_payload_B <= grp_execute_fu_148_output_r_TDATA;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((output_V_tlast_V_1_load_A = ap_const_logic_1)) then
                output_V_tlast_V_1_payload_A <= grp_execute_fu_148_output_r_TLAST;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((output_V_tlast_V_1_load_B = ap_const_logic_1)) then
                output_V_tlast_V_1_payload_B <= grp_execute_fu_148_output_r_TLAST;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state3)) then
                simConfig_BLOCK_NUMB_reg_391 <= simConfig_BLOCK_NUMB_fu_338_p3;
                simConfig_rowsToSimu_reg_386 <= simConfig_rowsToSimu_fu_310_p3;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state2)) then
                simConfig_rowBegin_V_reg_351 <= simConfig_rowBegin_V_fu_239_p1;
                simConfig_rowEnd_V_reg_356 <= simConfig_rowEnd_V_fu_243_p1;
                size_read_reg_345 <= size_0_data_reg;
                tmp_10_reg_366 <= tmp_s_fu_247_p2(31 downto 31);
                tmp_11_reg_376 <= size_0_data_reg(31 downto 31);
                tmp_6_reg_371 <= tmp_s_fu_247_p2(28 downto 2);
                tmp_9_reg_381 <= size_0_data_reg(28 downto 2);
                tmp_s_reg_361 <= tmp_s_fu_247_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((not(((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) and (size_0_vld_reg = ap_const_logic_0) and (ap_const_logic_1 = ap_const_logic_1)) or (not(((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) and (size_0_ack_out = ap_const_logic_1) and (ap_const_logic_1 = ap_const_logic_1) and (size_0_vld_reg = ap_const_logic_1)))) then
                size_0_data_reg <= size;
            end if;
        end if;
    end process;

    ap_NS_fsm_assign_proc : process (ap_start, ap_CS_fsm, ap_CS_fsm_state1, output_V_data_1_ack_in, output_V_data_1_state, output_V_tlast_V_1_ack_in, output_V_tlast_V_1_state, ap_CS_fsm_state4, ap_block_state4_on_subcall_done, ap_CS_fsm_state5)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_state2 => 
                ap_NS_fsm <= ap_ST_fsm_state3;
            when ap_ST_fsm_state3 => 
                ap_NS_fsm <= ap_ST_fsm_state4;
            when ap_ST_fsm_state4 => 
                if (((ap_const_boolean_0 = ap_block_state4_on_subcall_done) and (ap_const_logic_1 = ap_CS_fsm_state4))) then
                    ap_NS_fsm <= ap_ST_fsm_state5;
                else
                    ap_NS_fsm <= ap_ST_fsm_state4;
                end if;
            when ap_ST_fsm_state5 => 
                if ((not(((output_V_tlast_V_1_ack_in = ap_const_logic_0) or (output_V_data_1_ack_in = ap_const_logic_0))) and (output_V_tlast_V_1_state(0) = ap_const_logic_0) and (output_V_data_1_state(0) = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state5))) then
                    ap_NS_fsm <= ap_ST_fsm_state1;
                else
                    ap_NS_fsm <= ap_ST_fsm_state5;
                end if;
            when others =>  
                ap_NS_fsm <= "XXXXX";
        end case;
    end process;

    FirstRow_0_ack_out_assign_proc : process(output_V_data_1_ack_in, output_V_tlast_V_1_ack_in, ap_CS_fsm_state5)
    begin
        if ((not(((output_V_tlast_V_1_ack_in = ap_const_logic_0) or (output_V_data_1_ack_in = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state5))) then 
            FirstRow_0_ack_out <= ap_const_logic_1;
        else 
            FirstRow_0_ack_out <= ap_const_logic_0;
        end if; 
    end process;


    LastRow_0_ack_out_assign_proc : process(output_V_data_1_ack_in, output_V_tlast_V_1_ack_in, ap_CS_fsm_state5)
    begin
        if ((not(((output_V_tlast_V_1_ack_in = ap_const_logic_0) or (output_V_data_1_ack_in = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state5))) then 
            LastRow_0_ack_out <= ap_const_logic_1;
        else 
            LastRow_0_ack_out <= ap_const_logic_0;
        end if; 
    end process;

    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state2 <= ap_CS_fsm(1);
    ap_CS_fsm_state3 <= ap_CS_fsm(2);
    ap_CS_fsm_state4 <= ap_CS_fsm(3);
    ap_CS_fsm_state5 <= ap_CS_fsm(4);

    ap_block_state4_on_subcall_done_assign_proc : process(ap_sync_grp_execute_fu_148_ap_ready, ap_sync_grp_execute_fu_148_ap_done)
    begin
                ap_block_state4_on_subcall_done <= ((ap_sync_grp_execute_fu_148_ap_ready and ap_sync_grp_execute_fu_148_ap_done) = ap_const_logic_0);
    end process;


    ap_block_state5_assign_proc : process(output_V_data_1_ack_in, output_V_tlast_V_1_ack_in)
    begin
                ap_block_state5 <= ((output_V_tlast_V_1_ack_in = ap_const_logic_0) or (output_V_data_1_ack_in = ap_const_logic_0));
    end process;


    ap_done_assign_proc : process(output_V_data_1_ack_in, output_V_data_1_state, output_V_tlast_V_1_ack_in, output_V_tlast_V_1_state, ap_CS_fsm_state5)
    begin
        if ((not(((output_V_tlast_V_1_ack_in = ap_const_logic_0) or (output_V_data_1_ack_in = ap_const_logic_0))) and (output_V_tlast_V_1_state(0) = ap_const_logic_0) and (output_V_data_1_state(0) = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state5))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_ready_assign_proc : process(output_V_data_1_ack_in, output_V_data_1_state, output_V_tlast_V_1_ack_in, output_V_tlast_V_1_state, ap_CS_fsm_state5)
    begin
        if ((not(((output_V_tlast_V_1_ack_in = ap_const_logic_0) or (output_V_data_1_ack_in = ap_const_logic_0))) and (output_V_tlast_V_1_state(0) = ap_const_logic_0) and (output_V_data_1_state(0) = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state5))) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;


    ap_rst_n_inv_assign_proc : process(ap_rst_n)
    begin
                ap_rst_n_inv <= not(ap_rst_n);
    end process;

    ap_sync_grp_execute_fu_148_ap_done <= (grp_execute_fu_148_ap_done or ap_sync_reg_grp_execute_fu_148_ap_done);
    ap_sync_grp_execute_fu_148_ap_ready <= (grp_execute_fu_148_ap_ready or ap_sync_reg_grp_execute_fu_148_ap_ready);

    grp_execute_fu_148_ap_continue_assign_proc : process(ap_CS_fsm_state4, ap_block_state4_on_subcall_done)
    begin
        if (((ap_const_boolean_0 = ap_block_state4_on_subcall_done) and (ap_const_logic_1 = ap_CS_fsm_state4))) then 
            grp_execute_fu_148_ap_continue <= ap_const_logic_1;
        else 
            grp_execute_fu_148_ap_continue <= ap_const_logic_0;
        end if; 
    end process;

    grp_execute_fu_148_ap_start <= grp_execute_fu_148_ap_start_reg;
    grp_execute_fu_148_input_V_data_TVALID <= input_V_data_0_state(0);
    grp_execute_fu_148_output_r_TREADY <= ((output_V_tlast_V_1_ack_in and ap_CS_fsm_state4) or (output_V_data_1_ack_in and ap_CS_fsm_state4));
    input_V_data_0_ack_in <= input_V_data_0_state(1);

    input_V_data_0_ack_out_assign_proc : process(grp_execute_fu_148_input_V_data_TREADY, ap_CS_fsm_state4)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            input_V_data_0_ack_out <= grp_execute_fu_148_input_V_data_TREADY;
        else 
            input_V_data_0_ack_out <= ap_const_logic_0;
        end if; 
    end process;


    input_V_data_0_data_out_assign_proc : process(input_V_data_0_payload_A, input_V_data_0_payload_B, input_V_data_0_sel)
    begin
        if ((input_V_data_0_sel = ap_const_logic_1)) then 
            input_V_data_0_data_out <= input_V_data_0_payload_B;
        else 
            input_V_data_0_data_out <= input_V_data_0_payload_A;
        end if; 
    end process;

    input_V_data_0_load_A <= (input_V_data_0_state_cmp_full and not(input_V_data_0_sel_wr));
    input_V_data_0_load_B <= (input_V_data_0_state_cmp_full and input_V_data_0_sel_wr);
    input_V_data_0_sel <= input_V_data_0_sel_rd;
    input_V_data_0_state_cmp_full <= '0' when (input_V_data_0_state = ap_const_lv2_1) else '1';
    input_V_data_0_vld_in <= input_V_data_TVALID;
    input_V_data_0_vld_out <= input_V_data_0_state(0);
    input_V_data_TREADY <= input_V_data_0_state(1);
    output_V_data_1_ack_in <= output_V_data_1_state(1);
    output_V_data_1_ack_out <= output_r_TREADY;

    output_V_data_1_data_out_assign_proc : process(output_V_data_1_payload_A, output_V_data_1_payload_B, output_V_data_1_sel)
    begin
        if ((output_V_data_1_sel = ap_const_logic_1)) then 
            output_V_data_1_data_out <= output_V_data_1_payload_B;
        else 
            output_V_data_1_data_out <= output_V_data_1_payload_A;
        end if; 
    end process;

    output_V_data_1_load_A <= (output_V_data_1_state_cmp_full and not(output_V_data_1_sel_wr));
    output_V_data_1_load_B <= (output_V_data_1_state_cmp_full and output_V_data_1_sel_wr);
    output_V_data_1_sel <= output_V_data_1_sel_rd;
    output_V_data_1_state_cmp_full <= '0' when (output_V_data_1_state = ap_const_lv2_1) else '1';
    output_V_data_1_vld_in <= grp_execute_fu_148_output_r_TVALID;
    output_V_data_1_vld_out <= output_V_data_1_state(0);
    output_V_tlast_V_1_ack_in <= output_V_tlast_V_1_state(1);
    output_V_tlast_V_1_ack_out <= output_r_TREADY;

    output_V_tlast_V_1_data_out_assign_proc : process(output_V_tlast_V_1_payload_A, output_V_tlast_V_1_payload_B, output_V_tlast_V_1_sel)
    begin
        if ((output_V_tlast_V_1_sel = ap_const_logic_1)) then 
            output_V_tlast_V_1_data_out <= output_V_tlast_V_1_payload_B;
        else 
            output_V_tlast_V_1_data_out <= output_V_tlast_V_1_payload_A;
        end if; 
    end process;

    output_V_tlast_V_1_load_A <= (output_V_tlast_V_1_state_cmp_full and not(output_V_tlast_V_1_sel_wr));
    output_V_tlast_V_1_load_B <= (output_V_tlast_V_1_state_cmp_full and output_V_tlast_V_1_sel_wr);
    output_V_tlast_V_1_sel <= output_V_tlast_V_1_sel_rd;
    output_V_tlast_V_1_state_cmp_full <= '0' when (output_V_tlast_V_1_state = ap_const_lv2_1) else '1';
    output_V_tlast_V_1_vld_in <= grp_execute_fu_148_output_r_TVALID;
    output_V_tlast_V_1_vld_out <= output_V_tlast_V_1_state(0);
    output_r_TDATA <= output_V_data_1_data_out;
    output_r_TLAST <= output_V_tlast_V_1_data_out;
    output_r_TVALID <= output_V_tlast_V_1_state(0);
    p_neg6_fu_289_p2 <= std_logic_vector(unsigned(ap_const_lv32_0) - unsigned(tmp_s_reg_361));
    p_neg_fu_317_p2 <= std_logic_vector(unsigned(ap_const_lv32_0) - unsigned(size_read_reg_345));
    simConfig_BLOCK_NUMB_fu_338_p3 <= 
        tmp_8_fu_332_p2 when (tmp_11_reg_376(0) = '1') else 
        tmp_9_reg_381;
    simConfig_rowBegin_V_fu_239_p1 <= FirstRow_0_data_reg(27 - 1 downto 0);
    simConfig_rowEnd_V_fu_243_p1 <= LastRow_0_data_reg(27 - 1 downto 0);
    simConfig_rowsToSimu_fu_310_p3 <= 
        tmp_5_fu_304_p2 when (tmp_10_reg_366(0) = '1') else 
        tmp_6_reg_371;

    size_0_ack_out_assign_proc : process(output_V_data_1_ack_in, output_V_tlast_V_1_ack_in, ap_CS_fsm_state5)
    begin
        if ((not(((output_V_tlast_V_1_ack_in = ap_const_logic_0) or (output_V_data_1_ack_in = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state5))) then 
            size_0_ack_out <= ap_const_logic_1;
        else 
            size_0_ack_out <= ap_const_logic_0;
        end if; 
    end process;

    tmp_5_fu_304_p2 <= std_logic_vector(unsigned(ap_const_lv27_0) - unsigned(tmp_fu_294_p4));
    tmp_7_fu_322_p4 <= p_neg_fu_317_p2(28 downto 2);
    tmp_8_fu_332_p2 <= std_logic_vector(unsigned(ap_const_lv27_0) - unsigned(tmp_7_fu_322_p4));
    tmp_fu_294_p4 <= p_neg6_fu_289_p2(28 downto 2);
    tmp_s_fu_247_p2 <= std_logic_vector(unsigned(LastRow_0_data_reg) - unsigned(FirstRow_0_data_reg));
end behav;
