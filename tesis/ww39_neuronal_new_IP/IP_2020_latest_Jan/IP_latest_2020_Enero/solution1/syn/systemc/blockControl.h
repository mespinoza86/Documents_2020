// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2018.3
// Copyright (C) 1986-2018 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

#ifndef _blockControl_HH_
#define _blockControl_HH_

#include "systemc.h"
#include "AESL_pkg.h"

#include "getConductances.h"
#include "getVoltages.h"

namespace ap_rtl {

struct blockControl : public sc_module {
    // Port declarations 46
    sc_in_clk ap_clk;
    sc_in< sc_logic > ap_rst;
    sc_in< sc_logic > ap_start;
    sc_in< sc_logic > start_full_n;
    sc_out< sc_logic > ap_done;
    sc_in< sc_logic > ap_continue;
    sc_out< sc_logic > ap_idle;
    sc_out< sc_logic > ap_ready;
    sc_out< sc_logic > start_out;
    sc_out< sc_logic > start_write;
    sc_in< sc_lv<64> > input_V_data_TDATA;
    sc_in< sc_logic > input_V_data_TVALID;
    sc_out< sc_logic > input_V_data_TREADY;
    sc_in< sc_lv<27> > simConfig_rowsToSimulate_V_dout;
    sc_in< sc_logic > simConfig_rowsToSimulate_V_empty_n;
    sc_out< sc_logic > simConfig_rowsToSimulate_V_read;
    sc_in< sc_lv<27> > simConfig_BLOCK_NUMBERS_V_dout;
    sc_in< sc_logic > simConfig_BLOCK_NUMBERS_V_empty_n;
    sc_out< sc_logic > simConfig_BLOCK_NUMBERS_V_read;
    sc_in< sc_lv<32> > V_SIZE_dout;
    sc_in< sc_logic > V_SIZE_empty_n;
    sc_out< sc_logic > V_SIZE_read;
    sc_out< sc_lv<32> > V_data_V_data_0_din;
    sc_in< sc_logic > V_data_V_data_0_full_n;
    sc_out< sc_logic > V_data_V_data_0_write;
    sc_out< sc_lv<32> > V_data_V_data_1_din;
    sc_in< sc_logic > V_data_V_data_1_full_n;
    sc_out< sc_logic > V_data_V_data_1_write;
    sc_out< sc_lv<32> > V_data_V_data_2_din;
    sc_in< sc_logic > V_data_V_data_2_full_n;
    sc_out< sc_logic > V_data_V_data_2_write;
    sc_out< sc_lv<32> > V_data_V_data_3_din;
    sc_in< sc_logic > V_data_V_data_3_full_n;
    sc_out< sc_logic > V_data_V_data_3_write;
    sc_out< sc_lv<32> > C_data_V_data_0_din;
    sc_in< sc_logic > C_data_V_data_0_full_n;
    sc_out< sc_logic > C_data_V_data_0_write;
    sc_out< sc_lv<32> > C_data_V_data_1_din;
    sc_in< sc_logic > C_data_V_data_1_full_n;
    sc_out< sc_logic > C_data_V_data_1_write;
    sc_out< sc_lv<32> > C_data_V_data_2_din;
    sc_in< sc_logic > C_data_V_data_2_full_n;
    sc_out< sc_logic > C_data_V_data_2_write;
    sc_out< sc_lv<32> > C_data_V_data_3_din;
    sc_in< sc_logic > C_data_V_data_3_full_n;
    sc_out< sc_logic > C_data_V_data_3_write;


    // Module declarations
    blockControl(sc_module_name name);
    SC_HAS_PROCESS(blockControl);

    ~blockControl();

    sc_trace_file* mVcdFile;

    getConductances* grp_getConductances_fu_70;
    getVoltages* grp_getVoltages_fu_86;
    sc_signal< sc_logic > real_start;
    sc_signal< sc_logic > start_once_reg;
    sc_signal< sc_logic > ap_done_reg;
    sc_signal< sc_lv<4> > ap_CS_fsm;
    sc_signal< sc_logic > ap_CS_fsm_state1;
    sc_signal< sc_logic > internal_ap_ready;
    sc_signal< sc_logic > simConfig_rowsToSimulate_V_blk_n;
    sc_signal< sc_logic > simConfig_BLOCK_NUMBERS_V_blk_n;
    sc_signal< sc_logic > V_SIZE_blk_n;
    sc_signal< sc_lv<32> > V_SIZE_read_reg_102;
    sc_signal< bool > ap_block_state1;
    sc_signal< sc_lv<27> > simConfig_rowsToSimu_reg_107;
    sc_signal< sc_lv<27> > simConfig_BLOCK_NUMB_reg_112;
    sc_signal< sc_logic > grp_getConductances_fu_70_ap_start;
    sc_signal< sc_logic > grp_getConductances_fu_70_ap_done;
    sc_signal< sc_logic > grp_getConductances_fu_70_ap_idle;
    sc_signal< sc_logic > grp_getConductances_fu_70_ap_ready;
    sc_signal< sc_logic > grp_getConductances_fu_70_input_V_data_TREADY;
    sc_signal< sc_lv<32> > grp_getConductances_fu_70_C_data_V_data_0_din;
    sc_signal< sc_logic > grp_getConductances_fu_70_C_data_V_data_0_write;
    sc_signal< sc_lv<32> > grp_getConductances_fu_70_C_data_V_data_1_din;
    sc_signal< sc_logic > grp_getConductances_fu_70_C_data_V_data_1_write;
    sc_signal< sc_lv<32> > grp_getConductances_fu_70_C_data_V_data_2_din;
    sc_signal< sc_logic > grp_getConductances_fu_70_C_data_V_data_2_write;
    sc_signal< sc_lv<32> > grp_getConductances_fu_70_C_data_V_data_3_din;
    sc_signal< sc_logic > grp_getConductances_fu_70_C_data_V_data_3_write;
    sc_signal< sc_logic > grp_getVoltages_fu_86_ap_start;
    sc_signal< sc_logic > grp_getVoltages_fu_86_ap_done;
    sc_signal< sc_logic > grp_getVoltages_fu_86_ap_idle;
    sc_signal< sc_logic > grp_getVoltages_fu_86_ap_ready;
    sc_signal< sc_logic > grp_getVoltages_fu_86_input_V_data_TREADY;
    sc_signal< sc_lv<32> > grp_getVoltages_fu_86_V_data_V_data_0_din;
    sc_signal< sc_logic > grp_getVoltages_fu_86_V_data_V_data_0_write;
    sc_signal< sc_lv<32> > grp_getVoltages_fu_86_V_data_V_data_1_din;
    sc_signal< sc_logic > grp_getVoltages_fu_86_V_data_V_data_1_write;
    sc_signal< sc_lv<32> > grp_getVoltages_fu_86_V_data_V_data_2_din;
    sc_signal< sc_logic > grp_getVoltages_fu_86_V_data_V_data_2_write;
    sc_signal< sc_lv<32> > grp_getVoltages_fu_86_V_data_V_data_3_din;
    sc_signal< sc_logic > grp_getVoltages_fu_86_V_data_V_data_3_write;
    sc_signal< sc_logic > grp_getConductances_fu_70_ap_start_reg;
    sc_signal< sc_logic > ap_CS_fsm_state3;
    sc_signal< sc_logic > ap_CS_fsm_state4;
    sc_signal< sc_logic > grp_getVoltages_fu_86_ap_start_reg;
    sc_signal< bool > ap_block_state1_ignore_call22;
    sc_signal< sc_logic > ap_CS_fsm_state2;
    sc_signal< sc_lv<4> > ap_NS_fsm;
    static const sc_logic ap_const_logic_1;
    static const sc_logic ap_const_logic_0;
    static const sc_lv<4> ap_ST_fsm_state1;
    static const sc_lv<4> ap_ST_fsm_state2;
    static const sc_lv<4> ap_ST_fsm_state3;
    static const sc_lv<4> ap_ST_fsm_state4;
    static const sc_lv<32> ap_const_lv32_0;
    static const sc_lv<32> ap_const_lv32_2;
    static const sc_lv<32> ap_const_lv32_3;
    static const sc_lv<32> ap_const_lv32_1;
    static const bool ap_const_boolean_1;
    // Thread declarations
    void thread_ap_clk_no_reset_();
    void thread_C_data_V_data_0_din();
    void thread_C_data_V_data_0_write();
    void thread_C_data_V_data_1_din();
    void thread_C_data_V_data_1_write();
    void thread_C_data_V_data_2_din();
    void thread_C_data_V_data_2_write();
    void thread_C_data_V_data_3_din();
    void thread_C_data_V_data_3_write();
    void thread_V_SIZE_blk_n();
    void thread_V_SIZE_read();
    void thread_V_data_V_data_0_din();
    void thread_V_data_V_data_0_write();
    void thread_V_data_V_data_1_din();
    void thread_V_data_V_data_1_write();
    void thread_V_data_V_data_2_din();
    void thread_V_data_V_data_2_write();
    void thread_V_data_V_data_3_din();
    void thread_V_data_V_data_3_write();
    void thread_ap_CS_fsm_state1();
    void thread_ap_CS_fsm_state2();
    void thread_ap_CS_fsm_state3();
    void thread_ap_CS_fsm_state4();
    void thread_ap_block_state1();
    void thread_ap_block_state1_ignore_call22();
    void thread_ap_done();
    void thread_ap_idle();
    void thread_ap_ready();
    void thread_grp_getConductances_fu_70_ap_start();
    void thread_grp_getVoltages_fu_86_ap_start();
    void thread_input_V_data_TREADY();
    void thread_internal_ap_ready();
    void thread_real_start();
    void thread_simConfig_BLOCK_NUMBERS_V_blk_n();
    void thread_simConfig_BLOCK_NUMBERS_V_read();
    void thread_simConfig_rowsToSimulate_V_blk_n();
    void thread_simConfig_rowsToSimulate_V_read();
    void thread_start_out();
    void thread_start_write();
    void thread_ap_NS_fsm();
};

}

using namespace ap_rtl;

#endif
