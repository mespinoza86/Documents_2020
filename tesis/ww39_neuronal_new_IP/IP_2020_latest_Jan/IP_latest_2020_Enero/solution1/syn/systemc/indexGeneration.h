// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2018.3
// Copyright (C) 1986-2018 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

#ifndef _indexGeneration_HH_
#define _indexGeneration_HH_

#include "systemc.h"
#include "AESL_pkg.h"


namespace ap_rtl {

struct indexGeneration : public sc_module {
    // Port declarations 40
    sc_in_clk ap_clk;
    sc_in< sc_logic > ap_rst;
    sc_in< sc_logic > ap_start;
    sc_out< sc_logic > ap_done;
    sc_in< sc_logic > ap_continue;
    sc_out< sc_logic > ap_idle;
    sc_out< sc_logic > ap_ready;
    sc_in< sc_lv<27> > simConfig_rowBegin_V_dout;
    sc_in< sc_logic > simConfig_rowBegin_V_empty_n;
    sc_out< sc_logic > simConfig_rowBegin_V_read;
    sc_in< sc_lv<27> > simConfig_rowEnd_V_dout;
    sc_in< sc_logic > simConfig_rowEnd_V_empty_n;
    sc_out< sc_logic > simConfig_rowEnd_V_read;
    sc_in< sc_lv<27> > simConfig_BLOCK_NUMBERS_V_dout;
    sc_in< sc_logic > simConfig_BLOCK_NUMBERS_V_empty_n;
    sc_out< sc_logic > simConfig_BLOCK_NUMBERS_V_read;
    sc_out< sc_lv<27> > Vi_idx_V_data_V_0_din;
    sc_in< sc_logic > Vi_idx_V_data_V_0_full_n;
    sc_out< sc_logic > Vi_idx_V_data_V_0_write;
    sc_out< sc_lv<27> > Vi_idx_V_data_V_1_din;
    sc_in< sc_logic > Vi_idx_V_data_V_1_full_n;
    sc_out< sc_logic > Vi_idx_V_data_V_1_write;
    sc_out< sc_lv<27> > Vi_idx_V_data_V_2_din;
    sc_in< sc_logic > Vi_idx_V_data_V_2_full_n;
    sc_out< sc_logic > Vi_idx_V_data_V_2_write;
    sc_out< sc_lv<27> > Vi_idx_V_data_V_3_din;
    sc_in< sc_logic > Vi_idx_V_data_V_3_full_n;
    sc_out< sc_logic > Vi_idx_V_data_V_3_write;
    sc_out< sc_lv<27> > Vj_idx_V_data_V_0_din;
    sc_in< sc_logic > Vj_idx_V_data_V_0_full_n;
    sc_out< sc_logic > Vj_idx_V_data_V_0_write;
    sc_out< sc_lv<27> > Vj_idx_V_data_V_1_din;
    sc_in< sc_logic > Vj_idx_V_data_V_1_full_n;
    sc_out< sc_logic > Vj_idx_V_data_V_1_write;
    sc_out< sc_lv<27> > Vj_idx_V_data_V_2_din;
    sc_in< sc_logic > Vj_idx_V_data_V_2_full_n;
    sc_out< sc_logic > Vj_idx_V_data_V_2_write;
    sc_out< sc_lv<27> > Vj_idx_V_data_V_3_din;
    sc_in< sc_logic > Vj_idx_V_data_V_3_full_n;
    sc_out< sc_logic > Vj_idx_V_data_V_3_write;


    // Module declarations
    indexGeneration(sc_module_name name);
    SC_HAS_PROCESS(indexGeneration);

    ~indexGeneration();

    sc_trace_file* mVcdFile;

    sc_signal< sc_logic > ap_done_reg;
    sc_signal< sc_lv<3> > ap_CS_fsm;
    sc_signal< sc_logic > ap_CS_fsm_state1;
    sc_signal< sc_logic > simConfig_rowBegin_V_blk_n;
    sc_signal< sc_logic > simConfig_rowEnd_V_blk_n;
    sc_signal< sc_logic > simConfig_BLOCK_NUMBERS_V_blk_n;
    sc_signal< sc_logic > Vi_idx_V_data_V_0_blk_n;
    sc_signal< sc_logic > ap_CS_fsm_state2;
    sc_signal< sc_lv<1> > tmp_12_i_i_fu_164_p2;
    sc_signal< sc_logic > Vi_idx_V_data_V_1_blk_n;
    sc_signal< sc_logic > Vi_idx_V_data_V_2_blk_n;
    sc_signal< sc_logic > Vi_idx_V_data_V_3_blk_n;
    sc_signal< sc_logic > Vj_idx_V_data_V_0_blk_n;
    sc_signal< sc_logic > ap_CS_fsm_state3;
    sc_signal< sc_lv<1> > tmp_18_i_i_fu_194_p2;
    sc_signal< sc_logic > Vj_idx_V_data_V_1_blk_n;
    sc_signal< sc_logic > Vj_idx_V_data_V_2_blk_n;
    sc_signal< sc_logic > Vj_idx_V_data_V_3_blk_n;
    sc_signal< sc_lv<27> > simConfig_BLOCK_NUMB_reg_257;
    sc_signal< bool > ap_block_state1;
    sc_signal< sc_lv<28> > tmp_cast_i_i_fu_156_p1;
    sc_signal< sc_lv<28> > tmp_cast_i_i_reg_267;
    sc_signal< sc_lv<12> > block_V_fu_199_p2;
    sc_signal< sc_logic > Vj_idx_V_data_V_01_status;
    sc_signal< bool > ap_block_state3;
    sc_signal< sc_lv<27> > rowOffset_V_1_fu_251_p2;
    sc_signal< sc_lv<27> > tmp_data_0_V_reg_134;
    sc_signal< sc_lv<12> > t_V_reg_145;
    sc_signal< sc_logic > Vi_idx_V_data_V_01_status;
    sc_signal< bool > ap_block_state2;
    sc_signal< sc_logic > Vi_idx_V_data_V_01_update;
    sc_signal< sc_logic > Vj_idx_V_data_V_01_update;
    sc_signal< sc_lv<28> > tmp_cast_i_i_19_fu_160_p1;
    sc_signal< sc_lv<27> > t_V_cast_i_i_fu_190_p1;
    sc_signal< sc_lv<14> > column_V_fu_205_p3;
    sc_signal< sc_lv<14> > tmp_data_1_V_2_fu_218_p2;
    sc_signal< sc_lv<14> > tmp_data_2_V_2_fu_229_p2;
    sc_signal< sc_lv<14> > tmp_data_3_V_2_fu_240_p2;
    sc_signal< sc_lv<3> > ap_NS_fsm;
    static const sc_logic ap_const_logic_1;
    static const sc_logic ap_const_logic_0;
    static const sc_lv<3> ap_ST_fsm_state1;
    static const sc_lv<3> ap_ST_fsm_state2;
    static const sc_lv<3> ap_ST_fsm_state3;
    static const sc_lv<32> ap_const_lv32_0;
    static const sc_lv<32> ap_const_lv32_1;
    static const sc_lv<1> ap_const_lv1_1;
    static const sc_lv<32> ap_const_lv32_2;
    static const sc_lv<1> ap_const_lv1_0;
    static const sc_lv<12> ap_const_lv12_0;
    static const sc_lv<27> ap_const_lv27_1;
    static const sc_lv<27> ap_const_lv27_2;
    static const sc_lv<27> ap_const_lv27_3;
    static const sc_lv<12> ap_const_lv12_1;
    static const sc_lv<2> ap_const_lv2_0;
    static const sc_lv<14> ap_const_lv14_1;
    static const sc_lv<14> ap_const_lv14_2;
    static const sc_lv<14> ap_const_lv14_3;
    static const sc_lv<27> ap_const_lv27_4;
    static const bool ap_const_boolean_1;
    // Thread declarations
    void thread_ap_clk_no_reset_();
    void thread_Vi_idx_V_data_V_01_status();
    void thread_Vi_idx_V_data_V_01_update();
    void thread_Vi_idx_V_data_V_0_blk_n();
    void thread_Vi_idx_V_data_V_0_din();
    void thread_Vi_idx_V_data_V_0_write();
    void thread_Vi_idx_V_data_V_1_blk_n();
    void thread_Vi_idx_V_data_V_1_din();
    void thread_Vi_idx_V_data_V_1_write();
    void thread_Vi_idx_V_data_V_2_blk_n();
    void thread_Vi_idx_V_data_V_2_din();
    void thread_Vi_idx_V_data_V_2_write();
    void thread_Vi_idx_V_data_V_3_blk_n();
    void thread_Vi_idx_V_data_V_3_din();
    void thread_Vi_idx_V_data_V_3_write();
    void thread_Vj_idx_V_data_V_01_status();
    void thread_Vj_idx_V_data_V_01_update();
    void thread_Vj_idx_V_data_V_0_blk_n();
    void thread_Vj_idx_V_data_V_0_din();
    void thread_Vj_idx_V_data_V_0_write();
    void thread_Vj_idx_V_data_V_1_blk_n();
    void thread_Vj_idx_V_data_V_1_din();
    void thread_Vj_idx_V_data_V_1_write();
    void thread_Vj_idx_V_data_V_2_blk_n();
    void thread_Vj_idx_V_data_V_2_din();
    void thread_Vj_idx_V_data_V_2_write();
    void thread_Vj_idx_V_data_V_3_blk_n();
    void thread_Vj_idx_V_data_V_3_din();
    void thread_Vj_idx_V_data_V_3_write();
    void thread_ap_CS_fsm_state1();
    void thread_ap_CS_fsm_state2();
    void thread_ap_CS_fsm_state3();
    void thread_ap_block_state1();
    void thread_ap_block_state2();
    void thread_ap_block_state3();
    void thread_ap_done();
    void thread_ap_idle();
    void thread_ap_ready();
    void thread_block_V_fu_199_p2();
    void thread_column_V_fu_205_p3();
    void thread_rowOffset_V_1_fu_251_p2();
    void thread_simConfig_BLOCK_NUMBERS_V_blk_n();
    void thread_simConfig_BLOCK_NUMBERS_V_read();
    void thread_simConfig_rowBegin_V_blk_n();
    void thread_simConfig_rowBegin_V_read();
    void thread_simConfig_rowEnd_V_blk_n();
    void thread_simConfig_rowEnd_V_read();
    void thread_t_V_cast_i_i_fu_190_p1();
    void thread_tmp_12_i_i_fu_164_p2();
    void thread_tmp_18_i_i_fu_194_p2();
    void thread_tmp_cast_i_i_19_fu_160_p1();
    void thread_tmp_cast_i_i_fu_156_p1();
    void thread_tmp_data_1_V_2_fu_218_p2();
    void thread_tmp_data_2_V_2_fu_229_p2();
    void thread_tmp_data_3_V_2_fu_240_p2();
    void thread_ap_NS_fsm();
};

}

using namespace ap_rtl;

#endif
