// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2018.3
// Copyright (C) 1986-2018 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

#include "readCalcData.h"
#include "AESL_pkg.h"

using namespace std;

namespace ap_rtl {

const sc_logic readCalcData::ap_const_logic_1 = sc_dt::Log_1;
const sc_logic readCalcData::ap_const_logic_0 = sc_dt::Log_0;
const sc_lv<1> readCalcData::ap_ST_fsm_state1 = "1";
const sc_lv<32> readCalcData::ap_const_lv32_0 = "00000000000000000000000000000000";
const bool readCalcData::ap_const_boolean_1 = true;

readCalcData::readCalcData(sc_module_name name) : sc_module(name), mVcdFile(0) {

    SC_METHOD(thread_ap_clk_no_reset_);
    dont_initialize();
    sensitive << ( ap_clk.pos() );

    SC_METHOD(thread_F_V_data_00_status);
    sensitive << ( F_V_data_0_empty_n );
    sensitive << ( F_V_data_1_empty_n );
    sensitive << ( F_V_data_2_empty_n );
    sensitive << ( F_V_data_3_empty_n );

    SC_METHOD(thread_F_V_data_00_update);
    sensitive << ( ap_start );
    sensitive << ( ap_CS_fsm_state1 );
    sensitive << ( F_V_data_00_status );
    sensitive << ( V_V_data_00_status );
    sensitive << ( ap_ce );

    SC_METHOD(thread_F_V_data_0_blk_n);
    sensitive << ( ap_start );
    sensitive << ( ap_CS_fsm_state1 );
    sensitive << ( F_V_data_0_empty_n );

    SC_METHOD(thread_F_V_data_0_read);
    sensitive << ( F_V_data_00_update );

    SC_METHOD(thread_F_V_data_1_blk_n);
    sensitive << ( ap_start );
    sensitive << ( ap_CS_fsm_state1 );
    sensitive << ( F_V_data_1_empty_n );

    SC_METHOD(thread_F_V_data_1_read);
    sensitive << ( F_V_data_00_update );

    SC_METHOD(thread_F_V_data_2_blk_n);
    sensitive << ( ap_start );
    sensitive << ( ap_CS_fsm_state1 );
    sensitive << ( F_V_data_2_empty_n );

    SC_METHOD(thread_F_V_data_2_read);
    sensitive << ( F_V_data_00_update );

    SC_METHOD(thread_F_V_data_3_blk_n);
    sensitive << ( ap_start );
    sensitive << ( ap_CS_fsm_state1 );
    sensitive << ( F_V_data_3_empty_n );

    SC_METHOD(thread_F_V_data_3_read);
    sensitive << ( F_V_data_00_update );

    SC_METHOD(thread_V_V_data_00_status);
    sensitive << ( V_V_data_0_empty_n );
    sensitive << ( V_V_data_1_empty_n );
    sensitive << ( V_V_data_2_empty_n );
    sensitive << ( V_V_data_3_empty_n );

    SC_METHOD(thread_V_V_data_00_update);
    sensitive << ( ap_start );
    sensitive << ( ap_CS_fsm_state1 );
    sensitive << ( F_V_data_00_status );
    sensitive << ( V_V_data_00_status );
    sensitive << ( ap_ce );

    SC_METHOD(thread_V_V_data_0_blk_n);
    sensitive << ( ap_start );
    sensitive << ( ap_CS_fsm_state1 );
    sensitive << ( V_V_data_0_empty_n );

    SC_METHOD(thread_V_V_data_0_read);
    sensitive << ( V_V_data_00_update );

    SC_METHOD(thread_V_V_data_1_blk_n);
    sensitive << ( ap_start );
    sensitive << ( ap_CS_fsm_state1 );
    sensitive << ( V_V_data_1_empty_n );

    SC_METHOD(thread_V_V_data_1_read);
    sensitive << ( V_V_data_00_update );

    SC_METHOD(thread_V_V_data_2_blk_n);
    sensitive << ( ap_start );
    sensitive << ( ap_CS_fsm_state1 );
    sensitive << ( V_V_data_2_empty_n );

    SC_METHOD(thread_V_V_data_2_read);
    sensitive << ( V_V_data_00_update );

    SC_METHOD(thread_V_V_data_3_blk_n);
    sensitive << ( ap_start );
    sensitive << ( ap_CS_fsm_state1 );
    sensitive << ( V_V_data_3_empty_n );

    SC_METHOD(thread_V_V_data_3_read);
    sensitive << ( V_V_data_00_update );

    SC_METHOD(thread_ap_CS_fsm_state1);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_block_state1);
    sensitive << ( ap_start );
    sensitive << ( F_V_data_00_status );
    sensitive << ( V_V_data_00_status );

    SC_METHOD(thread_ap_done);
    sensitive << ( ap_start );
    sensitive << ( ap_CS_fsm_state1 );
    sensitive << ( F_V_data_00_status );
    sensitive << ( V_V_data_00_status );
    sensitive << ( ap_ce );

    SC_METHOD(thread_ap_idle);
    sensitive << ( ap_start );
    sensitive << ( ap_CS_fsm_state1 );

    SC_METHOD(thread_ap_ready);
    sensitive << ( ap_start );
    sensitive << ( ap_CS_fsm_state1 );
    sensitive << ( F_V_data_00_status );
    sensitive << ( V_V_data_00_status );
    sensitive << ( ap_ce );

    SC_METHOD(thread_ap_return_0);
    sensitive << ( ap_start );
    sensitive << ( ap_CS_fsm_state1 );
    sensitive << ( F_V_data_0_dout );
    sensitive << ( F_V_data_00_status );
    sensitive << ( V_V_data_00_status );
    sensitive << ( ap_ce );

    SC_METHOD(thread_ap_return_1);
    sensitive << ( ap_start );
    sensitive << ( ap_CS_fsm_state1 );
    sensitive << ( F_V_data_1_dout );
    sensitive << ( F_V_data_00_status );
    sensitive << ( V_V_data_00_status );
    sensitive << ( ap_ce );

    SC_METHOD(thread_ap_return_2);
    sensitive << ( ap_start );
    sensitive << ( ap_CS_fsm_state1 );
    sensitive << ( F_V_data_2_dout );
    sensitive << ( F_V_data_00_status );
    sensitive << ( V_V_data_00_status );
    sensitive << ( ap_ce );

    SC_METHOD(thread_ap_return_3);
    sensitive << ( ap_start );
    sensitive << ( ap_CS_fsm_state1 );
    sensitive << ( F_V_data_3_dout );
    sensitive << ( F_V_data_00_status );
    sensitive << ( V_V_data_00_status );
    sensitive << ( ap_ce );

    SC_METHOD(thread_ap_return_4);
    sensitive << ( ap_start );
    sensitive << ( ap_CS_fsm_state1 );
    sensitive << ( V_V_data_0_dout );
    sensitive << ( F_V_data_00_status );
    sensitive << ( V_V_data_00_status );
    sensitive << ( ap_ce );

    SC_METHOD(thread_ap_return_5);
    sensitive << ( ap_start );
    sensitive << ( ap_CS_fsm_state1 );
    sensitive << ( V_V_data_1_dout );
    sensitive << ( F_V_data_00_status );
    sensitive << ( V_V_data_00_status );
    sensitive << ( ap_ce );

    SC_METHOD(thread_ap_return_6);
    sensitive << ( ap_start );
    sensitive << ( ap_CS_fsm_state1 );
    sensitive << ( V_V_data_2_dout );
    sensitive << ( F_V_data_00_status );
    sensitive << ( V_V_data_00_status );
    sensitive << ( ap_ce );

    SC_METHOD(thread_ap_return_7);
    sensitive << ( ap_start );
    sensitive << ( ap_CS_fsm_state1 );
    sensitive << ( V_V_data_3_dout );
    sensitive << ( F_V_data_00_status );
    sensitive << ( V_V_data_00_status );
    sensitive << ( ap_ce );

    SC_METHOD(thread_ap_NS_fsm);
    sensitive << ( ap_start );
    sensitive << ( ap_CS_fsm );
    sensitive << ( ap_CS_fsm_state1 );
    sensitive << ( F_V_data_00_status );
    sensitive << ( V_V_data_00_status );
    sensitive << ( ap_ce );

    ap_CS_fsm = "1";
    static int apTFileNum = 0;
    stringstream apTFilenSS;
    apTFilenSS << "readCalcData_sc_trace_" << apTFileNum ++;
    string apTFn = apTFilenSS.str();
    mVcdFile = sc_create_vcd_trace_file(apTFn.c_str());
    mVcdFile->set_time_unit(1, SC_PS);
    if (1) {
#ifdef __HLS_TRACE_LEVEL_PORT_HIER__
    sc_trace(mVcdFile, ap_clk, "(port)ap_clk");
    sc_trace(mVcdFile, ap_rst, "(port)ap_rst");
    sc_trace(mVcdFile, ap_start, "(port)ap_start");
    sc_trace(mVcdFile, ap_done, "(port)ap_done");
    sc_trace(mVcdFile, ap_idle, "(port)ap_idle");
    sc_trace(mVcdFile, ap_ready, "(port)ap_ready");
    sc_trace(mVcdFile, F_V_data_0_dout, "(port)F_V_data_0_dout");
    sc_trace(mVcdFile, F_V_data_0_empty_n, "(port)F_V_data_0_empty_n");
    sc_trace(mVcdFile, F_V_data_0_read, "(port)F_V_data_0_read");
    sc_trace(mVcdFile, F_V_data_1_dout, "(port)F_V_data_1_dout");
    sc_trace(mVcdFile, F_V_data_1_empty_n, "(port)F_V_data_1_empty_n");
    sc_trace(mVcdFile, F_V_data_1_read, "(port)F_V_data_1_read");
    sc_trace(mVcdFile, F_V_data_2_dout, "(port)F_V_data_2_dout");
    sc_trace(mVcdFile, F_V_data_2_empty_n, "(port)F_V_data_2_empty_n");
    sc_trace(mVcdFile, F_V_data_2_read, "(port)F_V_data_2_read");
    sc_trace(mVcdFile, F_V_data_3_dout, "(port)F_V_data_3_dout");
    sc_trace(mVcdFile, F_V_data_3_empty_n, "(port)F_V_data_3_empty_n");
    sc_trace(mVcdFile, F_V_data_3_read, "(port)F_V_data_3_read");
    sc_trace(mVcdFile, V_V_data_0_dout, "(port)V_V_data_0_dout");
    sc_trace(mVcdFile, V_V_data_0_empty_n, "(port)V_V_data_0_empty_n");
    sc_trace(mVcdFile, V_V_data_0_read, "(port)V_V_data_0_read");
    sc_trace(mVcdFile, V_V_data_1_dout, "(port)V_V_data_1_dout");
    sc_trace(mVcdFile, V_V_data_1_empty_n, "(port)V_V_data_1_empty_n");
    sc_trace(mVcdFile, V_V_data_1_read, "(port)V_V_data_1_read");
    sc_trace(mVcdFile, V_V_data_2_dout, "(port)V_V_data_2_dout");
    sc_trace(mVcdFile, V_V_data_2_empty_n, "(port)V_V_data_2_empty_n");
    sc_trace(mVcdFile, V_V_data_2_read, "(port)V_V_data_2_read");
    sc_trace(mVcdFile, V_V_data_3_dout, "(port)V_V_data_3_dout");
    sc_trace(mVcdFile, V_V_data_3_empty_n, "(port)V_V_data_3_empty_n");
    sc_trace(mVcdFile, V_V_data_3_read, "(port)V_V_data_3_read");
    sc_trace(mVcdFile, ap_return_0, "(port)ap_return_0");
    sc_trace(mVcdFile, ap_return_1, "(port)ap_return_1");
    sc_trace(mVcdFile, ap_return_2, "(port)ap_return_2");
    sc_trace(mVcdFile, ap_return_3, "(port)ap_return_3");
    sc_trace(mVcdFile, ap_return_4, "(port)ap_return_4");
    sc_trace(mVcdFile, ap_return_5, "(port)ap_return_5");
    sc_trace(mVcdFile, ap_return_6, "(port)ap_return_6");
    sc_trace(mVcdFile, ap_return_7, "(port)ap_return_7");
    sc_trace(mVcdFile, F_V_data_0_blk_n, "(port)F_V_data_0_blk_n");
    sc_trace(mVcdFile, F_V_data_1_blk_n, "(port)F_V_data_1_blk_n");
    sc_trace(mVcdFile, F_V_data_2_blk_n, "(port)F_V_data_2_blk_n");
    sc_trace(mVcdFile, F_V_data_3_blk_n, "(port)F_V_data_3_blk_n");
    sc_trace(mVcdFile, V_V_data_0_blk_n, "(port)V_V_data_0_blk_n");
    sc_trace(mVcdFile, V_V_data_1_blk_n, "(port)V_V_data_1_blk_n");
    sc_trace(mVcdFile, V_V_data_2_blk_n, "(port)V_V_data_2_blk_n");
    sc_trace(mVcdFile, V_V_data_3_blk_n, "(port)V_V_data_3_blk_n");
    sc_trace(mVcdFile, ap_ce, "(port)ap_ce");
#endif
#ifdef __HLS_TRACE_LEVEL_INT__
    sc_trace(mVcdFile, ap_CS_fsm, "ap_CS_fsm");
    sc_trace(mVcdFile, ap_CS_fsm_state1, "ap_CS_fsm_state1");
    sc_trace(mVcdFile, F_V_data_00_update, "F_V_data_00_update");
    sc_trace(mVcdFile, F_V_data_00_status, "F_V_data_00_status");
    sc_trace(mVcdFile, V_V_data_00_status, "V_V_data_00_status");
    sc_trace(mVcdFile, ap_block_state1, "ap_block_state1");
    sc_trace(mVcdFile, V_V_data_00_update, "V_V_data_00_update");
    sc_trace(mVcdFile, ap_NS_fsm, "ap_NS_fsm");
#endif

    }
}

readCalcData::~readCalcData() {
    if (mVcdFile) 
        sc_close_vcd_trace_file(mVcdFile);

}

void readCalcData::thread_ap_clk_no_reset_() {
    if ( ap_rst.read() == ap_const_logic_1) {
        ap_CS_fsm = ap_ST_fsm_state1;
    } else {
        ap_CS_fsm = ap_NS_fsm.read();
    }
}

void readCalcData::thread_F_V_data_00_status() {
    F_V_data_00_status = (F_V_data_0_empty_n.read() & F_V_data_1_empty_n.read() & F_V_data_2_empty_n.read() & F_V_data_3_empty_n.read());
}

void readCalcData::thread_F_V_data_00_update() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()) && 
         !(esl_seteq<1,1,1>(ap_const_logic_0, ap_start.read()) || esl_seteq<1,1,1>(ap_const_logic_0, F_V_data_00_status.read()) || esl_seteq<1,1,1>(ap_const_logic_0, V_V_data_00_status.read())) && 
         esl_seteq<1,1,1>(ap_ce.read(), ap_const_logic_1))) {
        F_V_data_00_update = ap_const_logic_1;
    } else {
        F_V_data_00_update = ap_const_logic_0;
    }
}

void readCalcData::thread_F_V_data_0_blk_n() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()) && 
         esl_seteq<1,1,1>(ap_start.read(), ap_const_logic_1))) {
        F_V_data_0_blk_n = F_V_data_0_empty_n.read();
    } else {
        F_V_data_0_blk_n = ap_const_logic_1;
    }
}

void readCalcData::thread_F_V_data_0_read() {
    F_V_data_0_read = F_V_data_00_update.read();
}

void readCalcData::thread_F_V_data_1_blk_n() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()) && 
         esl_seteq<1,1,1>(ap_start.read(), ap_const_logic_1))) {
        F_V_data_1_blk_n = F_V_data_1_empty_n.read();
    } else {
        F_V_data_1_blk_n = ap_const_logic_1;
    }
}

void readCalcData::thread_F_V_data_1_read() {
    F_V_data_1_read = F_V_data_00_update.read();
}

void readCalcData::thread_F_V_data_2_blk_n() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()) && 
         esl_seteq<1,1,1>(ap_start.read(), ap_const_logic_1))) {
        F_V_data_2_blk_n = F_V_data_2_empty_n.read();
    } else {
        F_V_data_2_blk_n = ap_const_logic_1;
    }
}

void readCalcData::thread_F_V_data_2_read() {
    F_V_data_2_read = F_V_data_00_update.read();
}

void readCalcData::thread_F_V_data_3_blk_n() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()) && 
         esl_seteq<1,1,1>(ap_start.read(), ap_const_logic_1))) {
        F_V_data_3_blk_n = F_V_data_3_empty_n.read();
    } else {
        F_V_data_3_blk_n = ap_const_logic_1;
    }
}

void readCalcData::thread_F_V_data_3_read() {
    F_V_data_3_read = F_V_data_00_update.read();
}

void readCalcData::thread_V_V_data_00_status() {
    V_V_data_00_status = (V_V_data_0_empty_n.read() & V_V_data_1_empty_n.read() & V_V_data_2_empty_n.read() & V_V_data_3_empty_n.read());
}

void readCalcData::thread_V_V_data_00_update() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()) && 
         !(esl_seteq<1,1,1>(ap_const_logic_0, ap_start.read()) || esl_seteq<1,1,1>(ap_const_logic_0, F_V_data_00_status.read()) || esl_seteq<1,1,1>(ap_const_logic_0, V_V_data_00_status.read())) && 
         esl_seteq<1,1,1>(ap_ce.read(), ap_const_logic_1))) {
        V_V_data_00_update = ap_const_logic_1;
    } else {
        V_V_data_00_update = ap_const_logic_0;
    }
}

void readCalcData::thread_V_V_data_0_blk_n() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()) && 
         esl_seteq<1,1,1>(ap_start.read(), ap_const_logic_1))) {
        V_V_data_0_blk_n = V_V_data_0_empty_n.read();
    } else {
        V_V_data_0_blk_n = ap_const_logic_1;
    }
}

void readCalcData::thread_V_V_data_0_read() {
    V_V_data_0_read = V_V_data_00_update.read();
}

void readCalcData::thread_V_V_data_1_blk_n() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()) && 
         esl_seteq<1,1,1>(ap_start.read(), ap_const_logic_1))) {
        V_V_data_1_blk_n = V_V_data_1_empty_n.read();
    } else {
        V_V_data_1_blk_n = ap_const_logic_1;
    }
}

void readCalcData::thread_V_V_data_1_read() {
    V_V_data_1_read = V_V_data_00_update.read();
}

void readCalcData::thread_V_V_data_2_blk_n() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()) && 
         esl_seteq<1,1,1>(ap_start.read(), ap_const_logic_1))) {
        V_V_data_2_blk_n = V_V_data_2_empty_n.read();
    } else {
        V_V_data_2_blk_n = ap_const_logic_1;
    }
}

void readCalcData::thread_V_V_data_2_read() {
    V_V_data_2_read = V_V_data_00_update.read();
}

void readCalcData::thread_V_V_data_3_blk_n() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()) && 
         esl_seteq<1,1,1>(ap_start.read(), ap_const_logic_1))) {
        V_V_data_3_blk_n = V_V_data_3_empty_n.read();
    } else {
        V_V_data_3_blk_n = ap_const_logic_1;
    }
}

void readCalcData::thread_V_V_data_3_read() {
    V_V_data_3_read = V_V_data_00_update.read();
}

void readCalcData::thread_ap_CS_fsm_state1() {
    ap_CS_fsm_state1 = ap_CS_fsm.read()[0];
}

void readCalcData::thread_ap_block_state1() {
    ap_block_state1 = (esl_seteq<1,1,1>(ap_const_logic_0, ap_start.read()) || esl_seteq<1,1,1>(ap_const_logic_0, F_V_data_00_status.read()) || esl_seteq<1,1,1>(ap_const_logic_0, V_V_data_00_status.read()));
}

void readCalcData::thread_ap_done() {
    if (((esl_seteq<1,1,1>(ap_const_logic_0, ap_start.read()) && 
          esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read())) || 
         (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()) && 
          !(esl_seteq<1,1,1>(ap_const_logic_0, ap_start.read()) || esl_seteq<1,1,1>(ap_const_logic_0, F_V_data_00_status.read()) || esl_seteq<1,1,1>(ap_const_logic_0, V_V_data_00_status.read())) && 
          esl_seteq<1,1,1>(ap_ce.read(), ap_const_logic_1)))) {
        ap_done = ap_const_logic_1;
    } else {
        ap_done = ap_const_logic_0;
    }
}

void readCalcData::thread_ap_idle() {
    if ((esl_seteq<1,1,1>(ap_const_logic_0, ap_start.read()) && 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()))) {
        ap_idle = ap_const_logic_1;
    } else {
        ap_idle = ap_const_logic_0;
    }
}

void readCalcData::thread_ap_ready() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()) && 
         !(esl_seteq<1,1,1>(ap_const_logic_0, ap_start.read()) || esl_seteq<1,1,1>(ap_const_logic_0, F_V_data_00_status.read()) || esl_seteq<1,1,1>(ap_const_logic_0, V_V_data_00_status.read())) && 
         esl_seteq<1,1,1>(ap_ce.read(), ap_const_logic_1))) {
        ap_ready = ap_const_logic_1;
    } else {
        ap_ready = ap_const_logic_0;
    }
}

void readCalcData::thread_ap_return_0() {
    ap_return_0 = F_V_data_0_dout.read();
}

void readCalcData::thread_ap_return_1() {
    ap_return_1 = F_V_data_1_dout.read();
}

void readCalcData::thread_ap_return_2() {
    ap_return_2 = F_V_data_2_dout.read();
}

void readCalcData::thread_ap_return_3() {
    ap_return_3 = F_V_data_3_dout.read();
}

void readCalcData::thread_ap_return_4() {
    ap_return_4 = V_V_data_0_dout.read();
}

void readCalcData::thread_ap_return_5() {
    ap_return_5 = V_V_data_1_dout.read();
}

void readCalcData::thread_ap_return_6() {
    ap_return_6 = V_V_data_2_dout.read();
}

void readCalcData::thread_ap_return_7() {
    ap_return_7 = V_V_data_3_dout.read();
}

void readCalcData::thread_ap_NS_fsm() {
    switch (ap_CS_fsm.read().to_uint64()) {
        case 1 : 
            ap_NS_fsm = ap_ST_fsm_state1;
break;
        default : 
            ap_NS_fsm = "X";
            break;
    }
}

}

