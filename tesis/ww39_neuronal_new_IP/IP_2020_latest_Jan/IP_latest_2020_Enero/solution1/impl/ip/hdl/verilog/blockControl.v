// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2018.3
// Copyright (C) 1986-2018 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module blockControl (
        ap_clk,
        ap_rst,
        ap_start,
        start_full_n,
        ap_done,
        ap_continue,
        ap_idle,
        ap_ready,
        start_out,
        start_write,
        input_V_data_TDATA,
        input_V_data_TVALID,
        input_V_data_TREADY,
        simConfig_rowsToSimulate_V_dout,
        simConfig_rowsToSimulate_V_empty_n,
        simConfig_rowsToSimulate_V_read,
        simConfig_BLOCK_NUMBERS_V_dout,
        simConfig_BLOCK_NUMBERS_V_empty_n,
        simConfig_BLOCK_NUMBERS_V_read,
        V_SIZE_dout,
        V_SIZE_empty_n,
        V_SIZE_read,
        V_data_V_data_0_din,
        V_data_V_data_0_full_n,
        V_data_V_data_0_write,
        V_data_V_data_1_din,
        V_data_V_data_1_full_n,
        V_data_V_data_1_write,
        V_data_V_data_2_din,
        V_data_V_data_2_full_n,
        V_data_V_data_2_write,
        V_data_V_data_3_din,
        V_data_V_data_3_full_n,
        V_data_V_data_3_write,
        C_data_V_data_0_din,
        C_data_V_data_0_full_n,
        C_data_V_data_0_write,
        C_data_V_data_1_din,
        C_data_V_data_1_full_n,
        C_data_V_data_1_write,
        C_data_V_data_2_din,
        C_data_V_data_2_full_n,
        C_data_V_data_2_write,
        C_data_V_data_3_din,
        C_data_V_data_3_full_n,
        C_data_V_data_3_write
);

parameter    ap_ST_fsm_state1 = 4'd1;
parameter    ap_ST_fsm_state2 = 4'd2;
parameter    ap_ST_fsm_state3 = 4'd4;
parameter    ap_ST_fsm_state4 = 4'd8;

input   ap_clk;
input   ap_rst;
input   ap_start;
input   start_full_n;
output   ap_done;
input   ap_continue;
output   ap_idle;
output   ap_ready;
output   start_out;
output   start_write;
input  [63:0] input_V_data_TDATA;
input   input_V_data_TVALID;
output   input_V_data_TREADY;
input  [26:0] simConfig_rowsToSimulate_V_dout;
input   simConfig_rowsToSimulate_V_empty_n;
output   simConfig_rowsToSimulate_V_read;
input  [26:0] simConfig_BLOCK_NUMBERS_V_dout;
input   simConfig_BLOCK_NUMBERS_V_empty_n;
output   simConfig_BLOCK_NUMBERS_V_read;
input  [31:0] V_SIZE_dout;
input   V_SIZE_empty_n;
output   V_SIZE_read;
output  [31:0] V_data_V_data_0_din;
input   V_data_V_data_0_full_n;
output   V_data_V_data_0_write;
output  [31:0] V_data_V_data_1_din;
input   V_data_V_data_1_full_n;
output   V_data_V_data_1_write;
output  [31:0] V_data_V_data_2_din;
input   V_data_V_data_2_full_n;
output   V_data_V_data_2_write;
output  [31:0] V_data_V_data_3_din;
input   V_data_V_data_3_full_n;
output   V_data_V_data_3_write;
output  [31:0] C_data_V_data_0_din;
input   C_data_V_data_0_full_n;
output   C_data_V_data_0_write;
output  [31:0] C_data_V_data_1_din;
input   C_data_V_data_1_full_n;
output   C_data_V_data_1_write;
output  [31:0] C_data_V_data_2_din;
input   C_data_V_data_2_full_n;
output   C_data_V_data_2_write;
output  [31:0] C_data_V_data_3_din;
input   C_data_V_data_3_full_n;
output   C_data_V_data_3_write;

reg ap_done;
reg ap_idle;
reg start_write;
reg input_V_data_TREADY;
reg simConfig_rowsToSimulate_V_read;
reg simConfig_BLOCK_NUMBERS_V_read;
reg V_SIZE_read;
reg V_data_V_data_0_write;
reg V_data_V_data_1_write;
reg V_data_V_data_2_write;
reg V_data_V_data_3_write;
reg C_data_V_data_0_write;
reg C_data_V_data_1_write;
reg C_data_V_data_2_write;
reg C_data_V_data_3_write;

reg    real_start;
reg    start_once_reg;
reg    ap_done_reg;
(* fsm_encoding = "none" *) reg   [3:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
reg    internal_ap_ready;
reg    simConfig_rowsToSimulate_V_blk_n;
reg    simConfig_BLOCK_NUMBERS_V_blk_n;
reg    V_SIZE_blk_n;
reg   [31:0] V_SIZE_read_reg_102;
reg    ap_block_state1;
reg   [26:0] simConfig_rowsToSimu_reg_107;
reg   [26:0] simConfig_BLOCK_NUMB_reg_112;
wire    grp_getConductances_fu_70_ap_start;
wire    grp_getConductances_fu_70_ap_done;
wire    grp_getConductances_fu_70_ap_idle;
wire    grp_getConductances_fu_70_ap_ready;
wire    grp_getConductances_fu_70_input_V_data_TREADY;
wire   [31:0] grp_getConductances_fu_70_C_data_V_data_0_din;
wire    grp_getConductances_fu_70_C_data_V_data_0_write;
wire   [31:0] grp_getConductances_fu_70_C_data_V_data_1_din;
wire    grp_getConductances_fu_70_C_data_V_data_1_write;
wire   [31:0] grp_getConductances_fu_70_C_data_V_data_2_din;
wire    grp_getConductances_fu_70_C_data_V_data_2_write;
wire   [31:0] grp_getConductances_fu_70_C_data_V_data_3_din;
wire    grp_getConductances_fu_70_C_data_V_data_3_write;
wire    grp_getVoltages_fu_86_ap_start;
wire    grp_getVoltages_fu_86_ap_done;
wire    grp_getVoltages_fu_86_ap_idle;
wire    grp_getVoltages_fu_86_ap_ready;
wire    grp_getVoltages_fu_86_input_V_data_TREADY;
wire   [31:0] grp_getVoltages_fu_86_V_data_V_data_0_din;
wire    grp_getVoltages_fu_86_V_data_V_data_0_write;
wire   [31:0] grp_getVoltages_fu_86_V_data_V_data_1_din;
wire    grp_getVoltages_fu_86_V_data_V_data_1_write;
wire   [31:0] grp_getVoltages_fu_86_V_data_V_data_2_din;
wire    grp_getVoltages_fu_86_V_data_V_data_2_write;
wire   [31:0] grp_getVoltages_fu_86_V_data_V_data_3_din;
wire    grp_getVoltages_fu_86_V_data_V_data_3_write;
reg    grp_getConductances_fu_70_ap_start_reg;
wire    ap_CS_fsm_state3;
wire    ap_CS_fsm_state4;
reg    grp_getVoltages_fu_86_ap_start_reg;
reg    ap_block_state1_ignore_call22;
wire    ap_CS_fsm_state2;
reg   [3:0] ap_NS_fsm;

// power-on initialization
initial begin
#0 start_once_reg = 1'b0;
#0 ap_done_reg = 1'b0;
#0 ap_CS_fsm = 4'd1;
#0 grp_getConductances_fu_70_ap_start_reg = 1'b0;
#0 grp_getVoltages_fu_86_ap_start_reg = 1'b0;
end

getConductances grp_getConductances_fu_70(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .ap_start(grp_getConductances_fu_70_ap_start),
    .ap_done(grp_getConductances_fu_70_ap_done),
    .ap_idle(grp_getConductances_fu_70_ap_idle),
    .ap_ready(grp_getConductances_fu_70_ap_ready),
    .input_V_data_TDATA(input_V_data_TDATA),
    .input_V_data_TVALID(input_V_data_TVALID),
    .input_V_data_TREADY(grp_getConductances_fu_70_input_V_data_TREADY),
    .simConfig_rowsToSimulate_V_read(simConfig_rowsToSimu_reg_107),
    .simConfig_BLOCK_NUMBERS_V_read(simConfig_BLOCK_NUMB_reg_112),
    .C_data_V_data_0_din(grp_getConductances_fu_70_C_data_V_data_0_din),
    .C_data_V_data_0_full_n(C_data_V_data_0_full_n),
    .C_data_V_data_0_write(grp_getConductances_fu_70_C_data_V_data_0_write),
    .C_data_V_data_1_din(grp_getConductances_fu_70_C_data_V_data_1_din),
    .C_data_V_data_1_full_n(C_data_V_data_1_full_n),
    .C_data_V_data_1_write(grp_getConductances_fu_70_C_data_V_data_1_write),
    .C_data_V_data_2_din(grp_getConductances_fu_70_C_data_V_data_2_din),
    .C_data_V_data_2_full_n(C_data_V_data_2_full_n),
    .C_data_V_data_2_write(grp_getConductances_fu_70_C_data_V_data_2_write),
    .C_data_V_data_3_din(grp_getConductances_fu_70_C_data_V_data_3_din),
    .C_data_V_data_3_full_n(C_data_V_data_3_full_n),
    .C_data_V_data_3_write(grp_getConductances_fu_70_C_data_V_data_3_write)
);

getVoltages grp_getVoltages_fu_86(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .ap_start(grp_getVoltages_fu_86_ap_start),
    .ap_done(grp_getVoltages_fu_86_ap_done),
    .ap_idle(grp_getVoltages_fu_86_ap_idle),
    .ap_ready(grp_getVoltages_fu_86_ap_ready),
    .input_V_data_TDATA(input_V_data_TDATA),
    .input_V_data_TVALID(input_V_data_TVALID),
    .input_V_data_TREADY(grp_getVoltages_fu_86_input_V_data_TREADY),
    .V_SIZE(V_SIZE_read_reg_102),
    .V_data_V_data_0_din(grp_getVoltages_fu_86_V_data_V_data_0_din),
    .V_data_V_data_0_full_n(V_data_V_data_0_full_n),
    .V_data_V_data_0_write(grp_getVoltages_fu_86_V_data_V_data_0_write),
    .V_data_V_data_1_din(grp_getVoltages_fu_86_V_data_V_data_1_din),
    .V_data_V_data_1_full_n(V_data_V_data_1_full_n),
    .V_data_V_data_1_write(grp_getVoltages_fu_86_V_data_V_data_1_write),
    .V_data_V_data_2_din(grp_getVoltages_fu_86_V_data_V_data_2_din),
    .V_data_V_data_2_full_n(V_data_V_data_2_full_n),
    .V_data_V_data_2_write(grp_getVoltages_fu_86_V_data_V_data_2_write),
    .V_data_V_data_3_din(grp_getVoltages_fu_86_V_data_V_data_3_din),
    .V_data_V_data_3_full_n(V_data_V_data_3_full_n),
    .V_data_V_data_3_write(grp_getVoltages_fu_86_V_data_V_data_3_write)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_done_reg <= 1'b0;
    end else begin
        if ((ap_continue == 1'b1)) begin
            ap_done_reg <= 1'b0;
        end else if (((1'b1 == ap_CS_fsm_state4) & (grp_getConductances_fu_70_ap_done == 1'b1))) begin
            ap_done_reg <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        grp_getConductances_fu_70_ap_start_reg <= 1'b0;
    end else begin
        if ((1'b1 == ap_CS_fsm_state3)) begin
            grp_getConductances_fu_70_ap_start_reg <= 1'b1;
        end else if ((grp_getConductances_fu_70_ap_ready == 1'b1)) begin
            grp_getConductances_fu_70_ap_start_reg <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        grp_getVoltages_fu_86_ap_start_reg <= 1'b0;
    end else begin
        if ((~((1'b0 == V_SIZE_empty_n) | (simConfig_BLOCK_NUMBERS_V_empty_n == 1'b0) | (simConfig_rowsToSimulate_V_empty_n == 1'b0) | (real_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
            grp_getVoltages_fu_86_ap_start_reg <= 1'b1;
        end else if ((grp_getVoltages_fu_86_ap_ready == 1'b1)) begin
            grp_getVoltages_fu_86_ap_start_reg <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        start_once_reg <= 1'b0;
    end else begin
        if (((internal_ap_ready == 1'b0) & (real_start == 1'b1))) begin
            start_once_reg <= 1'b1;
        end else if ((internal_ap_ready == 1'b1)) begin
            start_once_reg <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if ((~((1'b0 == V_SIZE_empty_n) | (simConfig_BLOCK_NUMBERS_V_empty_n == 1'b0) | (simConfig_rowsToSimulate_V_empty_n == 1'b0) | (real_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        V_SIZE_read_reg_102 <= V_SIZE_dout;
        simConfig_BLOCK_NUMB_reg_112 <= simConfig_BLOCK_NUMBERS_V_dout;
        simConfig_rowsToSimu_reg_107 <= simConfig_rowsToSimulate_V_dout;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state4)) begin
        C_data_V_data_0_write = grp_getConductances_fu_70_C_data_V_data_0_write;
    end else begin
        C_data_V_data_0_write = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state4)) begin
        C_data_V_data_1_write = grp_getConductances_fu_70_C_data_V_data_1_write;
    end else begin
        C_data_V_data_1_write = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state4)) begin
        C_data_V_data_2_write = grp_getConductances_fu_70_C_data_V_data_2_write;
    end else begin
        C_data_V_data_2_write = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state4)) begin
        C_data_V_data_3_write = grp_getConductances_fu_70_C_data_V_data_3_write;
    end else begin
        C_data_V_data_3_write = 1'b0;
    end
end

always @ (*) begin
    if ((~((real_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        V_SIZE_blk_n = V_SIZE_empty_n;
    end else begin
        V_SIZE_blk_n = 1'b1;
    end
end

always @ (*) begin
    if ((~((1'b0 == V_SIZE_empty_n) | (simConfig_BLOCK_NUMBERS_V_empty_n == 1'b0) | (simConfig_rowsToSimulate_V_empty_n == 1'b0) | (real_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        V_SIZE_read = 1'b1;
    end else begin
        V_SIZE_read = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        V_data_V_data_0_write = grp_getVoltages_fu_86_V_data_V_data_0_write;
    end else begin
        V_data_V_data_0_write = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        V_data_V_data_1_write = grp_getVoltages_fu_86_V_data_V_data_1_write;
    end else begin
        V_data_V_data_1_write = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        V_data_V_data_2_write = grp_getVoltages_fu_86_V_data_V_data_2_write;
    end else begin
        V_data_V_data_2_write = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        V_data_V_data_3_write = grp_getVoltages_fu_86_V_data_V_data_3_write;
    end else begin
        V_data_V_data_3_write = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state4) & (grp_getConductances_fu_70_ap_done == 1'b1))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = ap_done_reg;
    end
end

always @ (*) begin
    if (((real_start == 1'b0) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        input_V_data_TREADY = grp_getVoltages_fu_86_input_V_data_TREADY;
    end else if ((1'b1 == ap_CS_fsm_state4)) begin
        input_V_data_TREADY = grp_getConductances_fu_70_input_V_data_TREADY;
    end else begin
        input_V_data_TREADY = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state4) & (grp_getConductances_fu_70_ap_done == 1'b1))) begin
        internal_ap_ready = 1'b1;
    end else begin
        internal_ap_ready = 1'b0;
    end
end

always @ (*) begin
    if (((start_once_reg == 1'b0) & (start_full_n == 1'b0))) begin
        real_start = 1'b0;
    end else begin
        real_start = ap_start;
    end
end

always @ (*) begin
    if ((~((real_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        simConfig_BLOCK_NUMBERS_V_blk_n = simConfig_BLOCK_NUMBERS_V_empty_n;
    end else begin
        simConfig_BLOCK_NUMBERS_V_blk_n = 1'b1;
    end
end

always @ (*) begin
    if ((~((1'b0 == V_SIZE_empty_n) | (simConfig_BLOCK_NUMBERS_V_empty_n == 1'b0) | (simConfig_rowsToSimulate_V_empty_n == 1'b0) | (real_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        simConfig_BLOCK_NUMBERS_V_read = 1'b1;
    end else begin
        simConfig_BLOCK_NUMBERS_V_read = 1'b0;
    end
end

always @ (*) begin
    if ((~((real_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        simConfig_rowsToSimulate_V_blk_n = simConfig_rowsToSimulate_V_empty_n;
    end else begin
        simConfig_rowsToSimulate_V_blk_n = 1'b1;
    end
end

always @ (*) begin
    if ((~((1'b0 == V_SIZE_empty_n) | (simConfig_BLOCK_NUMBERS_V_empty_n == 1'b0) | (simConfig_rowsToSimulate_V_empty_n == 1'b0) | (real_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        simConfig_rowsToSimulate_V_read = 1'b1;
    end else begin
        simConfig_rowsToSimulate_V_read = 1'b0;
    end
end

always @ (*) begin
    if (((start_once_reg == 1'b0) & (real_start == 1'b1))) begin
        start_write = 1'b1;
    end else begin
        start_write = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if ((~((1'b0 == V_SIZE_empty_n) | (simConfig_BLOCK_NUMBERS_V_empty_n == 1'b0) | (simConfig_rowsToSimulate_V_empty_n == 1'b0) | (real_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_state2 : begin
            if (((1'b1 == ap_CS_fsm_state2) & (grp_getVoltages_fu_86_ap_done == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_state3;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end
        end
        ap_ST_fsm_state3 : begin
            ap_NS_fsm = ap_ST_fsm_state4;
        end
        ap_ST_fsm_state4 : begin
            if (((1'b1 == ap_CS_fsm_state4) & (grp_getConductances_fu_70_ap_done == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state4;
            end
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign C_data_V_data_0_din = grp_getConductances_fu_70_C_data_V_data_0_din;

assign C_data_V_data_1_din = grp_getConductances_fu_70_C_data_V_data_1_din;

assign C_data_V_data_2_din = grp_getConductances_fu_70_C_data_V_data_2_din;

assign C_data_V_data_3_din = grp_getConductances_fu_70_C_data_V_data_3_din;

assign V_data_V_data_0_din = grp_getVoltages_fu_86_V_data_V_data_0_din;

assign V_data_V_data_1_din = grp_getVoltages_fu_86_V_data_V_data_1_din;

assign V_data_V_data_2_din = grp_getVoltages_fu_86_V_data_V_data_2_din;

assign V_data_V_data_3_din = grp_getVoltages_fu_86_V_data_V_data_3_din;

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state2 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_state3 = ap_CS_fsm[32'd2];

assign ap_CS_fsm_state4 = ap_CS_fsm[32'd3];

always @ (*) begin
    ap_block_state1 = ((1'b0 == V_SIZE_empty_n) | (simConfig_BLOCK_NUMBERS_V_empty_n == 1'b0) | (simConfig_rowsToSimulate_V_empty_n == 1'b0) | (real_start == 1'b0) | (ap_done_reg == 1'b1));
end

always @ (*) begin
    ap_block_state1_ignore_call22 = ((1'b0 == V_SIZE_empty_n) | (simConfig_BLOCK_NUMBERS_V_empty_n == 1'b0) | (simConfig_rowsToSimulate_V_empty_n == 1'b0) | (real_start == 1'b0) | (ap_done_reg == 1'b1));
end

assign ap_ready = internal_ap_ready;

assign grp_getConductances_fu_70_ap_start = grp_getConductances_fu_70_ap_start_reg;

assign grp_getVoltages_fu_86_ap_start = grp_getVoltages_fu_86_ap_start_reg;

assign start_out = real_start;

endmodule //blockControl
