-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
-- Version: 2018.3
-- Copyright (C) 1986-2018 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity indexGeneration is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_continue : IN STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    simConfig_rowBegin_V_dout : IN STD_LOGIC_VECTOR (26 downto 0);
    simConfig_rowBegin_V_empty_n : IN STD_LOGIC;
    simConfig_rowBegin_V_read : OUT STD_LOGIC;
    simConfig_rowEnd_V_dout : IN STD_LOGIC_VECTOR (26 downto 0);
    simConfig_rowEnd_V_empty_n : IN STD_LOGIC;
    simConfig_rowEnd_V_read : OUT STD_LOGIC;
    simConfig_BLOCK_NUMBERS_V_dout : IN STD_LOGIC_VECTOR (26 downto 0);
    simConfig_BLOCK_NUMBERS_V_empty_n : IN STD_LOGIC;
    simConfig_BLOCK_NUMBERS_V_read : OUT STD_LOGIC;
    Vi_idx_V_data_V_0_din : OUT STD_LOGIC_VECTOR (26 downto 0);
    Vi_idx_V_data_V_0_full_n : IN STD_LOGIC;
    Vi_idx_V_data_V_0_write : OUT STD_LOGIC;
    Vi_idx_V_data_V_1_din : OUT STD_LOGIC_VECTOR (26 downto 0);
    Vi_idx_V_data_V_1_full_n : IN STD_LOGIC;
    Vi_idx_V_data_V_1_write : OUT STD_LOGIC;
    Vi_idx_V_data_V_2_din : OUT STD_LOGIC_VECTOR (26 downto 0);
    Vi_idx_V_data_V_2_full_n : IN STD_LOGIC;
    Vi_idx_V_data_V_2_write : OUT STD_LOGIC;
    Vi_idx_V_data_V_3_din : OUT STD_LOGIC_VECTOR (26 downto 0);
    Vi_idx_V_data_V_3_full_n : IN STD_LOGIC;
    Vi_idx_V_data_V_3_write : OUT STD_LOGIC;
    Vj_idx_V_data_V_0_din : OUT STD_LOGIC_VECTOR (26 downto 0);
    Vj_idx_V_data_V_0_full_n : IN STD_LOGIC;
    Vj_idx_V_data_V_0_write : OUT STD_LOGIC;
    Vj_idx_V_data_V_1_din : OUT STD_LOGIC_VECTOR (26 downto 0);
    Vj_idx_V_data_V_1_full_n : IN STD_LOGIC;
    Vj_idx_V_data_V_1_write : OUT STD_LOGIC;
    Vj_idx_V_data_V_2_din : OUT STD_LOGIC_VECTOR (26 downto 0);
    Vj_idx_V_data_V_2_full_n : IN STD_LOGIC;
    Vj_idx_V_data_V_2_write : OUT STD_LOGIC;
    Vj_idx_V_data_V_3_din : OUT STD_LOGIC_VECTOR (26 downto 0);
    Vj_idx_V_data_V_3_full_n : IN STD_LOGIC;
    Vj_idx_V_data_V_3_write : OUT STD_LOGIC );
end;


architecture behav of indexGeneration is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (2 downto 0) := "001";
    constant ap_ST_fsm_state2 : STD_LOGIC_VECTOR (2 downto 0) := "010";
    constant ap_ST_fsm_state3 : STD_LOGIC_VECTOR (2 downto 0) := "100";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv12_0 : STD_LOGIC_VECTOR (11 downto 0) := "000000000000";
    constant ap_const_lv27_1 : STD_LOGIC_VECTOR (26 downto 0) := "000000000000000000000000001";
    constant ap_const_lv27_2 : STD_LOGIC_VECTOR (26 downto 0) := "000000000000000000000000010";
    constant ap_const_lv27_3 : STD_LOGIC_VECTOR (26 downto 0) := "000000000000000000000000011";
    constant ap_const_lv12_1 : STD_LOGIC_VECTOR (11 downto 0) := "000000000001";
    constant ap_const_lv2_0 : STD_LOGIC_VECTOR (1 downto 0) := "00";
    constant ap_const_lv14_1 : STD_LOGIC_VECTOR (13 downto 0) := "00000000000001";
    constant ap_const_lv14_2 : STD_LOGIC_VECTOR (13 downto 0) := "00000000000010";
    constant ap_const_lv14_3 : STD_LOGIC_VECTOR (13 downto 0) := "00000000000011";
    constant ap_const_lv27_4 : STD_LOGIC_VECTOR (26 downto 0) := "000000000000000000000000100";
    constant ap_const_boolean_1 : BOOLEAN := true;

    signal ap_done_reg : STD_LOGIC := '0';
    signal ap_CS_fsm : STD_LOGIC_VECTOR (2 downto 0) := "001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal simConfig_rowBegin_V_blk_n : STD_LOGIC;
    signal simConfig_rowEnd_V_blk_n : STD_LOGIC;
    signal simConfig_BLOCK_NUMBERS_V_blk_n : STD_LOGIC;
    signal Vi_idx_V_data_V_0_blk_n : STD_LOGIC;
    signal ap_CS_fsm_state2 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state2 : signal is "none";
    signal tmp_12_i_i_fu_164_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal Vi_idx_V_data_V_1_blk_n : STD_LOGIC;
    signal Vi_idx_V_data_V_2_blk_n : STD_LOGIC;
    signal Vi_idx_V_data_V_3_blk_n : STD_LOGIC;
    signal Vj_idx_V_data_V_0_blk_n : STD_LOGIC;
    signal ap_CS_fsm_state3 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state3 : signal is "none";
    signal tmp_18_i_i_fu_194_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal Vj_idx_V_data_V_1_blk_n : STD_LOGIC;
    signal Vj_idx_V_data_V_2_blk_n : STD_LOGIC;
    signal Vj_idx_V_data_V_3_blk_n : STD_LOGIC;
    signal simConfig_BLOCK_NUMB_reg_257 : STD_LOGIC_VECTOR (26 downto 0);
    signal ap_block_state1 : BOOLEAN;
    signal tmp_cast_i_i_fu_156_p1 : STD_LOGIC_VECTOR (27 downto 0);
    signal tmp_cast_i_i_reg_267 : STD_LOGIC_VECTOR (27 downto 0);
    signal block_V_fu_199_p2 : STD_LOGIC_VECTOR (11 downto 0);
    signal Vj_idx_V_data_V_01_status : STD_LOGIC;
    signal ap_block_state3 : BOOLEAN;
    signal rowOffset_V_1_fu_251_p2 : STD_LOGIC_VECTOR (26 downto 0);
    signal tmp_data_0_V_reg_134 : STD_LOGIC_VECTOR (26 downto 0);
    signal t_V_reg_145 : STD_LOGIC_VECTOR (11 downto 0);
    signal Vi_idx_V_data_V_01_status : STD_LOGIC;
    signal ap_block_state2 : BOOLEAN;
    signal Vi_idx_V_data_V_01_update : STD_LOGIC;
    signal Vj_idx_V_data_V_01_update : STD_LOGIC;
    signal tmp_cast_i_i_19_fu_160_p1 : STD_LOGIC_VECTOR (27 downto 0);
    signal t_V_cast_i_i_fu_190_p1 : STD_LOGIC_VECTOR (26 downto 0);
    signal column_V_fu_205_p3 : STD_LOGIC_VECTOR (13 downto 0);
    signal tmp_data_1_V_2_fu_218_p2 : STD_LOGIC_VECTOR (13 downto 0);
    signal tmp_data_2_V_2_fu_229_p2 : STD_LOGIC_VECTOR (13 downto 0);
    signal tmp_data_3_V_2_fu_240_p2 : STD_LOGIC_VECTOR (13 downto 0);
    signal ap_NS_fsm : STD_LOGIC_VECTOR (2 downto 0);


begin




    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    ap_done_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_done_reg <= ap_const_logic_0;
            else
                if ((ap_continue = ap_const_logic_1)) then 
                    ap_done_reg <= ap_const_logic_0;
                elsif ((not(((tmp_12_i_i_fu_164_p2 = ap_const_lv1_1) and (ap_const_logic_0 = Vi_idx_V_data_V_01_status))) and (tmp_12_i_i_fu_164_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
                    ap_done_reg <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    t_V_reg_145_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((not(((tmp_12_i_i_fu_164_p2 = ap_const_lv1_1) and (ap_const_logic_0 = Vi_idx_V_data_V_01_status))) and (tmp_12_i_i_fu_164_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
                t_V_reg_145 <= ap_const_lv12_0;
            elsif ((not(((tmp_18_i_i_fu_194_p2 = ap_const_lv1_1) and (ap_const_logic_0 = Vj_idx_V_data_V_01_status))) and (tmp_18_i_i_fu_194_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state3))) then 
                t_V_reg_145 <= block_V_fu_199_p2;
            end if; 
        end if;
    end process;

    tmp_data_0_V_reg_134_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((not(((tmp_18_i_i_fu_194_p2 = ap_const_lv1_1) and (ap_const_logic_0 = Vj_idx_V_data_V_01_status))) and (tmp_18_i_i_fu_194_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state3))) then 
                tmp_data_0_V_reg_134 <= rowOffset_V_1_fu_251_p2;
            elsif ((not(((ap_start = ap_const_logic_0) or (simConfig_BLOCK_NUMBERS_V_empty_n = ap_const_logic_0) or (simConfig_rowEnd_V_empty_n = ap_const_logic_0) or (simConfig_rowBegin_V_empty_n = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                tmp_data_0_V_reg_134 <= simConfig_rowBegin_V_dout;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((not(((ap_start = ap_const_logic_0) or (simConfig_BLOCK_NUMBERS_V_empty_n = ap_const_logic_0) or (simConfig_rowEnd_V_empty_n = ap_const_logic_0) or (simConfig_rowBegin_V_empty_n = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then
                simConfig_BLOCK_NUMB_reg_257 <= simConfig_BLOCK_NUMBERS_V_dout;
                tmp_cast_i_i_reg_267 <= tmp_cast_i_i_fu_156_p1;
            end if;
        end if;
    end process;

    ap_NS_fsm_assign_proc : process (ap_start, ap_done_reg, ap_CS_fsm, ap_CS_fsm_state1, simConfig_rowBegin_V_empty_n, simConfig_rowEnd_V_empty_n, simConfig_BLOCK_NUMBERS_V_empty_n, ap_CS_fsm_state2, tmp_12_i_i_fu_164_p2, ap_CS_fsm_state3, tmp_18_i_i_fu_194_p2, Vj_idx_V_data_V_01_status, Vi_idx_V_data_V_01_status)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if ((not(((ap_start = ap_const_logic_0) or (simConfig_BLOCK_NUMBERS_V_empty_n = ap_const_logic_0) or (simConfig_rowEnd_V_empty_n = ap_const_logic_0) or (simConfig_rowBegin_V_empty_n = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_state2 => 
                if ((not(((tmp_12_i_i_fu_164_p2 = ap_const_lv1_1) and (ap_const_logic_0 = Vi_idx_V_data_V_01_status))) and (tmp_12_i_i_fu_164_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state2))) then
                    ap_NS_fsm <= ap_ST_fsm_state1;
                elsif ((not(((tmp_12_i_i_fu_164_p2 = ap_const_lv1_1) and (ap_const_logic_0 = Vi_idx_V_data_V_01_status))) and (tmp_12_i_i_fu_164_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state2))) then
                    ap_NS_fsm <= ap_ST_fsm_state3;
                else
                    ap_NS_fsm <= ap_ST_fsm_state2;
                end if;
            when ap_ST_fsm_state3 => 
                if ((not(((tmp_18_i_i_fu_194_p2 = ap_const_lv1_1) and (ap_const_logic_0 = Vj_idx_V_data_V_01_status))) and (tmp_18_i_i_fu_194_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state3))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                elsif ((not(((tmp_18_i_i_fu_194_p2 = ap_const_lv1_1) and (ap_const_logic_0 = Vj_idx_V_data_V_01_status))) and (tmp_18_i_i_fu_194_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state3))) then
                    ap_NS_fsm <= ap_ST_fsm_state3;
                else
                    ap_NS_fsm <= ap_ST_fsm_state3;
                end if;
            when others =>  
                ap_NS_fsm <= "XXX";
        end case;
    end process;
    Vi_idx_V_data_V_01_status <= (Vi_idx_V_data_V_3_full_n and Vi_idx_V_data_V_2_full_n and Vi_idx_V_data_V_1_full_n and Vi_idx_V_data_V_0_full_n);

    Vi_idx_V_data_V_01_update_assign_proc : process(ap_CS_fsm_state2, tmp_12_i_i_fu_164_p2, Vi_idx_V_data_V_01_status)
    begin
        if ((not(((tmp_12_i_i_fu_164_p2 = ap_const_lv1_1) and (ap_const_logic_0 = Vi_idx_V_data_V_01_status))) and (tmp_12_i_i_fu_164_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
            Vi_idx_V_data_V_01_update <= ap_const_logic_1;
        else 
            Vi_idx_V_data_V_01_update <= ap_const_logic_0;
        end if; 
    end process;


    Vi_idx_V_data_V_0_blk_n_assign_proc : process(Vi_idx_V_data_V_0_full_n, ap_CS_fsm_state2, tmp_12_i_i_fu_164_p2)
    begin
        if (((tmp_12_i_i_fu_164_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
            Vi_idx_V_data_V_0_blk_n <= Vi_idx_V_data_V_0_full_n;
        else 
            Vi_idx_V_data_V_0_blk_n <= ap_const_logic_1;
        end if; 
    end process;

    Vi_idx_V_data_V_0_din <= tmp_data_0_V_reg_134;
    Vi_idx_V_data_V_0_write <= Vi_idx_V_data_V_01_update;

    Vi_idx_V_data_V_1_blk_n_assign_proc : process(Vi_idx_V_data_V_1_full_n, ap_CS_fsm_state2, tmp_12_i_i_fu_164_p2)
    begin
        if (((tmp_12_i_i_fu_164_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
            Vi_idx_V_data_V_1_blk_n <= Vi_idx_V_data_V_1_full_n;
        else 
            Vi_idx_V_data_V_1_blk_n <= ap_const_logic_1;
        end if; 
    end process;

    Vi_idx_V_data_V_1_din <= std_logic_vector(unsigned(tmp_data_0_V_reg_134) + unsigned(ap_const_lv27_1));
    Vi_idx_V_data_V_1_write <= Vi_idx_V_data_V_01_update;

    Vi_idx_V_data_V_2_blk_n_assign_proc : process(Vi_idx_V_data_V_2_full_n, ap_CS_fsm_state2, tmp_12_i_i_fu_164_p2)
    begin
        if (((tmp_12_i_i_fu_164_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
            Vi_idx_V_data_V_2_blk_n <= Vi_idx_V_data_V_2_full_n;
        else 
            Vi_idx_V_data_V_2_blk_n <= ap_const_logic_1;
        end if; 
    end process;

    Vi_idx_V_data_V_2_din <= std_logic_vector(unsigned(tmp_data_0_V_reg_134) + unsigned(ap_const_lv27_2));
    Vi_idx_V_data_V_2_write <= Vi_idx_V_data_V_01_update;

    Vi_idx_V_data_V_3_blk_n_assign_proc : process(Vi_idx_V_data_V_3_full_n, ap_CS_fsm_state2, tmp_12_i_i_fu_164_p2)
    begin
        if (((tmp_12_i_i_fu_164_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
            Vi_idx_V_data_V_3_blk_n <= Vi_idx_V_data_V_3_full_n;
        else 
            Vi_idx_V_data_V_3_blk_n <= ap_const_logic_1;
        end if; 
    end process;

    Vi_idx_V_data_V_3_din <= std_logic_vector(unsigned(tmp_data_0_V_reg_134) + unsigned(ap_const_lv27_3));
    Vi_idx_V_data_V_3_write <= Vi_idx_V_data_V_01_update;
    Vj_idx_V_data_V_01_status <= (Vj_idx_V_data_V_3_full_n and Vj_idx_V_data_V_2_full_n and Vj_idx_V_data_V_1_full_n and Vj_idx_V_data_V_0_full_n);

    Vj_idx_V_data_V_01_update_assign_proc : process(ap_CS_fsm_state3, tmp_18_i_i_fu_194_p2, Vj_idx_V_data_V_01_status)
    begin
        if ((not(((tmp_18_i_i_fu_194_p2 = ap_const_lv1_1) and (ap_const_logic_0 = Vj_idx_V_data_V_01_status))) and (tmp_18_i_i_fu_194_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state3))) then 
            Vj_idx_V_data_V_01_update <= ap_const_logic_1;
        else 
            Vj_idx_V_data_V_01_update <= ap_const_logic_0;
        end if; 
    end process;


    Vj_idx_V_data_V_0_blk_n_assign_proc : process(Vj_idx_V_data_V_0_full_n, ap_CS_fsm_state3, tmp_18_i_i_fu_194_p2)
    begin
        if (((tmp_18_i_i_fu_194_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state3))) then 
            Vj_idx_V_data_V_0_blk_n <= Vj_idx_V_data_V_0_full_n;
        else 
            Vj_idx_V_data_V_0_blk_n <= ap_const_logic_1;
        end if; 
    end process;

    Vj_idx_V_data_V_0_din <= std_logic_vector(IEEE.numeric_std.resize(unsigned(column_V_fu_205_p3),27));
    Vj_idx_V_data_V_0_write <= Vj_idx_V_data_V_01_update;

    Vj_idx_V_data_V_1_blk_n_assign_proc : process(Vj_idx_V_data_V_1_full_n, ap_CS_fsm_state3, tmp_18_i_i_fu_194_p2)
    begin
        if (((tmp_18_i_i_fu_194_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state3))) then 
            Vj_idx_V_data_V_1_blk_n <= Vj_idx_V_data_V_1_full_n;
        else 
            Vj_idx_V_data_V_1_blk_n <= ap_const_logic_1;
        end if; 
    end process;

    Vj_idx_V_data_V_1_din <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_data_1_V_2_fu_218_p2),27));
    Vj_idx_V_data_V_1_write <= Vj_idx_V_data_V_01_update;

    Vj_idx_V_data_V_2_blk_n_assign_proc : process(Vj_idx_V_data_V_2_full_n, ap_CS_fsm_state3, tmp_18_i_i_fu_194_p2)
    begin
        if (((tmp_18_i_i_fu_194_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state3))) then 
            Vj_idx_V_data_V_2_blk_n <= Vj_idx_V_data_V_2_full_n;
        else 
            Vj_idx_V_data_V_2_blk_n <= ap_const_logic_1;
        end if; 
    end process;

    Vj_idx_V_data_V_2_din <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_data_2_V_2_fu_229_p2),27));
    Vj_idx_V_data_V_2_write <= Vj_idx_V_data_V_01_update;

    Vj_idx_V_data_V_3_blk_n_assign_proc : process(Vj_idx_V_data_V_3_full_n, ap_CS_fsm_state3, tmp_18_i_i_fu_194_p2)
    begin
        if (((tmp_18_i_i_fu_194_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state3))) then 
            Vj_idx_V_data_V_3_blk_n <= Vj_idx_V_data_V_3_full_n;
        else 
            Vj_idx_V_data_V_3_blk_n <= ap_const_logic_1;
        end if; 
    end process;

    Vj_idx_V_data_V_3_din <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_data_3_V_2_fu_240_p2),27));
    Vj_idx_V_data_V_3_write <= Vj_idx_V_data_V_01_update;
    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state2 <= ap_CS_fsm(1);
    ap_CS_fsm_state3 <= ap_CS_fsm(2);

    ap_block_state1_assign_proc : process(ap_start, ap_done_reg, simConfig_rowBegin_V_empty_n, simConfig_rowEnd_V_empty_n, simConfig_BLOCK_NUMBERS_V_empty_n)
    begin
                ap_block_state1 <= ((ap_start = ap_const_logic_0) or (simConfig_BLOCK_NUMBERS_V_empty_n = ap_const_logic_0) or (simConfig_rowEnd_V_empty_n = ap_const_logic_0) or (simConfig_rowBegin_V_empty_n = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1));
    end process;


    ap_block_state2_assign_proc : process(tmp_12_i_i_fu_164_p2, Vi_idx_V_data_V_01_status)
    begin
                ap_block_state2 <= ((tmp_12_i_i_fu_164_p2 = ap_const_lv1_1) and (ap_const_logic_0 = Vi_idx_V_data_V_01_status));
    end process;


    ap_block_state3_assign_proc : process(tmp_18_i_i_fu_194_p2, Vj_idx_V_data_V_01_status)
    begin
                ap_block_state3 <= ((tmp_18_i_i_fu_194_p2 = ap_const_lv1_1) and (ap_const_logic_0 = Vj_idx_V_data_V_01_status));
    end process;


    ap_done_assign_proc : process(ap_done_reg, ap_CS_fsm_state2, tmp_12_i_i_fu_164_p2, Vi_idx_V_data_V_01_status)
    begin
        if ((not(((tmp_12_i_i_fu_164_p2 = ap_const_lv1_1) and (ap_const_logic_0 = Vi_idx_V_data_V_01_status))) and (tmp_12_i_i_fu_164_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_done_reg;
        end if; 
    end process;


    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_ready_assign_proc : process(ap_CS_fsm_state2, tmp_12_i_i_fu_164_p2, Vi_idx_V_data_V_01_status)
    begin
        if ((not(((tmp_12_i_i_fu_164_p2 = ap_const_lv1_1) and (ap_const_logic_0 = Vi_idx_V_data_V_01_status))) and (tmp_12_i_i_fu_164_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;

    block_V_fu_199_p2 <= std_logic_vector(unsigned(t_V_reg_145) + unsigned(ap_const_lv12_1));
    column_V_fu_205_p3 <= (t_V_reg_145 & ap_const_lv2_0);
    rowOffset_V_1_fu_251_p2 <= std_logic_vector(unsigned(tmp_data_0_V_reg_134) + unsigned(ap_const_lv27_4));

    simConfig_BLOCK_NUMBERS_V_blk_n_assign_proc : process(ap_start, ap_done_reg, ap_CS_fsm_state1, simConfig_BLOCK_NUMBERS_V_empty_n)
    begin
        if ((not(((ap_start = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            simConfig_BLOCK_NUMBERS_V_blk_n <= simConfig_BLOCK_NUMBERS_V_empty_n;
        else 
            simConfig_BLOCK_NUMBERS_V_blk_n <= ap_const_logic_1;
        end if; 
    end process;


    simConfig_BLOCK_NUMBERS_V_read_assign_proc : process(ap_start, ap_done_reg, ap_CS_fsm_state1, simConfig_rowBegin_V_empty_n, simConfig_rowEnd_V_empty_n, simConfig_BLOCK_NUMBERS_V_empty_n)
    begin
        if ((not(((ap_start = ap_const_logic_0) or (simConfig_BLOCK_NUMBERS_V_empty_n = ap_const_logic_0) or (simConfig_rowEnd_V_empty_n = ap_const_logic_0) or (simConfig_rowBegin_V_empty_n = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            simConfig_BLOCK_NUMBERS_V_read <= ap_const_logic_1;
        else 
            simConfig_BLOCK_NUMBERS_V_read <= ap_const_logic_0;
        end if; 
    end process;


    simConfig_rowBegin_V_blk_n_assign_proc : process(ap_start, ap_done_reg, ap_CS_fsm_state1, simConfig_rowBegin_V_empty_n)
    begin
        if ((not(((ap_start = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            simConfig_rowBegin_V_blk_n <= simConfig_rowBegin_V_empty_n;
        else 
            simConfig_rowBegin_V_blk_n <= ap_const_logic_1;
        end if; 
    end process;


    simConfig_rowBegin_V_read_assign_proc : process(ap_start, ap_done_reg, ap_CS_fsm_state1, simConfig_rowBegin_V_empty_n, simConfig_rowEnd_V_empty_n, simConfig_BLOCK_NUMBERS_V_empty_n)
    begin
        if ((not(((ap_start = ap_const_logic_0) or (simConfig_BLOCK_NUMBERS_V_empty_n = ap_const_logic_0) or (simConfig_rowEnd_V_empty_n = ap_const_logic_0) or (simConfig_rowBegin_V_empty_n = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            simConfig_rowBegin_V_read <= ap_const_logic_1;
        else 
            simConfig_rowBegin_V_read <= ap_const_logic_0;
        end if; 
    end process;


    simConfig_rowEnd_V_blk_n_assign_proc : process(ap_start, ap_done_reg, ap_CS_fsm_state1, simConfig_rowEnd_V_empty_n)
    begin
        if ((not(((ap_start = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            simConfig_rowEnd_V_blk_n <= simConfig_rowEnd_V_empty_n;
        else 
            simConfig_rowEnd_V_blk_n <= ap_const_logic_1;
        end if; 
    end process;


    simConfig_rowEnd_V_read_assign_proc : process(ap_start, ap_done_reg, ap_CS_fsm_state1, simConfig_rowBegin_V_empty_n, simConfig_rowEnd_V_empty_n, simConfig_BLOCK_NUMBERS_V_empty_n)
    begin
        if ((not(((ap_start = ap_const_logic_0) or (simConfig_BLOCK_NUMBERS_V_empty_n = ap_const_logic_0) or (simConfig_rowEnd_V_empty_n = ap_const_logic_0) or (simConfig_rowBegin_V_empty_n = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            simConfig_rowEnd_V_read <= ap_const_logic_1;
        else 
            simConfig_rowEnd_V_read <= ap_const_logic_0;
        end if; 
    end process;

    t_V_cast_i_i_fu_190_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(t_V_reg_145),27));
    tmp_12_i_i_fu_164_p2 <= "1" when (signed(tmp_cast_i_i_19_fu_160_p1) < signed(tmp_cast_i_i_reg_267)) else "0";
    tmp_18_i_i_fu_194_p2 <= "1" when (signed(t_V_cast_i_i_fu_190_p1) < signed(simConfig_BLOCK_NUMB_reg_257)) else "0";
    tmp_cast_i_i_19_fu_160_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_data_0_V_reg_134),28));
        tmp_cast_i_i_fu_156_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(simConfig_rowEnd_V_dout),28));

    tmp_data_1_V_2_fu_218_p2 <= (column_V_fu_205_p3 or ap_const_lv14_1);
    tmp_data_2_V_2_fu_229_p2 <= (column_V_fu_205_p3 or ap_const_lv14_2);
    tmp_data_3_V_2_fu_240_p2 <= (column_V_fu_205_p3 or ap_const_lv14_3);
end behav;
