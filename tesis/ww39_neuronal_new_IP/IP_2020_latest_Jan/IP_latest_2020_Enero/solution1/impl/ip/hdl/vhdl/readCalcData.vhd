-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
-- Version: 2018.3
-- Copyright (C) 1986-2018 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity readCalcData is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    F_V_data_0_dout : IN STD_LOGIC_VECTOR (31 downto 0);
    F_V_data_0_empty_n : IN STD_LOGIC;
    F_V_data_0_read : OUT STD_LOGIC;
    F_V_data_1_dout : IN STD_LOGIC_VECTOR (31 downto 0);
    F_V_data_1_empty_n : IN STD_LOGIC;
    F_V_data_1_read : OUT STD_LOGIC;
    F_V_data_2_dout : IN STD_LOGIC_VECTOR (31 downto 0);
    F_V_data_2_empty_n : IN STD_LOGIC;
    F_V_data_2_read : OUT STD_LOGIC;
    F_V_data_3_dout : IN STD_LOGIC_VECTOR (31 downto 0);
    F_V_data_3_empty_n : IN STD_LOGIC;
    F_V_data_3_read : OUT STD_LOGIC;
    V_V_data_0_dout : IN STD_LOGIC_VECTOR (31 downto 0);
    V_V_data_0_empty_n : IN STD_LOGIC;
    V_V_data_0_read : OUT STD_LOGIC;
    V_V_data_1_dout : IN STD_LOGIC_VECTOR (31 downto 0);
    V_V_data_1_empty_n : IN STD_LOGIC;
    V_V_data_1_read : OUT STD_LOGIC;
    V_V_data_2_dout : IN STD_LOGIC_VECTOR (31 downto 0);
    V_V_data_2_empty_n : IN STD_LOGIC;
    V_V_data_2_read : OUT STD_LOGIC;
    V_V_data_3_dout : IN STD_LOGIC_VECTOR (31 downto 0);
    V_V_data_3_empty_n : IN STD_LOGIC;
    V_V_data_3_read : OUT STD_LOGIC;
    ap_return_0 : OUT STD_LOGIC_VECTOR (31 downto 0);
    ap_return_1 : OUT STD_LOGIC_VECTOR (31 downto 0);
    ap_return_2 : OUT STD_LOGIC_VECTOR (31 downto 0);
    ap_return_3 : OUT STD_LOGIC_VECTOR (31 downto 0);
    ap_return_4 : OUT STD_LOGIC_VECTOR (31 downto 0);
    ap_return_5 : OUT STD_LOGIC_VECTOR (31 downto 0);
    ap_return_6 : OUT STD_LOGIC_VECTOR (31 downto 0);
    ap_return_7 : OUT STD_LOGIC_VECTOR (31 downto 0);
    F_V_data_0_blk_n : OUT STD_LOGIC;
    F_V_data_1_blk_n : OUT STD_LOGIC;
    F_V_data_2_blk_n : OUT STD_LOGIC;
    F_V_data_3_blk_n : OUT STD_LOGIC;
    V_V_data_0_blk_n : OUT STD_LOGIC;
    V_V_data_1_blk_n : OUT STD_LOGIC;
    V_V_data_2_blk_n : OUT STD_LOGIC;
    V_V_data_3_blk_n : OUT STD_LOGIC;
    ap_ce : IN STD_LOGIC );
end;


architecture behav of readCalcData is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_boolean_1 : BOOLEAN := true;

    signal ap_CS_fsm : STD_LOGIC_VECTOR (0 downto 0) := "1";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal F_V_data_00_update : STD_LOGIC;
    signal F_V_data_00_status : STD_LOGIC;
    signal V_V_data_00_status : STD_LOGIC;
    signal ap_block_state1 : BOOLEAN;
    signal V_V_data_00_update : STD_LOGIC;
    signal ap_NS_fsm : STD_LOGIC_VECTOR (0 downto 0);


begin




    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    ap_NS_fsm_assign_proc : process (ap_start, ap_CS_fsm, ap_CS_fsm_state1, F_V_data_00_status, V_V_data_00_status, ap_ce)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                ap_NS_fsm <= ap_ST_fsm_state1;
            when others =>  
                ap_NS_fsm <= "X";
        end case;
    end process;
    F_V_data_00_status <= (F_V_data_3_empty_n and F_V_data_2_empty_n and F_V_data_1_empty_n and F_V_data_0_empty_n);

    F_V_data_00_update_assign_proc : process(ap_start, ap_CS_fsm_state1, F_V_data_00_status, V_V_data_00_status, ap_ce)
    begin
        if ((not(((ap_const_logic_0 = V_V_data_00_status) or (ap_const_logic_0 = F_V_data_00_status) or (ap_start = ap_const_logic_0))) and (ap_const_logic_1 = ap_ce) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            F_V_data_00_update <= ap_const_logic_1;
        else 
            F_V_data_00_update <= ap_const_logic_0;
        end if; 
    end process;


    F_V_data_0_blk_n_assign_proc : process(ap_start, ap_CS_fsm_state1, F_V_data_0_empty_n)
    begin
        if (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            F_V_data_0_blk_n <= F_V_data_0_empty_n;
        else 
            F_V_data_0_blk_n <= ap_const_logic_1;
        end if; 
    end process;

    F_V_data_0_read <= F_V_data_00_update;

    F_V_data_1_blk_n_assign_proc : process(ap_start, ap_CS_fsm_state1, F_V_data_1_empty_n)
    begin
        if (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            F_V_data_1_blk_n <= F_V_data_1_empty_n;
        else 
            F_V_data_1_blk_n <= ap_const_logic_1;
        end if; 
    end process;

    F_V_data_1_read <= F_V_data_00_update;

    F_V_data_2_blk_n_assign_proc : process(ap_start, ap_CS_fsm_state1, F_V_data_2_empty_n)
    begin
        if (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            F_V_data_2_blk_n <= F_V_data_2_empty_n;
        else 
            F_V_data_2_blk_n <= ap_const_logic_1;
        end if; 
    end process;

    F_V_data_2_read <= F_V_data_00_update;

    F_V_data_3_blk_n_assign_proc : process(ap_start, ap_CS_fsm_state1, F_V_data_3_empty_n)
    begin
        if (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            F_V_data_3_blk_n <= F_V_data_3_empty_n;
        else 
            F_V_data_3_blk_n <= ap_const_logic_1;
        end if; 
    end process;

    F_V_data_3_read <= F_V_data_00_update;
    V_V_data_00_status <= (V_V_data_3_empty_n and V_V_data_2_empty_n and V_V_data_1_empty_n and V_V_data_0_empty_n);

    V_V_data_00_update_assign_proc : process(ap_start, ap_CS_fsm_state1, F_V_data_00_status, V_V_data_00_status, ap_ce)
    begin
        if ((not(((ap_const_logic_0 = V_V_data_00_status) or (ap_const_logic_0 = F_V_data_00_status) or (ap_start = ap_const_logic_0))) and (ap_const_logic_1 = ap_ce) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            V_V_data_00_update <= ap_const_logic_1;
        else 
            V_V_data_00_update <= ap_const_logic_0;
        end if; 
    end process;


    V_V_data_0_blk_n_assign_proc : process(ap_start, ap_CS_fsm_state1, V_V_data_0_empty_n)
    begin
        if (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            V_V_data_0_blk_n <= V_V_data_0_empty_n;
        else 
            V_V_data_0_blk_n <= ap_const_logic_1;
        end if; 
    end process;

    V_V_data_0_read <= V_V_data_00_update;

    V_V_data_1_blk_n_assign_proc : process(ap_start, ap_CS_fsm_state1, V_V_data_1_empty_n)
    begin
        if (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            V_V_data_1_blk_n <= V_V_data_1_empty_n;
        else 
            V_V_data_1_blk_n <= ap_const_logic_1;
        end if; 
    end process;

    V_V_data_1_read <= V_V_data_00_update;

    V_V_data_2_blk_n_assign_proc : process(ap_start, ap_CS_fsm_state1, V_V_data_2_empty_n)
    begin
        if (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            V_V_data_2_blk_n <= V_V_data_2_empty_n;
        else 
            V_V_data_2_blk_n <= ap_const_logic_1;
        end if; 
    end process;

    V_V_data_2_read <= V_V_data_00_update;

    V_V_data_3_blk_n_assign_proc : process(ap_start, ap_CS_fsm_state1, V_V_data_3_empty_n)
    begin
        if (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            V_V_data_3_blk_n <= V_V_data_3_empty_n;
        else 
            V_V_data_3_blk_n <= ap_const_logic_1;
        end if; 
    end process;

    V_V_data_3_read <= V_V_data_00_update;
    ap_CS_fsm_state1 <= ap_CS_fsm(0);

    ap_block_state1_assign_proc : process(ap_start, F_V_data_00_status, V_V_data_00_status)
    begin
                ap_block_state1 <= ((ap_const_logic_0 = V_V_data_00_status) or (ap_const_logic_0 = F_V_data_00_status) or (ap_start = ap_const_logic_0));
    end process;


    ap_done_assign_proc : process(ap_start, ap_CS_fsm_state1, F_V_data_00_status, V_V_data_00_status, ap_ce)
    begin
        if ((((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1)) or (not(((ap_const_logic_0 = V_V_data_00_status) or (ap_const_logic_0 = F_V_data_00_status) or (ap_start = ap_const_logic_0))) and (ap_const_logic_1 = ap_ce) and (ap_const_logic_1 = ap_CS_fsm_state1)))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_ready_assign_proc : process(ap_start, ap_CS_fsm_state1, F_V_data_00_status, V_V_data_00_status, ap_ce)
    begin
        if ((not(((ap_const_logic_0 = V_V_data_00_status) or (ap_const_logic_0 = F_V_data_00_status) or (ap_start = ap_const_logic_0))) and (ap_const_logic_1 = ap_ce) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;

    ap_return_0 <= F_V_data_0_dout;
    ap_return_1 <= F_V_data_1_dout;
    ap_return_2 <= F_V_data_2_dout;
    ap_return_3 <= F_V_data_3_dout;
    ap_return_4 <= V_V_data_0_dout;
    ap_return_5 <= V_V_data_1_dout;
    ap_return_6 <= V_V_data_2_dout;
    ap_return_7 <= V_V_data_3_dout;
end behav;
