-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
-- Version: 2018.3
-- Copyright (C) 1986-2018 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity blockControl is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    start_full_n : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_continue : IN STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    start_out : OUT STD_LOGIC;
    start_write : OUT STD_LOGIC;
    input_V_data_TDATA : IN STD_LOGIC_VECTOR (63 downto 0);
    input_V_data_TVALID : IN STD_LOGIC;
    input_V_data_TREADY : OUT STD_LOGIC;
    simConfig_rowsToSimulate_V_dout : IN STD_LOGIC_VECTOR (26 downto 0);
    simConfig_rowsToSimulate_V_empty_n : IN STD_LOGIC;
    simConfig_rowsToSimulate_V_read : OUT STD_LOGIC;
    simConfig_BLOCK_NUMBERS_V_dout : IN STD_LOGIC_VECTOR (26 downto 0);
    simConfig_BLOCK_NUMBERS_V_empty_n : IN STD_LOGIC;
    simConfig_BLOCK_NUMBERS_V_read : OUT STD_LOGIC;
    V_SIZE_dout : IN STD_LOGIC_VECTOR (31 downto 0);
    V_SIZE_empty_n : IN STD_LOGIC;
    V_SIZE_read : OUT STD_LOGIC;
    V_data_V_data_0_din : OUT STD_LOGIC_VECTOR (31 downto 0);
    V_data_V_data_0_full_n : IN STD_LOGIC;
    V_data_V_data_0_write : OUT STD_LOGIC;
    V_data_V_data_1_din : OUT STD_LOGIC_VECTOR (31 downto 0);
    V_data_V_data_1_full_n : IN STD_LOGIC;
    V_data_V_data_1_write : OUT STD_LOGIC;
    V_data_V_data_2_din : OUT STD_LOGIC_VECTOR (31 downto 0);
    V_data_V_data_2_full_n : IN STD_LOGIC;
    V_data_V_data_2_write : OUT STD_LOGIC;
    V_data_V_data_3_din : OUT STD_LOGIC_VECTOR (31 downto 0);
    V_data_V_data_3_full_n : IN STD_LOGIC;
    V_data_V_data_3_write : OUT STD_LOGIC;
    C_data_V_data_0_din : OUT STD_LOGIC_VECTOR (31 downto 0);
    C_data_V_data_0_full_n : IN STD_LOGIC;
    C_data_V_data_0_write : OUT STD_LOGIC;
    C_data_V_data_1_din : OUT STD_LOGIC_VECTOR (31 downto 0);
    C_data_V_data_1_full_n : IN STD_LOGIC;
    C_data_V_data_1_write : OUT STD_LOGIC;
    C_data_V_data_2_din : OUT STD_LOGIC_VECTOR (31 downto 0);
    C_data_V_data_2_full_n : IN STD_LOGIC;
    C_data_V_data_2_write : OUT STD_LOGIC;
    C_data_V_data_3_din : OUT STD_LOGIC_VECTOR (31 downto 0);
    C_data_V_data_3_full_n : IN STD_LOGIC;
    C_data_V_data_3_write : OUT STD_LOGIC );
end;


architecture behav of blockControl is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (3 downto 0) := "0001";
    constant ap_ST_fsm_state2 : STD_LOGIC_VECTOR (3 downto 0) := "0010";
    constant ap_ST_fsm_state3 : STD_LOGIC_VECTOR (3 downto 0) := "0100";
    constant ap_ST_fsm_state4 : STD_LOGIC_VECTOR (3 downto 0) := "1000";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv32_3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000011";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_boolean_1 : BOOLEAN := true;

    signal real_start : STD_LOGIC;
    signal start_once_reg : STD_LOGIC := '0';
    signal ap_done_reg : STD_LOGIC := '0';
    signal ap_CS_fsm : STD_LOGIC_VECTOR (3 downto 0) := "0001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal internal_ap_ready : STD_LOGIC;
    signal simConfig_rowsToSimulate_V_blk_n : STD_LOGIC;
    signal simConfig_BLOCK_NUMBERS_V_blk_n : STD_LOGIC;
    signal V_SIZE_blk_n : STD_LOGIC;
    signal V_SIZE_read_reg_102 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_block_state1 : BOOLEAN;
    signal simConfig_rowsToSimu_reg_107 : STD_LOGIC_VECTOR (26 downto 0);
    signal simConfig_BLOCK_NUMB_reg_112 : STD_LOGIC_VECTOR (26 downto 0);
    signal grp_getConductances_fu_70_ap_start : STD_LOGIC;
    signal grp_getConductances_fu_70_ap_done : STD_LOGIC;
    signal grp_getConductances_fu_70_ap_idle : STD_LOGIC;
    signal grp_getConductances_fu_70_ap_ready : STD_LOGIC;
    signal grp_getConductances_fu_70_input_V_data_TREADY : STD_LOGIC;
    signal grp_getConductances_fu_70_C_data_V_data_0_din : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_getConductances_fu_70_C_data_V_data_0_write : STD_LOGIC;
    signal grp_getConductances_fu_70_C_data_V_data_1_din : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_getConductances_fu_70_C_data_V_data_1_write : STD_LOGIC;
    signal grp_getConductances_fu_70_C_data_V_data_2_din : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_getConductances_fu_70_C_data_V_data_2_write : STD_LOGIC;
    signal grp_getConductances_fu_70_C_data_V_data_3_din : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_getConductances_fu_70_C_data_V_data_3_write : STD_LOGIC;
    signal grp_getVoltages_fu_86_ap_start : STD_LOGIC;
    signal grp_getVoltages_fu_86_ap_done : STD_LOGIC;
    signal grp_getVoltages_fu_86_ap_idle : STD_LOGIC;
    signal grp_getVoltages_fu_86_ap_ready : STD_LOGIC;
    signal grp_getVoltages_fu_86_input_V_data_TREADY : STD_LOGIC;
    signal grp_getVoltages_fu_86_V_data_V_data_0_din : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_getVoltages_fu_86_V_data_V_data_0_write : STD_LOGIC;
    signal grp_getVoltages_fu_86_V_data_V_data_1_din : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_getVoltages_fu_86_V_data_V_data_1_write : STD_LOGIC;
    signal grp_getVoltages_fu_86_V_data_V_data_2_din : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_getVoltages_fu_86_V_data_V_data_2_write : STD_LOGIC;
    signal grp_getVoltages_fu_86_V_data_V_data_3_din : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_getVoltages_fu_86_V_data_V_data_3_write : STD_LOGIC;
    signal grp_getConductances_fu_70_ap_start_reg : STD_LOGIC := '0';
    signal ap_CS_fsm_state3 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state3 : signal is "none";
    signal ap_CS_fsm_state4 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state4 : signal is "none";
    signal grp_getVoltages_fu_86_ap_start_reg : STD_LOGIC := '0';
    signal ap_block_state1_ignore_call22 : BOOLEAN;
    signal ap_CS_fsm_state2 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state2 : signal is "none";
    signal ap_NS_fsm : STD_LOGIC_VECTOR (3 downto 0);

    component getConductances IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        input_V_data_TDATA : IN STD_LOGIC_VECTOR (63 downto 0);
        input_V_data_TVALID : IN STD_LOGIC;
        input_V_data_TREADY : OUT STD_LOGIC;
        simConfig_rowsToSimulate_V_read : IN STD_LOGIC_VECTOR (26 downto 0);
        simConfig_BLOCK_NUMBERS_V_read : IN STD_LOGIC_VECTOR (26 downto 0);
        C_data_V_data_0_din : OUT STD_LOGIC_VECTOR (31 downto 0);
        C_data_V_data_0_full_n : IN STD_LOGIC;
        C_data_V_data_0_write : OUT STD_LOGIC;
        C_data_V_data_1_din : OUT STD_LOGIC_VECTOR (31 downto 0);
        C_data_V_data_1_full_n : IN STD_LOGIC;
        C_data_V_data_1_write : OUT STD_LOGIC;
        C_data_V_data_2_din : OUT STD_LOGIC_VECTOR (31 downto 0);
        C_data_V_data_2_full_n : IN STD_LOGIC;
        C_data_V_data_2_write : OUT STD_LOGIC;
        C_data_V_data_3_din : OUT STD_LOGIC_VECTOR (31 downto 0);
        C_data_V_data_3_full_n : IN STD_LOGIC;
        C_data_V_data_3_write : OUT STD_LOGIC );
    end component;


    component getVoltages IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        input_V_data_TDATA : IN STD_LOGIC_VECTOR (63 downto 0);
        input_V_data_TVALID : IN STD_LOGIC;
        input_V_data_TREADY : OUT STD_LOGIC;
        V_SIZE : IN STD_LOGIC_VECTOR (31 downto 0);
        V_data_V_data_0_din : OUT STD_LOGIC_VECTOR (31 downto 0);
        V_data_V_data_0_full_n : IN STD_LOGIC;
        V_data_V_data_0_write : OUT STD_LOGIC;
        V_data_V_data_1_din : OUT STD_LOGIC_VECTOR (31 downto 0);
        V_data_V_data_1_full_n : IN STD_LOGIC;
        V_data_V_data_1_write : OUT STD_LOGIC;
        V_data_V_data_2_din : OUT STD_LOGIC_VECTOR (31 downto 0);
        V_data_V_data_2_full_n : IN STD_LOGIC;
        V_data_V_data_2_write : OUT STD_LOGIC;
        V_data_V_data_3_din : OUT STD_LOGIC_VECTOR (31 downto 0);
        V_data_V_data_3_full_n : IN STD_LOGIC;
        V_data_V_data_3_write : OUT STD_LOGIC );
    end component;



begin
    grp_getConductances_fu_70 : component getConductances
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => grp_getConductances_fu_70_ap_start,
        ap_done => grp_getConductances_fu_70_ap_done,
        ap_idle => grp_getConductances_fu_70_ap_idle,
        ap_ready => grp_getConductances_fu_70_ap_ready,
        input_V_data_TDATA => input_V_data_TDATA,
        input_V_data_TVALID => input_V_data_TVALID,
        input_V_data_TREADY => grp_getConductances_fu_70_input_V_data_TREADY,
        simConfig_rowsToSimulate_V_read => simConfig_rowsToSimu_reg_107,
        simConfig_BLOCK_NUMBERS_V_read => simConfig_BLOCK_NUMB_reg_112,
        C_data_V_data_0_din => grp_getConductances_fu_70_C_data_V_data_0_din,
        C_data_V_data_0_full_n => C_data_V_data_0_full_n,
        C_data_V_data_0_write => grp_getConductances_fu_70_C_data_V_data_0_write,
        C_data_V_data_1_din => grp_getConductances_fu_70_C_data_V_data_1_din,
        C_data_V_data_1_full_n => C_data_V_data_1_full_n,
        C_data_V_data_1_write => grp_getConductances_fu_70_C_data_V_data_1_write,
        C_data_V_data_2_din => grp_getConductances_fu_70_C_data_V_data_2_din,
        C_data_V_data_2_full_n => C_data_V_data_2_full_n,
        C_data_V_data_2_write => grp_getConductances_fu_70_C_data_V_data_2_write,
        C_data_V_data_3_din => grp_getConductances_fu_70_C_data_V_data_3_din,
        C_data_V_data_3_full_n => C_data_V_data_3_full_n,
        C_data_V_data_3_write => grp_getConductances_fu_70_C_data_V_data_3_write);

    grp_getVoltages_fu_86 : component getVoltages
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => grp_getVoltages_fu_86_ap_start,
        ap_done => grp_getVoltages_fu_86_ap_done,
        ap_idle => grp_getVoltages_fu_86_ap_idle,
        ap_ready => grp_getVoltages_fu_86_ap_ready,
        input_V_data_TDATA => input_V_data_TDATA,
        input_V_data_TVALID => input_V_data_TVALID,
        input_V_data_TREADY => grp_getVoltages_fu_86_input_V_data_TREADY,
        V_SIZE => V_SIZE_read_reg_102,
        V_data_V_data_0_din => grp_getVoltages_fu_86_V_data_V_data_0_din,
        V_data_V_data_0_full_n => V_data_V_data_0_full_n,
        V_data_V_data_0_write => grp_getVoltages_fu_86_V_data_V_data_0_write,
        V_data_V_data_1_din => grp_getVoltages_fu_86_V_data_V_data_1_din,
        V_data_V_data_1_full_n => V_data_V_data_1_full_n,
        V_data_V_data_1_write => grp_getVoltages_fu_86_V_data_V_data_1_write,
        V_data_V_data_2_din => grp_getVoltages_fu_86_V_data_V_data_2_din,
        V_data_V_data_2_full_n => V_data_V_data_2_full_n,
        V_data_V_data_2_write => grp_getVoltages_fu_86_V_data_V_data_2_write,
        V_data_V_data_3_din => grp_getVoltages_fu_86_V_data_V_data_3_din,
        V_data_V_data_3_full_n => V_data_V_data_3_full_n,
        V_data_V_data_3_write => grp_getVoltages_fu_86_V_data_V_data_3_write);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    ap_done_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_done_reg <= ap_const_logic_0;
            else
                if ((ap_continue = ap_const_logic_1)) then 
                    ap_done_reg <= ap_const_logic_0;
                elsif (((ap_const_logic_1 = ap_CS_fsm_state4) and (grp_getConductances_fu_70_ap_done = ap_const_logic_1))) then 
                    ap_done_reg <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    grp_getConductances_fu_70_ap_start_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                grp_getConductances_fu_70_ap_start_reg <= ap_const_logic_0;
            else
                if ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
                    grp_getConductances_fu_70_ap_start_reg <= ap_const_logic_1;
                elsif ((grp_getConductances_fu_70_ap_ready = ap_const_logic_1)) then 
                    grp_getConductances_fu_70_ap_start_reg <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    grp_getVoltages_fu_86_ap_start_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                grp_getVoltages_fu_86_ap_start_reg <= ap_const_logic_0;
            else
                if ((not(((ap_const_logic_0 = V_SIZE_empty_n) or (simConfig_BLOCK_NUMBERS_V_empty_n = ap_const_logic_0) or (simConfig_rowsToSimulate_V_empty_n = ap_const_logic_0) or (real_start = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                    grp_getVoltages_fu_86_ap_start_reg <= ap_const_logic_1;
                elsif ((grp_getVoltages_fu_86_ap_ready = ap_const_logic_1)) then 
                    grp_getVoltages_fu_86_ap_start_reg <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    start_once_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                start_once_reg <= ap_const_logic_0;
            else
                if (((internal_ap_ready = ap_const_logic_0) and (real_start = ap_const_logic_1))) then 
                    start_once_reg <= ap_const_logic_1;
                elsif ((internal_ap_ready = ap_const_logic_1)) then 
                    start_once_reg <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;

    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((not(((ap_const_logic_0 = V_SIZE_empty_n) or (simConfig_BLOCK_NUMBERS_V_empty_n = ap_const_logic_0) or (simConfig_rowsToSimulate_V_empty_n = ap_const_logic_0) or (real_start = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then
                V_SIZE_read_reg_102 <= V_SIZE_dout;
                simConfig_BLOCK_NUMB_reg_112 <= simConfig_BLOCK_NUMBERS_V_dout;
                simConfig_rowsToSimu_reg_107 <= simConfig_rowsToSimulate_V_dout;
            end if;
        end if;
    end process;

    ap_NS_fsm_assign_proc : process (real_start, ap_done_reg, ap_CS_fsm, ap_CS_fsm_state1, simConfig_rowsToSimulate_V_empty_n, simConfig_BLOCK_NUMBERS_V_empty_n, V_SIZE_empty_n, grp_getConductances_fu_70_ap_done, grp_getVoltages_fu_86_ap_done, ap_CS_fsm_state4, ap_CS_fsm_state2)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if ((not(((ap_const_logic_0 = V_SIZE_empty_n) or (simConfig_BLOCK_NUMBERS_V_empty_n = ap_const_logic_0) or (simConfig_rowsToSimulate_V_empty_n = ap_const_logic_0) or (real_start = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_state2 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state2) and (grp_getVoltages_fu_86_ap_done = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state3;
                else
                    ap_NS_fsm <= ap_ST_fsm_state2;
                end if;
            when ap_ST_fsm_state3 => 
                ap_NS_fsm <= ap_ST_fsm_state4;
            when ap_ST_fsm_state4 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state4) and (grp_getConductances_fu_70_ap_done = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state1;
                else
                    ap_NS_fsm <= ap_ST_fsm_state4;
                end if;
            when others =>  
                ap_NS_fsm <= "XXXX";
        end case;
    end process;
    C_data_V_data_0_din <= grp_getConductances_fu_70_C_data_V_data_0_din;

    C_data_V_data_0_write_assign_proc : process(grp_getConductances_fu_70_C_data_V_data_0_write, ap_CS_fsm_state4)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            C_data_V_data_0_write <= grp_getConductances_fu_70_C_data_V_data_0_write;
        else 
            C_data_V_data_0_write <= ap_const_logic_0;
        end if; 
    end process;

    C_data_V_data_1_din <= grp_getConductances_fu_70_C_data_V_data_1_din;

    C_data_V_data_1_write_assign_proc : process(grp_getConductances_fu_70_C_data_V_data_1_write, ap_CS_fsm_state4)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            C_data_V_data_1_write <= grp_getConductances_fu_70_C_data_V_data_1_write;
        else 
            C_data_V_data_1_write <= ap_const_logic_0;
        end if; 
    end process;

    C_data_V_data_2_din <= grp_getConductances_fu_70_C_data_V_data_2_din;

    C_data_V_data_2_write_assign_proc : process(grp_getConductances_fu_70_C_data_V_data_2_write, ap_CS_fsm_state4)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            C_data_V_data_2_write <= grp_getConductances_fu_70_C_data_V_data_2_write;
        else 
            C_data_V_data_2_write <= ap_const_logic_0;
        end if; 
    end process;

    C_data_V_data_3_din <= grp_getConductances_fu_70_C_data_V_data_3_din;

    C_data_V_data_3_write_assign_proc : process(grp_getConductances_fu_70_C_data_V_data_3_write, ap_CS_fsm_state4)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            C_data_V_data_3_write <= grp_getConductances_fu_70_C_data_V_data_3_write;
        else 
            C_data_V_data_3_write <= ap_const_logic_0;
        end if; 
    end process;


    V_SIZE_blk_n_assign_proc : process(real_start, ap_done_reg, ap_CS_fsm_state1, V_SIZE_empty_n)
    begin
        if ((not(((real_start = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            V_SIZE_blk_n <= V_SIZE_empty_n;
        else 
            V_SIZE_blk_n <= ap_const_logic_1;
        end if; 
    end process;


    V_SIZE_read_assign_proc : process(real_start, ap_done_reg, ap_CS_fsm_state1, simConfig_rowsToSimulate_V_empty_n, simConfig_BLOCK_NUMBERS_V_empty_n, V_SIZE_empty_n)
    begin
        if ((not(((ap_const_logic_0 = V_SIZE_empty_n) or (simConfig_BLOCK_NUMBERS_V_empty_n = ap_const_logic_0) or (simConfig_rowsToSimulate_V_empty_n = ap_const_logic_0) or (real_start = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            V_SIZE_read <= ap_const_logic_1;
        else 
            V_SIZE_read <= ap_const_logic_0;
        end if; 
    end process;

    V_data_V_data_0_din <= grp_getVoltages_fu_86_V_data_V_data_0_din;

    V_data_V_data_0_write_assign_proc : process(grp_getVoltages_fu_86_V_data_V_data_0_write, ap_CS_fsm_state2)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            V_data_V_data_0_write <= grp_getVoltages_fu_86_V_data_V_data_0_write;
        else 
            V_data_V_data_0_write <= ap_const_logic_0;
        end if; 
    end process;

    V_data_V_data_1_din <= grp_getVoltages_fu_86_V_data_V_data_1_din;

    V_data_V_data_1_write_assign_proc : process(grp_getVoltages_fu_86_V_data_V_data_1_write, ap_CS_fsm_state2)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            V_data_V_data_1_write <= grp_getVoltages_fu_86_V_data_V_data_1_write;
        else 
            V_data_V_data_1_write <= ap_const_logic_0;
        end if; 
    end process;

    V_data_V_data_2_din <= grp_getVoltages_fu_86_V_data_V_data_2_din;

    V_data_V_data_2_write_assign_proc : process(grp_getVoltages_fu_86_V_data_V_data_2_write, ap_CS_fsm_state2)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            V_data_V_data_2_write <= grp_getVoltages_fu_86_V_data_V_data_2_write;
        else 
            V_data_V_data_2_write <= ap_const_logic_0;
        end if; 
    end process;

    V_data_V_data_3_din <= grp_getVoltages_fu_86_V_data_V_data_3_din;

    V_data_V_data_3_write_assign_proc : process(grp_getVoltages_fu_86_V_data_V_data_3_write, ap_CS_fsm_state2)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            V_data_V_data_3_write <= grp_getVoltages_fu_86_V_data_V_data_3_write;
        else 
            V_data_V_data_3_write <= ap_const_logic_0;
        end if; 
    end process;

    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state2 <= ap_CS_fsm(1);
    ap_CS_fsm_state3 <= ap_CS_fsm(2);
    ap_CS_fsm_state4 <= ap_CS_fsm(3);

    ap_block_state1_assign_proc : process(real_start, ap_done_reg, simConfig_rowsToSimulate_V_empty_n, simConfig_BLOCK_NUMBERS_V_empty_n, V_SIZE_empty_n)
    begin
                ap_block_state1 <= ((ap_const_logic_0 = V_SIZE_empty_n) or (simConfig_BLOCK_NUMBERS_V_empty_n = ap_const_logic_0) or (simConfig_rowsToSimulate_V_empty_n = ap_const_logic_0) or (real_start = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1));
    end process;


    ap_block_state1_ignore_call22_assign_proc : process(real_start, ap_done_reg, simConfig_rowsToSimulate_V_empty_n, simConfig_BLOCK_NUMBERS_V_empty_n, V_SIZE_empty_n)
    begin
                ap_block_state1_ignore_call22 <= ((ap_const_logic_0 = V_SIZE_empty_n) or (simConfig_BLOCK_NUMBERS_V_empty_n = ap_const_logic_0) or (simConfig_rowsToSimulate_V_empty_n = ap_const_logic_0) or (real_start = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1));
    end process;


    ap_done_assign_proc : process(ap_done_reg, grp_getConductances_fu_70_ap_done, ap_CS_fsm_state4)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state4) and (grp_getConductances_fu_70_ap_done = ap_const_logic_1))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_done_reg;
        end if; 
    end process;


    ap_idle_assign_proc : process(real_start, ap_CS_fsm_state1)
    begin
        if (((real_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;

    ap_ready <= internal_ap_ready;
    grp_getConductances_fu_70_ap_start <= grp_getConductances_fu_70_ap_start_reg;
    grp_getVoltages_fu_86_ap_start <= grp_getVoltages_fu_86_ap_start_reg;

    input_V_data_TREADY_assign_proc : process(grp_getConductances_fu_70_input_V_data_TREADY, grp_getVoltages_fu_86_input_V_data_TREADY, ap_CS_fsm_state4, ap_CS_fsm_state2)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            input_V_data_TREADY <= grp_getVoltages_fu_86_input_V_data_TREADY;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            input_V_data_TREADY <= grp_getConductances_fu_70_input_V_data_TREADY;
        else 
            input_V_data_TREADY <= ap_const_logic_0;
        end if; 
    end process;


    internal_ap_ready_assign_proc : process(grp_getConductances_fu_70_ap_done, ap_CS_fsm_state4)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state4) and (grp_getConductances_fu_70_ap_done = ap_const_logic_1))) then 
            internal_ap_ready <= ap_const_logic_1;
        else 
            internal_ap_ready <= ap_const_logic_0;
        end if; 
    end process;


    real_start_assign_proc : process(ap_start, start_full_n, start_once_reg)
    begin
        if (((start_once_reg = ap_const_logic_0) and (start_full_n = ap_const_logic_0))) then 
            real_start <= ap_const_logic_0;
        else 
            real_start <= ap_start;
        end if; 
    end process;


    simConfig_BLOCK_NUMBERS_V_blk_n_assign_proc : process(real_start, ap_done_reg, ap_CS_fsm_state1, simConfig_BLOCK_NUMBERS_V_empty_n)
    begin
        if ((not(((real_start = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            simConfig_BLOCK_NUMBERS_V_blk_n <= simConfig_BLOCK_NUMBERS_V_empty_n;
        else 
            simConfig_BLOCK_NUMBERS_V_blk_n <= ap_const_logic_1;
        end if; 
    end process;


    simConfig_BLOCK_NUMBERS_V_read_assign_proc : process(real_start, ap_done_reg, ap_CS_fsm_state1, simConfig_rowsToSimulate_V_empty_n, simConfig_BLOCK_NUMBERS_V_empty_n, V_SIZE_empty_n)
    begin
        if ((not(((ap_const_logic_0 = V_SIZE_empty_n) or (simConfig_BLOCK_NUMBERS_V_empty_n = ap_const_logic_0) or (simConfig_rowsToSimulate_V_empty_n = ap_const_logic_0) or (real_start = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            simConfig_BLOCK_NUMBERS_V_read <= ap_const_logic_1;
        else 
            simConfig_BLOCK_NUMBERS_V_read <= ap_const_logic_0;
        end if; 
    end process;


    simConfig_rowsToSimulate_V_blk_n_assign_proc : process(real_start, ap_done_reg, ap_CS_fsm_state1, simConfig_rowsToSimulate_V_empty_n)
    begin
        if ((not(((real_start = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            simConfig_rowsToSimulate_V_blk_n <= simConfig_rowsToSimulate_V_empty_n;
        else 
            simConfig_rowsToSimulate_V_blk_n <= ap_const_logic_1;
        end if; 
    end process;


    simConfig_rowsToSimulate_V_read_assign_proc : process(real_start, ap_done_reg, ap_CS_fsm_state1, simConfig_rowsToSimulate_V_empty_n, simConfig_BLOCK_NUMBERS_V_empty_n, V_SIZE_empty_n)
    begin
        if ((not(((ap_const_logic_0 = V_SIZE_empty_n) or (simConfig_BLOCK_NUMBERS_V_empty_n = ap_const_logic_0) or (simConfig_rowsToSimulate_V_empty_n = ap_const_logic_0) or (real_start = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            simConfig_rowsToSimulate_V_read <= ap_const_logic_1;
        else 
            simConfig_rowsToSimulate_V_read <= ap_const_logic_0;
        end if; 
    end process;

    start_out <= real_start;

    start_write_assign_proc : process(real_start, start_once_reg)
    begin
        if (((start_once_reg = ap_const_logic_0) and (real_start = ap_const_logic_1))) then 
            start_write <= ap_const_logic_1;
        else 
            start_write <= ap_const_logic_0;
        end if; 
    end process;

end behav;
