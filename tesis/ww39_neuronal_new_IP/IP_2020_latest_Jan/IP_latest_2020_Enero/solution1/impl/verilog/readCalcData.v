// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2018.3
// Copyright (C) 1986-2018 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module readCalcData (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        F_V_data_0_dout,
        F_V_data_0_empty_n,
        F_V_data_0_read,
        F_V_data_1_dout,
        F_V_data_1_empty_n,
        F_V_data_1_read,
        F_V_data_2_dout,
        F_V_data_2_empty_n,
        F_V_data_2_read,
        F_V_data_3_dout,
        F_V_data_3_empty_n,
        F_V_data_3_read,
        V_V_data_0_dout,
        V_V_data_0_empty_n,
        V_V_data_0_read,
        V_V_data_1_dout,
        V_V_data_1_empty_n,
        V_V_data_1_read,
        V_V_data_2_dout,
        V_V_data_2_empty_n,
        V_V_data_2_read,
        V_V_data_3_dout,
        V_V_data_3_empty_n,
        V_V_data_3_read,
        ap_return_0,
        ap_return_1,
        ap_return_2,
        ap_return_3,
        ap_return_4,
        ap_return_5,
        ap_return_6,
        ap_return_7,
        F_V_data_0_blk_n,
        F_V_data_1_blk_n,
        F_V_data_2_blk_n,
        F_V_data_3_blk_n,
        V_V_data_0_blk_n,
        V_V_data_1_blk_n,
        V_V_data_2_blk_n,
        V_V_data_3_blk_n,
        ap_ce
);

parameter    ap_ST_fsm_state1 = 1'd1;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
input  [31:0] F_V_data_0_dout;
input   F_V_data_0_empty_n;
output   F_V_data_0_read;
input  [31:0] F_V_data_1_dout;
input   F_V_data_1_empty_n;
output   F_V_data_1_read;
input  [31:0] F_V_data_2_dout;
input   F_V_data_2_empty_n;
output   F_V_data_2_read;
input  [31:0] F_V_data_3_dout;
input   F_V_data_3_empty_n;
output   F_V_data_3_read;
input  [31:0] V_V_data_0_dout;
input   V_V_data_0_empty_n;
output   V_V_data_0_read;
input  [31:0] V_V_data_1_dout;
input   V_V_data_1_empty_n;
output   V_V_data_1_read;
input  [31:0] V_V_data_2_dout;
input   V_V_data_2_empty_n;
output   V_V_data_2_read;
input  [31:0] V_V_data_3_dout;
input   V_V_data_3_empty_n;
output   V_V_data_3_read;
output  [31:0] ap_return_0;
output  [31:0] ap_return_1;
output  [31:0] ap_return_2;
output  [31:0] ap_return_3;
output  [31:0] ap_return_4;
output  [31:0] ap_return_5;
output  [31:0] ap_return_6;
output  [31:0] ap_return_7;
output   F_V_data_0_blk_n;
output   F_V_data_1_blk_n;
output   F_V_data_2_blk_n;
output   F_V_data_3_blk_n;
output   V_V_data_0_blk_n;
output   V_V_data_1_blk_n;
output   V_V_data_2_blk_n;
output   V_V_data_3_blk_n;
input   ap_ce;

reg ap_done;
reg ap_idle;
reg ap_ready;
reg F_V_data_0_blk_n;
reg F_V_data_1_blk_n;
reg F_V_data_2_blk_n;
reg F_V_data_3_blk_n;
reg V_V_data_0_blk_n;
reg V_V_data_1_blk_n;
reg V_V_data_2_blk_n;
reg V_V_data_3_blk_n;

(* fsm_encoding = "none" *) reg   [0:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
reg    F_V_data_00_update;
wire    F_V_data_00_status;
wire    V_V_data_00_status;
reg    ap_block_state1;
reg    V_V_data_00_update;
reg   [0:0] ap_NS_fsm;

// power-on initialization
initial begin
#0 ap_CS_fsm = 1'd1;
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (*) begin
    if ((~((1'b0 == V_V_data_00_status) | (1'b0 == F_V_data_00_status) | (ap_start == 1'b0)) & (1'b1 == ap_ce) & (1'b1 == ap_CS_fsm_state1))) begin
        F_V_data_00_update = 1'b1;
    end else begin
        F_V_data_00_update = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
        F_V_data_0_blk_n = F_V_data_0_empty_n;
    end else begin
        F_V_data_0_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
        F_V_data_1_blk_n = F_V_data_1_empty_n;
    end else begin
        F_V_data_1_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
        F_V_data_2_blk_n = F_V_data_2_empty_n;
    end else begin
        F_V_data_2_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
        F_V_data_3_blk_n = F_V_data_3_empty_n;
    end else begin
        F_V_data_3_blk_n = 1'b1;
    end
end

always @ (*) begin
    if ((~((1'b0 == V_V_data_00_status) | (1'b0 == F_V_data_00_status) | (ap_start == 1'b0)) & (1'b1 == ap_ce) & (1'b1 == ap_CS_fsm_state1))) begin
        V_V_data_00_update = 1'b1;
    end else begin
        V_V_data_00_update = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
        V_V_data_0_blk_n = V_V_data_0_empty_n;
    end else begin
        V_V_data_0_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
        V_V_data_1_blk_n = V_V_data_1_empty_n;
    end else begin
        V_V_data_1_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
        V_V_data_2_blk_n = V_V_data_2_empty_n;
    end else begin
        V_V_data_2_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
        V_V_data_3_blk_n = V_V_data_3_empty_n;
    end else begin
        V_V_data_3_blk_n = 1'b1;
    end
end

always @ (*) begin
    if ((((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1)) | (~((1'b0 == V_V_data_00_status) | (1'b0 == F_V_data_00_status) | (ap_start == 1'b0)) & (1'b1 == ap_ce) & (1'b1 == ap_CS_fsm_state1)))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if ((~((1'b0 == V_V_data_00_status) | (1'b0 == F_V_data_00_status) | (ap_start == 1'b0)) & (1'b1 == ap_ce) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            ap_NS_fsm = ap_ST_fsm_state1;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign F_V_data_00_status = (F_V_data_3_empty_n & F_V_data_2_empty_n & F_V_data_1_empty_n & F_V_data_0_empty_n);

assign F_V_data_0_read = F_V_data_00_update;

assign F_V_data_1_read = F_V_data_00_update;

assign F_V_data_2_read = F_V_data_00_update;

assign F_V_data_3_read = F_V_data_00_update;

assign V_V_data_00_status = (V_V_data_3_empty_n & V_V_data_2_empty_n & V_V_data_1_empty_n & V_V_data_0_empty_n);

assign V_V_data_0_read = V_V_data_00_update;

assign V_V_data_1_read = V_V_data_00_update;

assign V_V_data_2_read = V_V_data_00_update;

assign V_V_data_3_read = V_V_data_00_update;

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

always @ (*) begin
    ap_block_state1 = ((1'b0 == V_V_data_00_status) | (1'b0 == F_V_data_00_status) | (ap_start == 1'b0));
end

assign ap_return_0 = F_V_data_0_dout;

assign ap_return_1 = F_V_data_1_dout;

assign ap_return_2 = F_V_data_2_dout;

assign ap_return_3 = F_V_data_3_dout;

assign ap_return_4 = V_V_data_0_dout;

assign ap_return_5 = V_V_data_1_dout;

assign ap_return_6 = V_V_data_2_dout;

assign ap_return_7 = V_V_data_3_dout;

endmodule //readCalcData
